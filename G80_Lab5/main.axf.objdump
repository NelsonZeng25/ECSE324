
P:/ECSE324/G80_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	6c 0b 00 00 78 0b 00 00 84 0b 00 00 90 0b 00 00     l...x...........
  30:	9c 0b 00 00 94 12 00 00 14 0a 00 00 a8 0b 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000455 	bl	1230 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000137c 	.word	0x0000137c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	000305b8 	.word	0x000305b8

00000124 <__cs3_heap_start_ptr>:
     124:	000305e0 	.word	0x000305e0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	000305c0 	.word	0x000305c0
     170:	000305c3 	.word	0x000305c3
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	000305c0 	.word	0x000305c0
     1bc:	000305c0 	.word	0x000305c0
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	000305c0 	.word	0x000305c0
     200:	00000000 	.word	0x00000000
     204:	00001320 	.word	0x00001320

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001320 	.word	0x00001320
     250:	000305c4 	.word	0x000305c4
     254:	00001380 	.word	0x00001380
     258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/ps2_keyboard.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/slider_switches.h"

int main() {
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd010 	sub	sp, sp, #16
	// Audio Part 0
	int hi = 0x00FFFFFF; 	//hi signal
     268:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
     26c:	e50b3010 	str	r3, [r11, #-16]
	int lo = 0x00000000;	//lo signal
     270:	e3a03000 	mov	r3, #0
     274:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int x = hi;
     278:	e51b3010 	ldr	r3, [r11, #-16]
     27c:	e50b3008 	str	r3, [r11, #-8]
	int i;
	while(1){
		for(i = 0 ; i < 240;){ 			//to reach a frequency of 100Hz, there must be 240 samples per half cycle
     280:	e3a03000 	mov	r3, #0
     284:	e50b300c 	str	r3, [r11, #-12]
     288:	ea000007 	b	2ac <main+0x50>
			if(audio_write_ASM(x))
     28c:	e51b0008 	ldr	r0, [r11, #-8]
     290:	eb000261 	bl	c1c <audio_write_ASM>
     294:	e1a03000 	mov	r3, r0
     298:	e3530000 	cmp	r3, #0
     29c:	0a000002 	beq	2ac <main+0x50>
				i++;
     2a0:	e51b300c 	ldr	r3, [r11, #-12]
     2a4:	e2833001 	add	r3, r3, #1
     2a8:	e50b300c 	str	r3, [r11, #-12]
	int hi = 0x00FFFFFF; 	//hi signal
	int lo = 0x00000000;	//lo signal
	int x = hi;
	int i;
	while(1){
		for(i = 0 ; i < 240;){ 			//to reach a frequency of 100Hz, there must be 240 samples per half cycle
     2ac:	e51b300c 	ldr	r3, [r11, #-12]
     2b0:	e35300ef 	cmp	r3, #239	; 0xef
     2b4:	dafffff4 	ble	28c <main+0x30>
			if(audio_write_ASM(x))
				i++;
		}
		x =(x==hi)?lo:hi;
     2b8:	e51b2008 	ldr	r2, [r11, #-8]
     2bc:	e51b3010 	ldr	r3, [r11, #-16]
     2c0:	e1520003 	cmp	r2, r3
     2c4:	1a000001 	bne	2d0 <main+0x74>
     2c8:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     2cc:	ea000000 	b	2d4 <main+0x78>
     2d0:	e51b3010 	ldr	r3, [r11, #-16]
     2d4:	e50b3008 	str	r3, [r11, #-8]
	}
     2d8:	eaffffe8 	b	280 <main+0x24>

000002dc <HEX_clear_ASM>:
     2dc:	e3a01000 	mov	r1, #0
     2e0:	ea000004 	b	2f8 <WRITE>

000002e4 <HEX_flood_ASM>:
     2e4:	e3a0107f 	mov	r1, #127	; 0x7f
     2e8:	ea000002 	b	2f8 <WRITE>

000002ec <HEX_write_ASM>:
     2ec:	e59f2064 	ldr	r2, [pc, #100]	; 358 <PATTERNS+0x14>
     2f0:	e7d21001 	ldrb	r1, [r2, r1]
     2f4:	eaffffff 	b	2f8 <WRITE>

000002f8 <WRITE>:
     2f8:	e92d0030 	push	{r4, r5}
     2fc:	e59f2058 	ldr	r2, [pc, #88]	; 35c <PATTERNS+0x18>
     300:	e3a03000 	mov	r3, #0
     304:	e3e050ff 	mvn	r5, #255	; 0xff

00000308 <LOOP>:
     308:	e3100001 	tst	r0, #1
     30c:	0a000003 	beq	320 <CONTINUE>
     310:	e5924000 	ldr	r4, [r2]
     314:	e0044005 	and	r4, r4, r5
     318:	e1844001 	orr	r4, r4, r1
     31c:	e5824000 	str	r4, [r2]

00000320 <CONTINUE>:
     320:	e1a05c65 	ror	r5, r5, #24
     324:	e1a01c61 	ror	r1, r1, #24
     328:	e2833001 	add	r3, r3, #1
     32c:	e3530004 	cmp	r3, #4
     330:	059f2028 	ldreq	r2, [pc, #40]	; 360 <PATTERNS+0x1c>
     334:	e1b000a0 	lsrs	r0, r0, #1
     338:	1afffff2 	bne	308 <LOOP>
     33c:	e8bd0030 	pop	{r4, r5}
     340:	e12fff1e 	bx	lr

00000344 <PATTERNS>:
     344:	4f5b063f 	.word	0x4f5b063f
     348:	077d6d66 	.word	0x077d6d66
     34c:	7c776f7f 	.word	0x7c776f7f
     350:	71795e39 	.word	0x71795e39
     354:	000000ff 	.word	0x000000ff
     358:	00000344 	.word	0x00000344
     35c:	ff200020 	.word	0xff200020
     360:	ff200030 	.word	0xff200030

00000364 <HPS_TIM_config_ASM>:
     364:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     368:	e3a01000 	mov	r1, #0
     36c:	e3a02001 	mov	r2, #1
     370:	e5907000 	ldr	r7, [r0]
     374:	eaffffff 	b	378 <LOOP>

00000378 <LOOP>:
     378:	e1170112 	tst	r7, r2, lsl r1
     37c:	0a000000 	beq	384 <CONTINUE>
     380:	eb000004 	bl	398 <CONFIG>

00000384 <CONTINUE>:
     384:	e2811001 	add	r1, r1, #1
     388:	e3510004 	cmp	r1, #4
     38c:	bafffff9 	blt	378 <LOOP>

00000390 <DONE>:
     390:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     394:	e12fff1e 	bx	lr

00000398 <CONFIG>:
     398:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     39c:	e59f30e4 	ldr	r3, [pc, #228]	; 488 <HPS_TIM_BASE+0x10>
     3a0:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     3a4:	eb000005 	bl	3c0 <DISABLE>
     3a8:	eb000008 	bl	3d0 <SET_LOAD_VAL>
     3ac:	eb00000e 	bl	3ec <SET_LOAD_BIT>
     3b0:	eb000013 	bl	404 <SET_INT_BIT>
     3b4:	eb000019 	bl	420 <SET_EN_BIT>
     3b8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     3bc:	e12fff1e 	bx	lr

000003c0 <DISABLE>:
     3c0:	e5945008 	ldr	r5, [r4, #8]
     3c4:	e3c55001 	bic	r5, r5, #1
     3c8:	e5845008 	str	r5, [r4, #8]
     3cc:	e12fff1e 	bx	lr

000003d0 <SET_LOAD_VAL>:
     3d0:	e5905004 	ldr	r5, [r0, #4]
     3d4:	e3a06019 	mov	r6, #25
     3d8:	e0050695 	mul	r5, r5, r6
     3dc:	e3510002 	cmp	r1, #2
     3e0:	b1a05105 	lsllt	r5, r5, #2
     3e4:	e5845000 	str	r5, [r4]
     3e8:	e12fff1e 	bx	lr

000003ec <SET_LOAD_BIT>:
     3ec:	e5945008 	ldr	r5, [r4, #8]
     3f0:	e5906008 	ldr	r6, [r0, #8]
     3f4:	e3c55002 	bic	r5, r5, #2
     3f8:	e1855086 	orr	r5, r5, r6, lsl #1
     3fc:	e5845008 	str	r5, [r4, #8]
     400:	e12fff1e 	bx	lr

00000404 <SET_INT_BIT>:
     404:	e5945008 	ldr	r5, [r4, #8]
     408:	e590600c 	ldr	r6, [r0, #12]
     40c:	e2266001 	eor	r6, r6, #1
     410:	e3c55004 	bic	r5, r5, #4
     414:	e1855106 	orr	r5, r5, r6, lsl #2
     418:	e5845008 	str	r5, [r4, #8]
     41c:	e12fff1e 	bx	lr

00000420 <SET_EN_BIT>:
     420:	e5945008 	ldr	r5, [r4, #8]
     424:	e5906010 	ldr	r6, [r0, #16]
     428:	e3c55001 	bic	r5, r5, #1
     42c:	e1855006 	orr	r5, r5, r6
     430:	e5845008 	str	r5, [r4, #8]
     434:	e12fff1e 	bx	lr

00000438 <HPS_TIM_clear_INT_ASM>:
     438:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     43c:	e3a01000 	mov	r1, #0
     440:	e3a02001 	mov	r2, #1
     444:	eaffffff 	b	448 <INT_LOOP>

00000448 <INT_LOOP>:
     448:	e1100112 	tst	r0, r2, lsl r1
     44c:	0a000000 	beq	454 <INT_CONTINUE>
     450:	eb000004 	bl	468 <CLEAR_IT>

00000454 <INT_CONTINUE>:
     454:	e2811001 	add	r1, r1, #1
     458:	e3510004 	cmp	r1, #4
     45c:	bafffff9 	blt	448 <INT_LOOP>

00000460 <INT_DONE>:
     460:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     464:	e12fff1e 	bx	lr

00000468 <CLEAR_IT>:
     468:	e59f3018 	ldr	r3, [pc, #24]	; 488 <HPS_TIM_BASE+0x10>
     46c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     470:	e593300c 	ldr	r3, [r3, #12]
     474:	e12fff1e 	bx	lr

00000478 <HPS_TIM_BASE>:
     478:	ffc08000 	.word	0xffc08000
     47c:	ffc09000 	.word	0xffc09000
     480:	ffd00000 	.word	0xffd00000
     484:	ffd01000 	.word	0xffd01000
     488:	00000478 	.word	0x00000478

0000048c <A9_PRIV_TIM_ISR>:
	.global FPGA_JP1_ISR
	.global FPGA_JP2_ISR
	.global FPGA_PS2_DUAL_ISR
	
A9_PRIV_TIM_ISR:
	BX LR
     48c:	e12fff1e 	bx	lr

00000490 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     490:	e12fff1e 	bx	lr

00000494 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	BX LR
     494:	e12fff1e 	bx	lr

00000498 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     498:	e12fff1e 	bx	lr

0000049c <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     49c:	e12fff1e 	bx	lr

000004a0 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     4a0:	e12fff1e 	bx	lr

000004a4 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     4a4:	e12fff1e 	bx	lr

000004a8 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     4a8:	e12fff1e 	bx	lr

000004ac <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     4ac:	e12fff1e 	bx	lr

000004b0 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     4b0:	e12fff1e 	bx	lr

000004b4 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     4b4:	e12fff1e 	bx	lr

000004b8 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     4b8:	e12fff1e 	bx	lr

000004bc <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     4bc:	e12fff1e 	bx	lr

000004c0 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     4c0:	e12fff1e 	bx	lr

000004c4 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     4c4:	e12fff1e 	bx	lr

000004c8 <read_LEDs_ASM>:
     4c8:	e59f1010 	ldr	r1, [pc, #16]	; 4e0 <write_LEDs_ASM+0xc>
     4cc:	e5910000 	ldr	r0, [r1]
     4d0:	e12fff1e 	bx	lr

000004d4 <write_LEDs_ASM>:
     4d4:	e59f1004 	ldr	r1, [pc, #4]	; 4e0 <write_LEDs_ASM+0xc>
     4d8:	e5810000 	str	r0, [r1]
     4dc:	e12fff1e 	bx	lr
     4e0:	ff200000 	.word	0xff200000

000004e4 <read_ps2_data_ASM>:
     4e4:	e59f114c 	ldr	r1, [pc, #332]	; 638 <ps2_fifo_ravail+0x4>
     4e8:	e5911000 	ldr	r1, [r1]
     4ec:	e3a02902 	mov	r2, #32768	; 0x8000
     4f0:	e1110002 	tst	r1, r2
     4f4:	03a00000 	moveq	r0, #0
     4f8:	012fff1e 	bxeq	lr
     4fc:	e20120ff 	and	r2, r1, #255	; 0xff
     500:	e5c02000 	strb	r2, [r0]
     504:	e59f2130 	ldr	r2, [pc, #304]	; 63c <ps2_fifo_ravail+0x8>
     508:	e0010002 	and	r0, r1, r2
     50c:	e1a00820 	lsr	r0, r0, #16
     510:	e12fff1e 	bx	lr

00000514 <enable_ps2_int_ASM>:
     514:	e59f011c 	ldr	r0, [pc, #284]	; 638 <ps2_fifo_ravail+0x4>
     518:	e3a01001 	mov	r1, #1
     51c:	e5c01004 	strb	r1, [r0, #4]
     520:	e12fff1e 	bx	lr

00000524 <disable_ps2_int_ASM>:
     524:	e59f010c 	ldr	r0, [pc, #268]	; 638 <ps2_fifo_ravail+0x4>
     528:	e3a01000 	mov	r1, #0
     52c:	e5c01004 	strb	r1, [r0, #4]
     530:	e12fff1e 	bx	lr

00000534 <ps2_fifo_data>:
	...

00000634 <ps2_fifo_ravail>:
     634:	00000000 	.word	0x00000000
     638:	ff200100 	.word	0xff200100
     63c:	ffff0000 	.word	0xffff0000

00000640 <read_PB_data_ASM>:
     640:	e59f1074 	ldr	r1, [pc, #116]	; 6bc <disable_PB_INT_ASM+0x14>
     644:	e5910000 	ldr	r0, [r1]
     648:	e12fff1e 	bx	lr

0000064c <PB_data_is_pressed_ASM>:
     64c:	e59f1068 	ldr	r1, [pc, #104]	; 6bc <disable_PB_INT_ASM+0x14>
     650:	e5912000 	ldr	r2, [r1]
     654:	e0000002 	and	r0, r0, r2
     658:	e3300000 	teq	r0, #0
     65c:	13a00001 	movne	r0, #1
     660:	e12fff1e 	bx	lr

00000664 <read_PB_edgecap_ASM>:
     664:	e59f1054 	ldr	r1, [pc, #84]	; 6c0 <disable_PB_INT_ASM+0x18>
     668:	e5910000 	ldr	r0, [r1]
     66c:	e12fff1e 	bx	lr

00000670 <PB_edgecap_is_pressed_ASM>:
     670:	e59f1048 	ldr	r1, [pc, #72]	; 6c0 <disable_PB_INT_ASM+0x18>
     674:	e5912000 	ldr	r2, [r1]
     678:	e0000002 	and	r0, r0, r2
     67c:	e3300000 	teq	r0, #0
     680:	13a00001 	movne	r0, #1
     684:	e12fff1e 	bx	lr

00000688 <PB_clear_edgecp_ASM>:
     688:	e59f1030 	ldr	r1, [pc, #48]	; 6c0 <disable_PB_INT_ASM+0x18>
     68c:	e5810000 	str	r0, [r1]
     690:	e12fff1e 	bx	lr

00000694 <enable_PB_INT_ASM>:
     694:	e59f1028 	ldr	r1, [pc, #40]	; 6c4 <disable_PB_INT_ASM+0x1c>
     698:	e5912000 	ldr	r2, [r1]
     69c:	e1800002 	orr	r0, r0, r2
     6a0:	e5810000 	str	r0, [r1]
     6a4:	e12fff1e 	bx	lr

000006a8 <disable_PB_INT_ASM>:
     6a8:	e59f1014 	ldr	r1, [pc, #20]	; 6c4 <disable_PB_INT_ASM+0x1c>
     6ac:	e5912000 	ldr	r2, [r1]
     6b0:	e1c00002 	bic	r0, r0, r2
     6b4:	e5810000 	str	r0, [r1]
     6b8:	e12fff1e 	bx	lr
     6bc:	ff200050 	.word	0xff200050
     6c0:	ff20005c 	.word	0xff20005c
     6c4:	ff200058 	.word	0xff200058

000006c8 <read_slider_switches_ASM>:
     6c8:	e59f1004 	ldr	r1, [pc, #4]	; 6d4 <read_slider_switches_ASM+0xc>
     6cc:	e5910000 	ldr	r0, [r1]
     6d0:	e12fff1e 	bx	lr
     6d4:	ff200040 	.word	0xff200040

000006d8 <VGA_clear_charbuff_ASM>:
     6d8:	e92d0030 	push	{r4, r5}
     6dc:	e3a02000 	mov	r2, #0
     6e0:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     6e4:	e3a00000 	mov	r0, #0

000006e8 <CHAR_LOOPX>:
     6e8:	e3a01000 	mov	r1, #0
     6ec:	e0834000 	add	r4, r3, r0

000006f0 <CHAR_LOOPY>:
     6f0:	e0845381 	add	r5, r4, r1, lsl #7
     6f4:	e5c52000 	strb	r2, [r5]
     6f8:	e2811001 	add	r1, r1, #1
     6fc:	e351003c 	cmp	r1, #60	; 0x3c
     700:	bafffffa 	blt	6f0 <CHAR_LOOPY>
     704:	e2800001 	add	r0, r0, #1
     708:	e3500050 	cmp	r0, #80	; 0x50
     70c:	bafffff5 	blt	6e8 <CHAR_LOOPX>
     710:	e8bd0030 	pop	{r4, r5}
     714:	e12fff1e 	bx	lr

00000718 <VGA_clear_pixelbuff_ASM>:
     718:	e92d0030 	push	{r4, r5}
     71c:	e3a02000 	mov	r2, #0
     720:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     724:	e3a00000 	mov	r0, #0

00000728 <PIXEL_LOOPX>:
     728:	e3a01000 	mov	r1, #0
     72c:	e0834080 	add	r4, r3, r0, lsl #1

00000730 <PIXEL_LOOPY>:
     730:	e0845501 	add	r5, r4, r1, lsl #10
     734:	e1c520b0 	strh	r2, [r5]
     738:	e2811001 	add	r1, r1, #1
     73c:	e35100f0 	cmp	r1, #240	; 0xf0
     740:	bafffffa 	blt	730 <PIXEL_LOOPY>
     744:	e2800001 	add	r0, r0, #1
     748:	e3500d05 	cmp	r0, #320	; 0x140
     74c:	bafffff5 	blt	728 <PIXEL_LOOPX>
     750:	e8bd0030 	pop	{r4, r5}
     754:	e12fff1e 	bx	lr

00000758 <VGA_write_char_ASM>:
     758:	e3500000 	cmp	r0, #0
     75c:	b12fff1e 	bxlt	lr
     760:	e3510000 	cmp	r1, #0
     764:	b12fff1e 	bxlt	lr
     768:	e350004f 	cmp	r0, #79	; 0x4f
     76c:	c12fff1e 	bxgt	lr
     770:	e351003b 	cmp	r1, #59	; 0x3b
     774:	c12fff1e 	bxgt	lr
     778:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     77c:	e0833000 	add	r3, r3, r0
     780:	e0833381 	add	r3, r3, r1, lsl #7
     784:	e5c32000 	strb	r2, [r3]
     788:	e12fff1e 	bx	lr

0000078c <VGA_write_byte_ASM>:
     78c:	e3500000 	cmp	r0, #0
     790:	b12fff1e 	bxlt	lr
     794:	e3510000 	cmp	r1, #0
     798:	b12fff1e 	bxlt	lr
     79c:	e350004e 	cmp	r0, #78	; 0x4e
     7a0:	c12fff1e 	bxgt	lr
     7a4:	e351003b 	cmp	r1, #59	; 0x3b
     7a8:	c12fff1e 	bxgt	lr
     7ac:	e92d0030 	push	{r4, r5}
     7b0:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     7b4:	e20250f0 	and	r5, r2, #240	; 0xf0
     7b8:	e1a05225 	lsr	r5, r5, #4
     7bc:	e202400f 	and	r4, r2, #15
     7c0:	e59f2068 	ldr	r2, [pc, #104]	; 830 <HEX_ASCII+0x10>
     7c4:	e7d25005 	ldrb	r5, [r2, r5]
     7c8:	e7d24004 	ldrb	r4, [r2, r4]
     7cc:	e0833000 	add	r3, r3, r0
     7d0:	e0833381 	add	r3, r3, r1, lsl #7
     7d4:	e5c35000 	strb	r5, [r3]
     7d8:	e2833001 	add	r3, r3, #1
     7dc:	e5c34000 	strb	r4, [r3]
     7e0:	e8bd0030 	pop	{r4, r5}
     7e4:	e12fff1e 	bx	lr

000007e8 <VGA_draw_point_ASM>:
     7e8:	e59f3044 	ldr	r3, [pc, #68]	; 834 <HEX_ASCII+0x14>
     7ec:	e3500000 	cmp	r0, #0
     7f0:	b12fff1e 	bxlt	lr
     7f4:	e3510000 	cmp	r1, #0
     7f8:	b12fff1e 	bxlt	lr
     7fc:	e1500003 	cmp	r0, r3
     800:	c12fff1e 	bxgt	lr
     804:	e35100ef 	cmp	r1, #239	; 0xef
     808:	c12fff1e 	bxgt	lr
     80c:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     810:	e0833080 	add	r3, r3, r0, lsl #1
     814:	e0833501 	add	r3, r3, r1, lsl #10
     818:	e1c320b0 	strh	r2, [r3]
     81c:	e12fff1e 	bx	lr

00000820 <HEX_ASCII>:
     820:	33323130 	.word	0x33323130
     824:	37363534 	.word	0x37363534
     828:	42413938 	.word	0x42413938
     82c:	46454443 	.word	0x46454443
     830:	00000820 	.word	0x00000820
     834:	0000013f 	.word	0x0000013f

00000838 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     838:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     83c:	e28db000 	add	r11, sp, #0
     840:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     844:	e3a030d3 	mov	r3, #211	; 0xd3
     848:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     84c:	e51b3008 	ldr	r3, [r11, #-8]
     850:	e129f003 	msr	CPSR_fc, r3
}
     854:	e28bd000 	add	sp, r11, #0
     858:	e8bd0800 	ldmfd	sp!, {r11}
     85c:	e12fff1e 	bx	lr

00000860 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     860:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     864:	e28db000 	add	r11, sp, #0
     868:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     86c:	e3a03053 	mov	r3, #83	; 0x53
     870:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     874:	e51b3008 	ldr	r3, [r11, #-8]
     878:	e129f003 	msr	CPSR_fc, r3
}
     87c:	e28bd000 	add	sp, r11, #0
     880:	e8bd0800 	ldmfd	sp!, {r11}
     884:	e12fff1e 	bx	lr

00000888 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     888:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     88c:	e28db000 	add	r11, sp, #0
     890:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     894:	e3e03007 	mvn	r3, #7
     898:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     89c:	e3a030d2 	mov	r3, #210	; 0xd2
     8a0:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     8a4:	e51b300c 	ldr	r3, [r11, #-12]
     8a8:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     8ac:	e51b3008 	ldr	r3, [r11, #-8]
     8b0:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     8b4:	e3a030d3 	mov	r3, #211	; 0xd3
     8b8:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     8bc:	e51b300c 	ldr	r3, [r11, #-12]
     8c0:	e129f003 	msr	CPSR_fc, r3
}
     8c4:	e28bd000 	add	sp, r11, #0
     8c8:	e8bd0800 	ldmfd	sp!, {r11}
     8cc:	e12fff1e 	bx	lr

000008d0 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     8d0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     8d4:	e28db000 	add	r11, sp, #0
     8d8:	e24dd01c 	sub	sp, sp, #28
     8dc:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     8e0:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     8e4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     8e8:	e1a031c3 	asr	r3, r3, #3
     8ec:	e3c33003 	bic	r3, r3, #3
     8f0:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     8f4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     8f8:	e203301f 	and	r3, r3, #31
     8fc:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     900:	e3a02001 	mov	r2, #1
     904:	e51b300c 	ldr	r3, [r11, #-12]
     908:	e1a03312 	lsl	r3, r2, r3
     90c:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     910:	e51b3008 	ldr	r3, [r11, #-8]
     914:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     918:	e2433c03 	sub	r3, r3, #768	; 0x300
     91c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     920:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     924:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     928:	e5921000 	ldr	r1, [r2]
     92c:	e51b2010 	ldr	r2, [r11, #-16]
     930:	e1812002 	orr	r2, r1, r2
     934:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     938:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     93c:	e3c33003 	bic	r3, r3, #3
     940:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     944:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     948:	e2033003 	and	r3, r3, #3
     94c:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     950:	e51b2008 	ldr	r2, [r11, #-8]
     954:	e51b300c 	ldr	r3, [r11, #-12]
     958:	e0823003 	add	r3, r2, r3
     95c:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     960:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     964:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     968:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     96c:	e6ef2072 	uxtb	r2, r2
     970:	e5c32000 	strb	r2, [r3]
}
     974:	e28bd000 	add	sp, r11, #0
     978:	e8bd0800 	ldmfd	sp!, {r11}
     97c:	e12fff1e 	bx	lr

00000980 <config_GIC>:

void config_GIC(int len, int* IDs) {
     980:	e92d4800 	push	{r11, lr}
     984:	e28db004 	add	r11, sp, #4
     988:	e24dd010 	sub	sp, sp, #16
     98c:	e50b0010 	str	r0, [r11, #-16]
     990:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     994:	e3a03000 	mov	r3, #0
     998:	e50b3008 	str	r3, [r11, #-8]
     99c:	ea00000a 	b	9cc <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     9a0:	e51b3008 	ldr	r3, [r11, #-8]
     9a4:	e1a03103 	lsl	r3, r3, #2
     9a8:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     9ac:	e0823003 	add	r3, r2, r3
     9b0:	e5933000 	ldr	r3, [r3]
     9b4:	e1a00003 	mov	r0, r3
     9b8:	e3a01001 	mov	r1, #1
     9bc:	ebffffc3 	bl	8d0 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     9c0:	e51b3008 	ldr	r3, [r11, #-8]
     9c4:	e2833001 	add	r3, r3, #1
     9c8:	e50b3008 	str	r3, [r11, #-8]
     9cc:	e51b2008 	ldr	r2, [r11, #-8]
     9d0:	e51b3010 	ldr	r3, [r11, #-16]
     9d4:	e1520003 	cmp	r2, r3
     9d8:	bafffff0 	blt	9a0 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     9dc:	e30c3104 	movw	r3, #49412	; 0xc104
     9e0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     9e4:	e30f2fff 	movw	r2, #65535	; 0xffff
     9e8:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     9ec:	e3a03cc1 	mov	r3, #49408	; 0xc100
     9f0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     9f4:	e3a02001 	mov	r2, #1
     9f8:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     9fc:	e3a03a0d 	mov	r3, #53248	; 0xd000
     a00:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a04:	e3a02001 	mov	r2, #1
     a08:	e5832000 	str	r2, [r3]
}
     a0c:	e24bd004 	sub	sp, r11, #4
     a10:	e8bd8800 	pop	{r11, pc}

00000a14 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     a14:	e24ee004 	sub	lr, lr, #4
     a18:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     a1c:	e28db018 	add	r11, sp, #24
     a20:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     a24:	e30c310c 	movw	r3, #49420	; 0xc10c
     a28:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     a2c:	e5933000 	ldr	r3, [r3]
     a30:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     a34:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     a38:	e3530053 	cmp	r3, #83	; 0x53
     a3c:	0a00003d 	beq	b38 <__cs3_isr_irq+0x124>
     a40:	e3530053 	cmp	r3, #83	; 0x53
     a44:	ca000011 	bgt	a90 <__cs3_isr_irq+0x7c>
     a48:	e353004e 	cmp	r3, #78	; 0x4e
     a4c:	0a000031 	beq	b18 <__cs3_isr_irq+0x104>
     a50:	e353004e 	cmp	r3, #78	; 0x4e
     a54:	ca000006 	bgt	a74 <__cs3_isr_irq+0x60>
     a58:	e3530048 	cmp	r3, #72	; 0x48
     a5c:	0a000029 	beq	b08 <__cs3_isr_irq+0xf4>
     a60:	e3530049 	cmp	r3, #73	; 0x49
     a64:	0a000029 	beq	b10 <__cs3_isr_irq+0xfc>
     a68:	e353001d 	cmp	r3, #29
     a6c:	0a000019 	beq	ad8 <__cs3_isr_irq+0xc4>
     a70:	ea000036 	b	b50 <__cs3_isr_irq+0x13c>
     a74:	e3530050 	cmp	r3, #80	; 0x50
     a78:	0a00002a 	beq	b28 <__cs3_isr_irq+0x114>
     a7c:	e3530050 	cmp	r3, #80	; 0x50
     a80:	ba000026 	blt	b20 <__cs3_isr_irq+0x10c>
     a84:	e3530051 	cmp	r3, #81	; 0x51
     a88:	0a000028 	beq	b30 <__cs3_isr_irq+0x11c>
     a8c:	ea00002f 	b	b50 <__cs3_isr_irq+0x13c>
     a90:	e35300c7 	cmp	r3, #199	; 0xc7
     a94:	0a000013 	beq	ae8 <__cs3_isr_irq+0xd4>
     a98:	e35300c7 	cmp	r3, #199	; 0xc7
     a9c:	ca000006 	bgt	abc <__cs3_isr_irq+0xa8>
     aa0:	e3530059 	cmp	r3, #89	; 0x59
     aa4:	0a000027 	beq	b48 <__cs3_isr_irq+0x134>
     aa8:	e35300c5 	cmp	r3, #197	; 0xc5
     aac:	0a00000b 	beq	ae0 <__cs3_isr_irq+0xcc>
     ab0:	e3530054 	cmp	r3, #84	; 0x54
     ab4:	0a000021 	beq	b40 <__cs3_isr_irq+0x12c>
     ab8:	ea000024 	b	b50 <__cs3_isr_irq+0x13c>
     abc:	e35300c9 	cmp	r3, #201	; 0xc9
     ac0:	0a00000c 	beq	af8 <__cs3_isr_irq+0xe4>
     ac4:	e35300c9 	cmp	r3, #201	; 0xc9
     ac8:	ba000008 	blt	af0 <__cs3_isr_irq+0xdc>
     acc:	e35300ca 	cmp	r3, #202	; 0xca
     ad0:	0a00000a 	beq	b00 <__cs3_isr_irq+0xec>
     ad4:	ea00001d 	b	b50 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     ad8:	ebfffe6b 	bl	48c <A9_PRIV_TIM_ISR>
     adc:	ea00001c 	b	b54 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     ae0:	ebfffe6a 	bl	490 <HPS_GPIO1_ISR>
     ae4:	ea00001a 	b	b54 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     ae8:	ebfffe69 	bl	494 <HPS_TIM0_ISR>
     aec:	ea000018 	b	b54 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     af0:	ebfffe68 	bl	498 <HPS_TIM1_ISR>
     af4:	ea000016 	b	b54 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     af8:	ebfffe67 	bl	49c <HPS_TIM2_ISR>
     afc:	ea000014 	b	b54 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     b00:	ebfffe66 	bl	4a0 <HPS_TIM3_ISR>
     b04:	ea000012 	b	b54 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     b08:	ebfffe65 	bl	4a4 <FPGA_INTERVAL_TIM_ISR>
     b0c:	ea000010 	b	b54 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     b10:	ebfffe64 	bl	4a8 <FPGA_PB_KEYS_ISR>
     b14:	ea00000e 	b	b54 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     b18:	ebfffe63 	bl	4ac <FPGA_Audio_ISR>
     b1c:	ea00000c 	b	b54 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     b20:	ebfffe62 	bl	4b0 <FPGA_PS2_ISR>
     b24:	ea00000a 	b	b54 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     b28:	ebfffe61 	bl	4b4 <FPGA_JTAG_ISR>
     b2c:	ea000008 	b	b54 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     b30:	ebfffe60 	bl	4b8 <FPGA_IrDA_ISR>
     b34:	ea000006 	b	b54 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     b38:	ebfffe5f 	bl	4bc <FPGA_JP1_ISR>
     b3c:	ea000004 	b	b54 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     b40:	ebfffe5e 	bl	4c0 <FPGA_JP2_ISR>
     b44:	ea000002 	b	b54 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     b48:	ebfffe5d 	bl	4c4 <FPGA_PS2_DUAL_ISR>
     b4c:	ea000000 	b	b54 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     b50:	eafffffe 	b	b50 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     b54:	e30c3110 	movw	r3, #49424	; 0xc110
     b58:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     b5c:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     b60:	e5832000 	str	r2, [r3]
}
     b64:	e24bd018 	sub	sp, r11, #24
     b68:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000b6c <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     b6c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b70:	e28db000 	add	r11, sp, #0
	while(1);
     b74:	eafffffe 	b	b74 <__cs3_reset+0x8>

00000b78 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     b78:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b7c:	e28db000 	add	r11, sp, #0
	while(1);
     b80:	eafffffe 	b	b80 <__cs3_isr_undef+0x8>

00000b84 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     b84:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b88:	e28db000 	add	r11, sp, #0
	while(1);
     b8c:	eafffffe 	b	b8c <__cs3_isr_swi+0x8>

00000b90 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     b90:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     b94:	e28db000 	add	r11, sp, #0
	while(1);
     b98:	eafffffe 	b	b98 <__cs3_isr_pabort+0x8>

00000b9c <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     b9c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     ba0:	e28db000 	add	r11, sp, #0
	while(1);
     ba4:	eafffffe 	b	ba4 <__cs3_isr_dabort+0x8>

00000ba8 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     ba8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bac:	e28db000 	add	r11, sp, #0
	while(1);
     bb0:	eafffffe 	b	bb0 <__cs3_isr_fiq+0x8>

00000bb4 <fix_bug>:
}

void fix_bug() {
     bb4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     bb8:	e28db000 	add	r11, sp, #0
     bbc:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     bc0:	e30d3198 	movw	r3, #53656	; 0xd198
     bc4:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     bc8:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     bcc:	e51b3008 	ldr	r3, [r11, #-8]
     bd0:	e3a02703 	mov	r2, #786432	; 0xc0000
     bd4:	e5832000 	str	r2, [r3]
}
     bd8:	e28bd000 	add	sp, r11, #0
     bdc:	e8bd0800 	ldmfd	sp!, {r11}
     be0:	e12fff1e 	bx	lr

00000be4 <int_setup>:

void int_setup(int len, int* IDs) {
     be4:	e92d4800 	push	{r11, lr}
     be8:	e28db004 	add	r11, sp, #4
     bec:	e24dd008 	sub	sp, sp, #8
     bf0:	e50b0008 	str	r0, [r11, #-8]
     bf4:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     bf8:	ebffff0e 	bl	838 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     bfc:	ebffff21 	bl	888 <set_A9_IRQ_stack>
	fix_bug();
     c00:	ebffffeb 	bl	bb4 <fix_bug>
	config_GIC(len, IDs);
     c04:	e51b0008 	ldr	r0, [r11, #-8]
     c08:	e51b100c 	ldr	r1, [r11, #-12]
     c0c:	ebffff5b 	bl	980 <config_GIC>
	enable_A9_interrupts();
     c10:	ebffff12 	bl	860 <enable_A9_interrupts>
}
     c14:	e24bd004 	sub	sp, r11, #4
     c18:	e8bd8800 	pop	{r11, pc}

00000c1c <audio_write_ASM>:
	.equ right_fifo, 0xFF20304C
	.equ fifospace, 0xFF203044
	.global audio_write_ASM

audio_write_ASM:
			PUSH {R1-R5}
     c1c:	e92d003e 	push	{r1, r2, r3, r4, r5}
			LDR R1, =left_fifo 	// Loads the address of the data register for the left fifo
     c20:	e59f1040 	ldr	r1, [pc, #64]	; c68 <audio_write_ASM+0x4c>
			LDR R2, =right_fifo // Loads the address of the data register for the right fifo
     c24:	e59f2040 	ldr	r2, [pc, #64]	; c6c <audio_write_ASM+0x50>
			LDR R3, =fifospace 	// Loads the address of the data register for the fifospace
     c28:	e59f3040 	ldr	r3, [pc, #64]	; c70 <audio_write_ASM+0x54>

			LDRB R4, [R3, #2] 	// Loads the value of WSRC onto R4
     c2c:	e5d34002 	ldrb	r4, [r3, #2]
			CMP R4, #0
     c30:	e3540000 	cmp	r4, #0
			MOVEQ R0, #0 		// If it's 0, the subroutine returns 0 because the FIFO is full
     c34:	03a00000 	moveq	r0, #0
			POPEQ {R1-R5}
     c38:	08bd003e 	popeq	{r1, r2, r3, r4, r5}
			BXEQ LR
     c3c:	012fff1e 	bxeq	lr
			LDRB R5, [R3, #3] 	// Loads the value of WSLC onto R5
     c40:	e5d35003 	ldrb	r5, [r3, #3]
			CMP R5, #0
     c44:	e3550000 	cmp	r5, #0
			MOVEQ R0, #0		// If it's 0, the subroutine returns 0 because the FIFO is full
     c48:	03a00000 	moveq	r0, #0
			POPEQ {R1-R5}
     c4c:	08bd003e 	popeq	{r1, r2, r3, r4, r5}
			BXEQ LR
     c50:	012fff1e 	bxeq	lr

			STR R0, [R1] 		// If the FIFOs are not full, the data is stored in them
     c54:	e5810000 	str	r0, [r1]
			STR R0, [R2]
     c58:	e5820000 	str	r0, [r2]
			MOV R0, #1 			// and subroutine returns 1
     c5c:	e3a00001 	mov	r0, #1
			POP {R1-R5}
     c60:	e8bd003e 	pop	{r1, r2, r3, r4, r5}
			BX LR
     c64:	e12fff1e 	bx	lr
	.equ fifospace, 0xFF203044
	.global audio_write_ASM

audio_write_ASM:
			PUSH {R1-R5}
			LDR R1, =left_fifo 	// Loads the address of the data register for the left fifo
     c68:	ff203048 	.word	0xff203048
			LDR R2, =right_fifo // Loads the address of the data register for the right fifo
     c6c:	ff20304c 	.word	0xff20304c
			LDR R3, =fifospace 	// Loads the address of the data register for the fifospace
     c70:	ff203044 	.word	0xff203044

00000c74 <audio_read_data_ASM>:
     c74:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     c78:	e92d0003 	push	{r0, r1}
     c7c:	eb000093 	bl	ed0 <audio_read_ralc_ASM>
     c80:	e3500000 	cmp	r0, #0
     c84:	08bd0003 	popeq	{r0, r1}
     c88:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     c8c:	03a00000 	moveq	r0, #0
     c90:	012fff1e 	bxeq	lr
     c94:	eb000092 	bl	ee4 <audio_read_rarc_ASM>
     c98:	e3500000 	cmp	r0, #0
     c9c:	08bd0003 	popeq	{r0, r1}
     ca0:	03a00000 	moveq	r0, #0
     ca4:	012fff1e 	bxeq	lr
     ca8:	e8bd0003 	pop	{r0, r1}
     cac:	e59f2240 	ldr	r2, [pc, #576]	; ef4 <audio_read_rarc_ASM+0x10>
     cb0:	e5922000 	ldr	r2, [r2]
     cb4:	e5802000 	str	r2, [r0]
     cb8:	e59f3238 	ldr	r3, [pc, #568]	; ef8 <audio_read_rarc_ASM+0x14>
     cbc:	e5933000 	ldr	r3, [r3]
     cc0:	e5813000 	str	r3, [r1]
     cc4:	e3a00001 	mov	r0, #1

00000cc8 <audio_read_leftdata_ASM>:
     cc8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ccc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     cd0:	eb00007e 	bl	ed0 <audio_read_ralc_ASM>
     cd4:	e3500000 	cmp	r0, #0
     cd8:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     cdc:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     ce0:	03a00000 	moveq	r0, #0
     ce4:	012fff1e 	bxeq	lr
     ce8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     cec:	e59f2200 	ldr	r2, [pc, #512]	; ef4 <audio_read_rarc_ASM+0x10>
     cf0:	e5922000 	ldr	r2, [r2]
     cf4:	e5802000 	str	r2, [r0]
     cf8:	e3a00001 	mov	r0, #1
     cfc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d00:	e12fff1e 	bx	lr

00000d04 <audio_read_rightdata_ASM>:
     d04:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d08:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     d0c:	eb000074 	bl	ee4 <audio_read_rarc_ASM>
     d10:	e3500000 	cmp	r0, #0
     d14:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     d18:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d1c:	03a00000 	moveq	r0, #0
     d20:	012fff1e 	bxeq	lr
     d24:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     d28:	e59f21c8 	ldr	r2, [pc, #456]	; ef8 <audio_read_rarc_ASM+0x14>
     d2c:	e5922000 	ldr	r2, [r2]
     d30:	e5802000 	str	r2, [r0]
     d34:	e3a00001 	mov	r0, #1
     d38:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d3c:	e12fff1e 	bx	lr

00000d40 <audio_write_data_ASM>:
     d40:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d44:	e92d0003 	push	{r0, r1}
     d48:	eb000056 	bl	ea8 <audio_read_wslc_ASM>
     d4c:	e3500000 	cmp	r0, #0
     d50:	08bd0003 	popeq	{r0, r1}
     d54:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d58:	03a00000 	moveq	r0, #0
     d5c:	012fff1e 	bxeq	lr
     d60:	eb000055 	bl	ebc <audio_read_wsrc_ASM>
     d64:	e3500000 	cmp	r0, #0
     d68:	08bd0003 	popeq	{r0, r1}
     d6c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     d70:	03a00000 	moveq	r0, #0
     d74:	012fff1e 	bxeq	lr
     d78:	e8bd0003 	pop	{r0, r1}
     d7c:	e59f2170 	ldr	r2, [pc, #368]	; ef4 <audio_read_rarc_ASM+0x10>
     d80:	e5820000 	str	r0, [r2]
     d84:	e59f316c 	ldr	r3, [pc, #364]	; ef8 <audio_read_rarc_ASM+0x14>
     d88:	e5831000 	str	r1, [r3]
     d8c:	e3a00001 	mov	r0, #1
     d90:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     d94:	e12fff1e 	bx	lr

00000d98 <audio_write_leftdata_ASM>:
     d98:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     d9c:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     da0:	eb000040 	bl	ea8 <audio_read_wslc_ASM>
     da4:	e3500000 	cmp	r0, #0
     da8:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     dac:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     db0:	03a00000 	moveq	r0, #0
     db4:	012fff1e 	bxeq	lr
     db8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     dbc:	e59f2130 	ldr	r2, [pc, #304]	; ef4 <audio_read_rarc_ASM+0x10>
     dc0:	e5820000 	str	r0, [r2]
     dc4:	e3a00001 	mov	r0, #1
     dc8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     dcc:	e12fff1e 	bx	lr

00000dd0 <audio_write_rightdata_ASM>:
     dd0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     dd4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     dd8:	eb000037 	bl	ebc <audio_read_wsrc_ASM>
     ddc:	e3500000 	cmp	r0, #0
     de0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     de4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     de8:	03a00000 	moveq	r0, #0
     dec:	012fff1e 	bxeq	lr
     df0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     df4:	e59f20fc 	ldr	r2, [pc, #252]	; ef8 <audio_read_rarc_ASM+0x14>
     df8:	e5820000 	str	r0, [r2]
     dfc:	e3a00001 	mov	r0, #1
     e00:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     e04:	e12fff1e 	bx	lr

00000e08 <audio_enable_read_fifo_clear_ASM>:
     e08:	e59f00ec 	ldr	r0, [pc, #236]	; efc <audio_read_rarc_ASM+0x18>
     e0c:	e5901000 	ldr	r1, [r0]
     e10:	e3811004 	orr	r1, r1, #4
     e14:	e5801000 	str	r1, [r0]
     e18:	e12fff1e 	bx	lr

00000e1c <audio_enable_write_fifo_clear_ASM>:
     e1c:	e59f00d8 	ldr	r0, [pc, #216]	; efc <audio_read_rarc_ASM+0x18>
     e20:	e5901000 	ldr	r1, [r0]
     e24:	e3811008 	orr	r1, r1, #8
     e28:	e5801000 	str	r1, [r0]
     e2c:	e12fff1e 	bx	lr

00000e30 <audio_disable_read_fifo_clear_ASM>:
     e30:	e59f00c4 	ldr	r0, [pc, #196]	; efc <audio_read_rarc_ASM+0x18>
     e34:	e5901000 	ldr	r1, [r0]
     e38:	e3c11004 	bic	r1, r1, #4
     e3c:	e5801000 	str	r1, [r0]
     e40:	e12fff1e 	bx	lr

00000e44 <audio_disable_write_fifo_clear_ASM>:
     e44:	e59f00b0 	ldr	r0, [pc, #176]	; efc <audio_read_rarc_ASM+0x18>
     e48:	e5901000 	ldr	r1, [r0]
     e4c:	e3c11008 	bic	r1, r1, #8
     e50:	e5801000 	str	r1, [r0]
     e54:	e12fff1e 	bx	lr

00000e58 <audio_enable_read_int_ASM>:
     e58:	e59f009c 	ldr	r0, [pc, #156]	; efc <audio_read_rarc_ASM+0x18>
     e5c:	e5901000 	ldr	r1, [r0]
     e60:	e3811001 	orr	r1, r1, #1
     e64:	e5801000 	str	r1, [r0]
     e68:	e12fff1e 	bx	lr

00000e6c <audio_enable_write_int_ASM>:
     e6c:	e59f0088 	ldr	r0, [pc, #136]	; efc <audio_read_rarc_ASM+0x18>
     e70:	e5901000 	ldr	r1, [r0]
     e74:	e3811002 	orr	r1, r1, #2
     e78:	e5801000 	str	r1, [r0]
     e7c:	e12fff1e 	bx	lr

00000e80 <audio_disable_read_int_ASM>:
     e80:	e59f0074 	ldr	r0, [pc, #116]	; efc <audio_read_rarc_ASM+0x18>
     e84:	e5901000 	ldr	r1, [r0]
     e88:	e3c11001 	bic	r1, r1, #1
     e8c:	e5801000 	str	r1, [r0]
     e90:	e12fff1e 	bx	lr

00000e94 <audio_disable_write_int_ASM>:
     e94:	e59f0060 	ldr	r0, [pc, #96]	; efc <audio_read_rarc_ASM+0x18>
     e98:	e5901000 	ldr	r1, [r0]
     e9c:	e3c11002 	bic	r1, r1, #2
     ea0:	e5801000 	str	r1, [r0]
     ea4:	e12fff1e 	bx	lr

00000ea8 <audio_read_wslc_ASM>:
     ea8:	e59f0050 	ldr	r0, [pc, #80]	; f00 <audio_read_rarc_ASM+0x1c>
     eac:	e5900000 	ldr	r0, [r0]
     eb0:	e1a00c20 	lsr	r0, r0, #24
     eb4:	e20000ff 	and	r0, r0, #255	; 0xff
     eb8:	e12fff1e 	bx	lr

00000ebc <audio_read_wsrc_ASM>:
     ebc:	e59f003c 	ldr	r0, [pc, #60]	; f00 <audio_read_rarc_ASM+0x1c>
     ec0:	e5900000 	ldr	r0, [r0]
     ec4:	e1a00820 	lsr	r0, r0, #16
     ec8:	e20000ff 	and	r0, r0, #255	; 0xff
     ecc:	e12fff1e 	bx	lr

00000ed0 <audio_read_ralc_ASM>:
     ed0:	e59f0028 	ldr	r0, [pc, #40]	; f00 <audio_read_rarc_ASM+0x1c>
     ed4:	e5900000 	ldr	r0, [r0]
     ed8:	e1a00420 	lsr	r0, r0, #8
     edc:	e20000ff 	and	r0, r0, #255	; 0xff
     ee0:	e12fff1e 	bx	lr

00000ee4 <audio_read_rarc_ASM>:
     ee4:	e59f0014 	ldr	r0, [pc, #20]	; f00 <audio_read_rarc_ASM+0x1c>
     ee8:	e5900000 	ldr	r0, [r0]
     eec:	e20000ff 	and	r0, r0, #255	; 0xff
     ef0:	e12fff1e 	bx	lr
     ef4:	ff203048 	.word	0xff203048
     ef8:	ff20304c 	.word	0xff20304c
     efc:	ff203040 	.word	0xff203040
     f00:	ff203044 	.word	0xff203044

00000f04 <atexit>:
     f04:	e1a01000 	mov	r1, r0
     f08:	e3a00000 	mov	r0, #0
     f0c:	e92d4008 	push	{r3, lr}
     f10:	e1a02000 	mov	r2, r0
     f14:	e1a03000 	mov	r3, r0
     f18:	eb00000e 	bl	f58 <__register_exitproc>
     f1c:	e8bd4008 	pop	{r3, lr}
     f20:	e12fff1e 	bx	lr

00000f24 <exit>:
     f24:	e92d4008 	push	{r3, lr}
     f28:	e3a01000 	mov	r1, #0
     f2c:	e1a04000 	mov	r4, r0
     f30:	eb000045 	bl	104c <__call_exitprocs>
     f34:	e59f3018 	ldr	r3, [pc, #24]	; f54 <exit+0x30>
     f38:	e5930000 	ldr	r0, [r3]
     f3c:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     f40:	e3530000 	cmp	r3, #0
     f44:	11a0e00f 	movne	lr, pc
     f48:	112fff13 	bxne	r3
     f4c:	e1a00004 	mov	r0, r4
     f50:	eb0000c9 	bl	127c <_exit>
     f54:	00001324 	.word	0x00001324

00000f58 <__register_exitproc>:
     f58:	e59fc0e4 	ldr	r12, [pc, #228]	; 1044 <__register_exitproc+0xec>
     f5c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     f60:	e59c4000 	ldr	r4, [r12]
     f64:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     f68:	e35c0000 	cmp	r12, #0
     f6c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     f70:	e59c5004 	ldr	r5, [r12, #4]
     f74:	0584c148 	streq	r12, [r4, #328]	; 0x148
     f78:	e355001f 	cmp	r5, #31
     f7c:	e24dd010 	sub	sp, sp, #16
     f80:	e1a06000 	mov	r6, r0
     f84:	da000015 	ble	fe0 <__register_exitproc+0x88>
     f88:	e59f00b8 	ldr	r0, [pc, #184]	; 1048 <__register_exitproc+0xf0>
     f8c:	e3500000 	cmp	r0, #0
     f90:	1a000001 	bne	f9c <__register_exitproc+0x44>
     f94:	e3e00000 	mvn	r0, #0
     f98:	ea000018 	b	1000 <__register_exitproc+0xa8>
     f9c:	e3a00e19 	mov	r0, #400	; 0x190
     fa0:	e58d100c 	str	r1, [sp, #12]
     fa4:	e58d2008 	str	r2, [sp, #8]
     fa8:	e58d3004 	str	r3, [sp, #4]
     fac:	e320f000 	nop	{0}
     fb0:	e250c000 	subs	r12, r0, #0
     fb4:	e59d100c 	ldr	r1, [sp, #12]
     fb8:	e59d2008 	ldr	r2, [sp, #8]
     fbc:	e59d3004 	ldr	r3, [sp, #4]
     fc0:	0afffff3 	beq	f94 <__register_exitproc+0x3c>
     fc4:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     fc8:	e3a00000 	mov	r0, #0
     fcc:	e58c0004 	str	r0, [r12, #4]
     fd0:	e58c5000 	str	r5, [r12]
     fd4:	e584c148 	str	r12, [r4, #328]	; 0x148
     fd8:	e58c0188 	str	r0, [r12, #392]	; 0x188
     fdc:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     fe0:	e3560000 	cmp	r6, #0
     fe4:	e59c4004 	ldr	r4, [r12, #4]
     fe8:	1a000007 	bne	100c <__register_exitproc+0xb4>
     fec:	e2843002 	add	r3, r4, #2
     ff0:	e2844001 	add	r4, r4, #1
     ff4:	e78c1103 	str	r1, [r12, r3, lsl #2]
     ff8:	e58c4004 	str	r4, [r12, #4]
     ffc:	e3a00000 	mov	r0, #0
    1000:	e28dd010 	add	sp, sp, #16
    1004:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1008:	e12fff1e 	bx	lr
    100c:	e3a00001 	mov	r0, #1
    1010:	e1a00410 	lsl	r0, r0, r4
    1014:	e08c8104 	add	r8, r12, r4, lsl #2
    1018:	e3560002 	cmp	r6, #2
    101c:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    1020:	e5883108 	str	r3, [r8, #264]	; 0x108
    1024:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1028:	e1877000 	orr	r7, r7, r0
    102c:	01830000 	orreq	r0, r3, r0
    1030:	e1a05008 	mov	r5, r8
    1034:	e5882088 	str	r2, [r8, #136]	; 0x88
    1038:	e58c7188 	str	r7, [r12, #392]	; 0x188
    103c:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    1040:	eaffffe9 	b	fec <__register_exitproc+0x94>
    1044:	00001324 	.word	0x00001324
    1048:	00000000 	.word	0x00000000

0000104c <__call_exitprocs>:
    104c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1050:	e59f3168 	ldr	r3, [pc, #360]	; 11c0 <__call_exitprocs+0x174>
    1054:	e5933000 	ldr	r3, [r3]
    1058:	e24dd014 	sub	sp, sp, #20
    105c:	e58d3004 	str	r3, [sp, #4]
    1060:	e2833f52 	add	r3, r3, #328	; 0x148
    1064:	e58d0008 	str	r0, [sp, #8]
    1068:	e58d300c 	str	r3, [sp, #12]
    106c:	e1a07001 	mov	r7, r1
    1070:	e3a08001 	mov	r8, #1
    1074:	e59d3004 	ldr	r3, [sp, #4]
    1078:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    107c:	e3560000 	cmp	r6, #0
    1080:	e59db00c 	ldr	r11, [sp, #12]
    1084:	0a000033 	beq	1158 <__call_exitprocs+0x10c>
    1088:	e5965004 	ldr	r5, [r6, #4]
    108c:	e2554001 	subs	r4, r5, #1
    1090:	5286a088 	addpl	r10, r6, #136	; 0x88
    1094:	5285501f 	addpl	r5, r5, #31
    1098:	508a5105 	addpl	r5, r10, r5, lsl #2
    109c:	5a000007 	bpl	10c0 <__call_exitprocs+0x74>
    10a0:	ea000029 	b	114c <__call_exitprocs+0x100>
    10a4:	e5953000 	ldr	r3, [r5]
    10a8:	e1530007 	cmp	r3, r7
    10ac:	0a000005 	beq	10c8 <__call_exitprocs+0x7c>
    10b0:	e2444001 	sub	r4, r4, #1
    10b4:	e3740001 	cmn	r4, #1
    10b8:	e2455004 	sub	r5, r5, #4
    10bc:	0a000022 	beq	114c <__call_exitprocs+0x100>
    10c0:	e3570000 	cmp	r7, #0
    10c4:	1afffff6 	bne	10a4 <__call_exitprocs+0x58>
    10c8:	e5963004 	ldr	r3, [r6, #4]
    10cc:	e06a2005 	rsb	r2, r10, r5
    10d0:	e2433001 	sub	r3, r3, #1
    10d4:	e0862002 	add	r2, r6, r2
    10d8:	e1530004 	cmp	r3, r4
    10dc:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    10e0:	13a01000 	movne	r1, #0
    10e4:	05864004 	streq	r4, [r6, #4]
    10e8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    10ec:	e3530000 	cmp	r3, #0
    10f0:	0affffee 	beq	10b0 <__call_exitprocs+0x64>
    10f4:	e1a02418 	lsl	r2, r8, r4
    10f8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    10fc:	e1120001 	tst	r2, r1
    1100:	e5969004 	ldr	r9, [r6, #4]
    1104:	0a000016 	beq	1164 <__call_exitprocs+0x118>
    1108:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    110c:	e1120001 	tst	r2, r1
    1110:	1a000016 	bne	1170 <__call_exitprocs+0x124>
    1114:	e59d0008 	ldr	r0, [sp, #8]
    1118:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    111c:	e1a0e00f 	mov	lr, pc
    1120:	e12fff13 	bx	r3
    1124:	e5963004 	ldr	r3, [r6, #4]
    1128:	e1530009 	cmp	r3, r9
    112c:	1affffd0 	bne	1074 <__call_exitprocs+0x28>
    1130:	e59b3000 	ldr	r3, [r11]
    1134:	e1530006 	cmp	r3, r6
    1138:	1affffcd 	bne	1074 <__call_exitprocs+0x28>
    113c:	e2444001 	sub	r4, r4, #1
    1140:	e3740001 	cmn	r4, #1
    1144:	e2455004 	sub	r5, r5, #4
    1148:	1affffdc 	bne	10c0 <__call_exitprocs+0x74>
    114c:	e59f1070 	ldr	r1, [pc, #112]	; 11c4 <__call_exitprocs+0x178>
    1150:	e3510000 	cmp	r1, #0
    1154:	1a000009 	bne	1180 <__call_exitprocs+0x134>
    1158:	e28dd014 	add	sp, sp, #20
    115c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1160:	e12fff1e 	bx	lr
    1164:	e1a0e00f 	mov	lr, pc
    1168:	e12fff13 	bx	r3
    116c:	eaffffec 	b	1124 <__call_exitprocs+0xd8>
    1170:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1174:	e1a0e00f 	mov	lr, pc
    1178:	e12fff13 	bx	r3
    117c:	eaffffe8 	b	1124 <__call_exitprocs+0xd8>
    1180:	e5963004 	ldr	r3, [r6, #4]
    1184:	e3530000 	cmp	r3, #0
    1188:	e5963000 	ldr	r3, [r6]
    118c:	1a000008 	bne	11b4 <__call_exitprocs+0x168>
    1190:	e3530000 	cmp	r3, #0
    1194:	0a000006 	beq	11b4 <__call_exitprocs+0x168>
    1198:	e1a00006 	mov	r0, r6
    119c:	e58b3000 	str	r3, [r11]
    11a0:	e320f000 	nop	{0}
    11a4:	e59b6000 	ldr	r6, [r11]
    11a8:	e3560000 	cmp	r6, #0
    11ac:	1affffb5 	bne	1088 <__call_exitprocs+0x3c>
    11b0:	eaffffe8 	b	1158 <__call_exitprocs+0x10c>
    11b4:	e1a0b006 	mov	r11, r6
    11b8:	e1a06003 	mov	r6, r3
    11bc:	eafffff9 	b	11a8 <__call_exitprocs+0x15c>
    11c0:	00001324 	.word	0x00001324
    11c4:	00000000 	.word	0x00000000

000011c8 <register_fini>:
    11c8:	e92d4008 	push	{r3, lr}
    11cc:	e59f3010 	ldr	r3, [pc, #16]	; 11e4 <register_fini+0x1c>
    11d0:	e3530000 	cmp	r3, #0
    11d4:	159f000c 	ldrne	r0, [pc, #12]	; 11e8 <register_fini+0x20>
    11d8:	1bffff49 	blne	f04 <atexit>
    11dc:	e8bd4008 	pop	{r3, lr}
    11e0:	e12fff1e 	bx	lr
    11e4:	0000134c 	.word	0x0000134c
    11e8:	000011ec 	.word	0x000011ec

000011ec <__libc_fini_array>:
    11ec:	e92d4038 	push	{r3, r4, r5, lr}
    11f0:	e59f5030 	ldr	r5, [pc, #48]	; 1228 <__libc_fini_array+0x3c>
    11f4:	e59f4030 	ldr	r4, [pc, #48]	; 122c <__libc_fini_array+0x40>
    11f8:	e0654004 	rsb	r4, r5, r4
    11fc:	e1b04144 	asrs	r4, r4, #2
    1200:	10855104 	addne	r5, r5, r4, lsl #2
    1204:	0a000004 	beq	121c <__libc_fini_array+0x30>
    1208:	e5353004 	ldr	r3, [r5, #-4]!
    120c:	e1a0e00f 	mov	lr, pc
    1210:	e12fff13 	bx	r3
    1214:	e2544001 	subs	r4, r4, #1
    1218:	1afffffa 	bne	1208 <__libc_fini_array+0x1c>
    121c:	eb00004a 	bl	134c <__libc_fini>
    1220:	e8bd4038 	pop	{r3, r4, r5, lr}
    1224:	e12fff1e 	bx	lr
    1228:	00001364 	.word	0x00001364
    122c:	00001368 	.word	0x00001368

00001230 <__cs3_premain>:
    1230:	e92d4008 	push	{r3, lr}
    1234:	eb000017 	bl	1298 <__libc_init_array>
    1238:	e59f3030 	ldr	r3, [pc, #48]	; 1270 <__cs3_premain+0x40>
    123c:	e3530000 	cmp	r3, #0
    1240:	15930000 	ldrne	r0, [r3]
    1244:	01a00003 	moveq	r0, r3
    1248:	e59f3024 	ldr	r3, [pc, #36]	; 1274 <__cs3_premain+0x44>
    124c:	e3530000 	cmp	r3, #0
    1250:	15931000 	ldrne	r1, [r3]
    1254:	01a01003 	moveq	r1, r3
    1258:	e3a02000 	mov	r2, #0
    125c:	ebfffbfe 	bl	25c <main>
    1260:	e59f3010 	ldr	r3, [pc, #16]	; 1278 <__cs3_premain+0x48>
    1264:	e3530000 	cmp	r3, #0
    1268:	1bffff2d 	blne	f24 <exit>
    126c:	eafffffe 	b	126c <__cs3_premain+0x3c>
	...
    1278:	00000f24 	.word	0x00000f24

0000127c <_exit>:
    127c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1280:	e3a00018 	mov	r0, #24
    1284:	e59f1004 	ldr	r1, [pc, #4]	; 1290 <_exit+0x14>
    1288:	ef123456 	svc	0x00123456
    128c:	eafffffe 	b	128c <_exit+0x10>
    1290:	00020026 	.word	0x00020026

00001294 <__cs3_isr_interrupt>:
    1294:	eafffffe 	b	1294 <__cs3_isr_interrupt>

00001298 <__libc_init_array>:
    1298:	e92d4070 	push	{r4, r5, r6, lr}
    129c:	e59f506c 	ldr	r5, [pc, #108]	; 1310 <__libc_init_array+0x78>
    12a0:	e59f606c 	ldr	r6, [pc, #108]	; 1314 <__libc_init_array+0x7c>
    12a4:	e0656006 	rsb	r6, r5, r6
    12a8:	e1b06146 	asrs	r6, r6, #2
    12ac:	12455004 	subne	r5, r5, #4
    12b0:	13a04000 	movne	r4, #0
    12b4:	0a000005 	beq	12d0 <__libc_init_array+0x38>
    12b8:	e5b53004 	ldr	r3, [r5, #4]!
    12bc:	e2844001 	add	r4, r4, #1
    12c0:	e1a0e00f 	mov	lr, pc
    12c4:	e12fff13 	bx	r3
    12c8:	e1560004 	cmp	r6, r4
    12cc:	1afffff9 	bne	12b8 <__libc_init_array+0x20>
    12d0:	e59f5040 	ldr	r5, [pc, #64]	; 1318 <__libc_init_array+0x80>
    12d4:	e59f6040 	ldr	r6, [pc, #64]	; 131c <__libc_init_array+0x84>
    12d8:	e0656006 	rsb	r6, r5, r6
    12dc:	eb000012 	bl	132c <_init>
    12e0:	e1b06146 	asrs	r6, r6, #2
    12e4:	12455004 	subne	r5, r5, #4
    12e8:	13a04000 	movne	r4, #0
    12ec:	0a000005 	beq	1308 <__libc_init_array+0x70>
    12f0:	e5b53004 	ldr	r3, [r5, #4]!
    12f4:	e2844001 	add	r4, r4, #1
    12f8:	e1a0e00f 	mov	lr, pc
    12fc:	e12fff13 	bx	r3
    1300:	e1560004 	cmp	r6, r4
    1304:	1afffff9 	bne	12f0 <__libc_init_array+0x58>
    1308:	e8bd4070 	pop	{r4, r5, r6, lr}
    130c:	e12fff1e 	bx	lr
    1310:	00001344 	.word	0x00001344
    1314:	00001344 	.word	0x00001344
    1318:	00001344 	.word	0x00001344
    131c:	0000134c 	.word	0x0000134c

Disassembly of section .rodata:

00001324 <_global_impure_ptr>:
    1324:	00030190 00000043                       ....C...

0000132c <_init>:
    132c:	e1a0c00d 	mov	r12, sp
    1330:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1334:	e24cb004 	sub	r11, r12, #4
    1338:	e24bd028 	sub	sp, r11, #40	; 0x28
    133c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1340:	e12fff1e 	bx	lr

00001344 <__init_array_start>:
    1344:	000011c8 	.word	0x000011c8

00001348 <__frame_dummy_init_array_entry>:
    1348:	00000208                                ....

0000134c <__libc_fini>:
    134c:	e1a0c00d 	mov	r12, sp
    1350:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1354:	e24cb004 	sub	r11, r12, #4
    1358:	e24bd028 	sub	sp, r11, #40	; 0x28
    135c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1360:	e12fff1e 	bx	lr

00001364 <__fini_array_start>:
    1364:	000001c4 	.word	0x000001c4

00001368 <__cs3_regions>:
    1368:	00000000 	.word	0x00000000
    136c:	00000040 	.word	0x00000040
    1370:	00000040 	.word	0x00000040
    1374:	00030580 	.word	0x00030580
    1378:	00000020 	.word	0x00000020

0000137c <__cs3_regions_end>:
    137c:	00000000 	.word	0x00000000
