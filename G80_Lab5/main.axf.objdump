
P:/ECSE324/G80_Lab5/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	74 0d 00 00 80 0d 00 00 8c 0d 00 00 98 0d 00 00     t...............
  30:	a4 0d 00 00 b0 1b 00 00 1c 0c 00 00 b0 0d 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb00069c 	bl	1b4c <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	00001c98 	.word	0x00001c98

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <ICDISER+0x18>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <ICDISER+0x1c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <ICDISER+0x20>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00030ed0 	.word	0x00030ed0

00000124 <__cs3_heap_start_ptr>:
     124:	00030ef8 	.word	0x00030ef8

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00030ed8 	.word	0x00030ed8
     170:	00030edb 	.word	0x00030edb
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <ICDICER+0x38>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <ICDICER+0x3c>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <ICDICER+0x20>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <ICDICER+0x40>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <ICDICER+0x18>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <ICDICER+0x18>
     1b8:	00030ed8 	.word	0x00030ed8
     1bc:	00030ed8 	.word	0x00030ed8
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00030ed8 	.word	0x00030ed8
     200:	00000000 	.word	0x00000000
     204:	00001c3c 	.word	0x00001c3c

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	00001c3c 	.word	0x00001c3c
     250:	00030edc 	.word	0x00030edc
     254:	00001c98 	.word	0x00001c98
     258:	00000000 	.word	0x00000000

0000025c <make_wave>:
#include "./drivers/inc/ps2_keyboard.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/slider_switches.h"

// Make Waves Part 1
float make_wave(float f, int t) {
     25c:	e92d4810 	push	{r4, r11, lr}
     260:	e28db008 	add	r11, sp, #8
     264:	e24dd024 	sub	sp, sp, #36	; 0x24
     268:	e50b0028 	str	r0, [r11, #-40]	; 0xffffffd8
     26c:	e50b102c 	str	r1, [r11, #-44]	; 0xffffffd4
	float index = (f*t) - 48000 * (((int) ((f * t) / 48000)));				// Gets the remainder (i.e (f*t) % 48000)
     270:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
     274:	eb000418 	bl	12dc <__aeabi_i2f>
     278:	e1a03000 	mov	r3, r0
     27c:	e1a00003 	mov	r0, r3
     280:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
     284:	eb00044b 	bl	13b8 <__aeabi_fmul>
     288:	e1a03000 	mov	r3, r0
     28c:	e1a04003 	mov	r4, r3
     290:	e51b002c 	ldr	r0, [r11, #-44]	; 0xffffffd4
     294:	eb000410 	bl	12dc <__aeabi_i2f>
     298:	e1a03000 	mov	r3, r0
     29c:	e1a00003 	mov	r0, r3
     2a0:	e51b1028 	ldr	r1, [r11, #-40]	; 0xffffffd8
     2a4:	eb000443 	bl	13b8 <__aeabi_fmul>
     2a8:	e1a03000 	mov	r3, r0
     2ac:	e1a00003 	mov	r0, r3
     2b0:	e3a01902 	mov	r1, #32768	; 0x8000
     2b4:	e344173b 	movt	r1, #18235	; 0x473b
     2b8:	eb0004a4 	bl	1550 <__aeabi_fdiv>
     2bc:	e1a03000 	mov	r3, r0
     2c0:	e1a00003 	mov	r0, r3
     2c4:	eb00053e 	bl	17c4 <__aeabi_f2iz>
     2c8:	e1a03000 	mov	r3, r0
     2cc:	e30b2b80 	movw	r2, #48000	; 0xbb80
     2d0:	e0030392 	mul	r3, r2, r3
     2d4:	e1a00003 	mov	r0, r3
     2d8:	eb0003ff 	bl	12dc <__aeabi_i2f>
     2dc:	e1a03000 	mov	r3, r0
     2e0:	e1a00004 	mov	r0, r4
     2e4:	e1a01003 	mov	r1, r3
     2e8:	eb000389 	bl	1114 <__aeabi_fsub>
     2ec:	e1a03000 	mov	r3, r0
     2f0:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int x = (index == (int) index)? (int) index : ((int) (index)) + 1; 		// x holds upper int of index
     2f4:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     2f8:	eb000531 	bl	17c4 <__aeabi_f2iz>
     2fc:	e1a03000 	mov	r3, r0
     300:	e1a00003 	mov	r0, r3
     304:	eb0003f4 	bl	12dc <__aeabi_i2f>
     308:	e1a03000 	mov	r3, r0
     30c:	e1a00003 	mov	r0, r3
     310:	e51b1014 	ldr	r1, [r11, #-20]	; 0xffffffec
     314:	eb00050c 	bl	174c <__aeabi_fcmpeq>
     318:	e1a03000 	mov	r3, r0
     31c:	e3530000 	cmp	r3, #0
     320:	0a000003 	beq	334 <make_wave+0xd8>
     324:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     328:	eb000525 	bl	17c4 <__aeabi_f2iz>
     32c:	e1a03000 	mov	r3, r0
     330:	ea000003 	b	344 <make_wave+0xe8>
     334:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     338:	eb000521 	bl	17c4 <__aeabi_f2iz>
     33c:	e1a03000 	mov	r3, r0
     340:	e2833001 	add	r3, r3, #1
     344:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int y = (int) index;													// y holds lower int of index
     348:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     34c:	eb00051c 	bl	17c4 <__aeabi_f2iz>
     350:	e1a03000 	mov	r3, r0
     354:	e50b301c 	str	r3, [r11, #-28]	; 0xffffffe4
	float signal;
	if (x!=y) {							// Check if index isn't a whole number
     358:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     35c:	e51b301c 	ldr	r3, [r11, #-28]	; 0xffffffe4
     360:	e1520003 	cmp	r2, r3
     364:	0a000029 	beq	410 <make_wave+0x1b4>
		float remainder = index - y;	// Get remainder
     368:	e51b001c 	ldr	r0, [r11, #-28]	; 0xffffffe4
     36c:	eb0003da 	bl	12dc <__aeabi_i2f>
     370:	e1a03000 	mov	r3, r0
     374:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
     378:	e1a01003 	mov	r1, r3
     37c:	eb000364 	bl	1114 <__aeabi_fsub>
     380:	e1a03000 	mov	r3, r0
     384:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
		signal = (1-remainder)*sine[y] + remainder * sine[x];	// Linear interpolation of wavetable
     388:	e3a005fe 	mov	r0, #1065353216	; 0x3f800000
     38c:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     390:	eb00035f 	bl	1114 <__aeabi_fsub>
     394:	e1a03000 	mov	r3, r0
     398:	e1a04003 	mov	r4, r3
     39c:	e3013ca0 	movw	r3, #7328	; 0x1ca0
     3a0:	e3403000 	movt	r3, #0
     3a4:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     3a8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     3ac:	e1a00003 	mov	r0, r3
     3b0:	eb0003c9 	bl	12dc <__aeabi_i2f>
     3b4:	e1a03000 	mov	r3, r0
     3b8:	e1a00004 	mov	r0, r4
     3bc:	e1a01003 	mov	r1, r3
     3c0:	eb0003fc 	bl	13b8 <__aeabi_fmul>
     3c4:	e1a03000 	mov	r3, r0
     3c8:	e1a04003 	mov	r4, r3
     3cc:	e3013ca0 	movw	r3, #7328	; 0x1ca0
     3d0:	e3403000 	movt	r3, #0
     3d4:	e51b2018 	ldr	r2, [r11, #-24]	; 0xffffffe8
     3d8:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     3dc:	e1a00003 	mov	r0, r3
     3e0:	eb0003bd 	bl	12dc <__aeabi_i2f>
     3e4:	e1a03000 	mov	r3, r0
     3e8:	e1a00003 	mov	r0, r3
     3ec:	e51b1020 	ldr	r1, [r11, #-32]	; 0xffffffe0
     3f0:	eb0003f0 	bl	13b8 <__aeabi_fmul>
     3f4:	e1a03000 	mov	r3, r0
     3f8:	e1a00004 	mov	r0, r4
     3fc:	e1a01003 	mov	r1, r3
     400:	eb000344 	bl	1118 <__addsf3>
     404:	e1a03000 	mov	r3, r0
     408:	e50b3010 	str	r3, [r11, #-16]
     40c:	ea000007 	b	430 <make_wave+0x1d4>
	} else {
		signal = sine[y];			// If index is a whole number, simply get the index of the wavetable
     410:	e3013ca0 	movw	r3, #7328	; 0x1ca0
     414:	e3403000 	movt	r3, #0
     418:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     41c:	e7933102 	ldr	r3, [r3, r2, lsl #2]
     420:	e1a00003 	mov	r0, r3
     424:	eb0003ac 	bl	12dc <__aeabi_i2f>
     428:	e1a03000 	mov	r3, r0
     42c:	e50b3010 	str	r3, [r11, #-16]
	}

	return signal;
     430:	e51b3010 	ldr	r3, [r11, #-16]
}
     434:	e1a00003 	mov	r0, r3
     438:	e24bd008 	sub	sp, r11, #8
     43c:	e8bd8810 	pop	{r4, r11, pc}

00000440 <main>:


int main() {
     440:	e92d4800 	push	{r11, lr}
     444:	e28db004 	add	r11, sp, #4
     448:	e24dd010 	sub	sp, sp, #16
	// Audio Part 0
	
	int hi = 0x00FFFFFF; 	// High signal
     44c:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
     450:	e50b3010 	str	r3, [r11, #-16]
	int lo = 0x00000000;	// Low signal
     454:	e3a03000 	mov	r3, #0
     458:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int x = hi;
     45c:	e51b3010 	ldr	r3, [r11, #-16]
     460:	e50b3008 	str	r3, [r11, #-8]
	int i;
	while(1){
		for(i = 0 ; i < 240;){ 			// To get a frequency of 100Hz, there must be 480 samples per full cycle (48000 Samples/s / 100 Hz)
     464:	e3a03000 	mov	r3, #0
     468:	e50b300c 	str	r3, [r11, #-12]
     46c:	ea000007 	b	490 <main+0x50>
			if (audio_write_ASM(x)) {
     470:	e51b0008 	ldr	r0, [r11, #-8]
     474:	eb00026a 	bl	e24 <audio_write_ASM>
     478:	e1a03000 	mov	r3, r0
     47c:	e3530000 	cmp	r3, #0
     480:	0a000002 	beq	490 <main+0x50>
				i++;	
     484:	e51b300c 	ldr	r3, [r11, #-12]
     488:	e2833001 	add	r3, r3, #1
     48c:	e50b300c 	str	r3, [r11, #-12]
	int hi = 0x00FFFFFF; 	// High signal
	int lo = 0x00000000;	// Low signal
	int x = hi;
	int i;
	while(1){
		for(i = 0 ; i < 240;){ 			// To get a frequency of 100Hz, there must be 480 samples per full cycle (48000 Samples/s / 100 Hz)
     490:	e51b300c 	ldr	r3, [r11, #-12]
     494:	e35300ef 	cmp	r3, #239	; 0xef
     498:	dafffff4 	ble	470 <main+0x30>
			if (audio_write_ASM(x)) {
				i++;	
			}
		}
		x =(x==hi)?lo:hi;				// Invert the x setting (high -> low, low -> high)
     49c:	e51b2008 	ldr	r2, [r11, #-8]
     4a0:	e51b3010 	ldr	r3, [r11, #-16]
     4a4:	e1520003 	cmp	r2, r3
     4a8:	1a000001 	bne	4b4 <main+0x74>
     4ac:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     4b0:	ea000000 	b	4b8 <main+0x78>
     4b4:	e51b3010 	ldr	r3, [r11, #-16]
     4b8:	e50b3008 	str	r3, [r11, #-8]
	}
     4bc:	eaffffe8 	b	464 <main+0x24>

000004c0 <HEX_clear_ASM>:
     4c0:	e3a01000 	mov	r1, #0
     4c4:	ea000004 	b	4dc <WRITE>

000004c8 <HEX_flood_ASM>:
     4c8:	e3a0107f 	mov	r1, #127	; 0x7f
     4cc:	ea000002 	b	4dc <WRITE>

000004d0 <HEX_write_ASM>:
     4d0:	e59f2064 	ldr	r2, [pc, #100]	; 53c <PATTERNS+0x14>
     4d4:	e7d21001 	ldrb	r1, [r2, r1]
     4d8:	eaffffff 	b	4dc <WRITE>

000004dc <WRITE>:
     4dc:	e92d0030 	push	{r4, r5}
     4e0:	e59f2058 	ldr	r2, [pc, #88]	; 540 <PATTERNS+0x18>
     4e4:	e3a03000 	mov	r3, #0
     4e8:	e3e050ff 	mvn	r5, #255	; 0xff

000004ec <LOOP>:
     4ec:	e3100001 	tst	r0, #1
     4f0:	0a000003 	beq	504 <CONTINUE>
     4f4:	e5924000 	ldr	r4, [r2]
     4f8:	e0044005 	and	r4, r4, r5
     4fc:	e1844001 	orr	r4, r4, r1
     500:	e5824000 	str	r4, [r2]

00000504 <CONTINUE>:
     504:	e1a05c65 	ror	r5, r5, #24
     508:	e1a01c61 	ror	r1, r1, #24
     50c:	e2833001 	add	r3, r3, #1
     510:	e3530004 	cmp	r3, #4
     514:	059f2028 	ldreq	r2, [pc, #40]	; 544 <PATTERNS+0x1c>
     518:	e1b000a0 	lsrs	r0, r0, #1
     51c:	1afffff2 	bne	4ec <LOOP>
     520:	e8bd0030 	pop	{r4, r5}
     524:	e12fff1e 	bx	lr

00000528 <PATTERNS>:
     528:	4f5b063f 	.word	0x4f5b063f
     52c:	077d6d66 	.word	0x077d6d66
     530:	7c776f7f 	.word	0x7c776f7f
     534:	71795e39 	.word	0x71795e39
     538:	000000ff 	.word	0x000000ff
     53c:	00000528 	.word	0x00000528
     540:	ff200020 	.word	0xff200020
     544:	ff200030 	.word	0xff200030

00000548 <HPS_TIM_config_ASM>:
     548:	e92d40f0 	push	{r4, r5, r6, r7, lr}
     54c:	e3a01000 	mov	r1, #0
     550:	e3a02001 	mov	r2, #1
     554:	e5907000 	ldr	r7, [r0]
     558:	eaffffff 	b	55c <LOOP>

0000055c <LOOP>:
     55c:	e1170112 	tst	r7, r2, lsl r1
     560:	0a000000 	beq	568 <CONTINUE>
     564:	eb000004 	bl	57c <CONFIG>

00000568 <CONTINUE>:
     568:	e2811001 	add	r1, r1, #1
     56c:	e3510004 	cmp	r1, #4
     570:	bafffff9 	blt	55c <LOOP>

00000574 <DONE>:
     574:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
     578:	e12fff1e 	bx	lr

0000057c <CONFIG>:
     57c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     580:	e59f30e4 	ldr	r3, [pc, #228]	; 66c <HPS_TIM_BASE+0x10>
     584:	e7934101 	ldr	r4, [r3, r1, lsl #2]
     588:	eb000005 	bl	5a4 <DISABLE>
     58c:	eb000008 	bl	5b4 <SET_LOAD_VAL>
     590:	eb00000e 	bl	5d0 <SET_LOAD_BIT>
     594:	eb000013 	bl	5e8 <SET_INT_BIT>
     598:	eb000019 	bl	604 <SET_EN_BIT>
     59c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     5a0:	e12fff1e 	bx	lr

000005a4 <DISABLE>:
     5a4:	e5945008 	ldr	r5, [r4, #8]
     5a8:	e3c55001 	bic	r5, r5, #1
     5ac:	e5845008 	str	r5, [r4, #8]
     5b0:	e12fff1e 	bx	lr

000005b4 <SET_LOAD_VAL>:
     5b4:	e5905004 	ldr	r5, [r0, #4]
     5b8:	e3a06019 	mov	r6, #25
     5bc:	e0050695 	mul	r5, r5, r6
     5c0:	e3510002 	cmp	r1, #2
     5c4:	b1a05105 	lsllt	r5, r5, #2
     5c8:	e5845000 	str	r5, [r4]
     5cc:	e12fff1e 	bx	lr

000005d0 <SET_LOAD_BIT>:
     5d0:	e5945008 	ldr	r5, [r4, #8]
     5d4:	e5906008 	ldr	r6, [r0, #8]
     5d8:	e3c55002 	bic	r5, r5, #2
     5dc:	e1855086 	orr	r5, r5, r6, lsl #1
     5e0:	e5845008 	str	r5, [r4, #8]
     5e4:	e12fff1e 	bx	lr

000005e8 <SET_INT_BIT>:
     5e8:	e5945008 	ldr	r5, [r4, #8]
     5ec:	e590600c 	ldr	r6, [r0, #12]
     5f0:	e2266001 	eor	r6, r6, #1
     5f4:	e3c55004 	bic	r5, r5, #4
     5f8:	e1855106 	orr	r5, r5, r6, lsl #2
     5fc:	e5845008 	str	r5, [r4, #8]
     600:	e12fff1e 	bx	lr

00000604 <SET_EN_BIT>:
     604:	e5945008 	ldr	r5, [r4, #8]
     608:	e5906010 	ldr	r6, [r0, #16]
     60c:	e3c55001 	bic	r5, r5, #1
     610:	e1855006 	orr	r5, r5, r6
     614:	e5845008 	str	r5, [r4, #8]
     618:	e12fff1e 	bx	lr

0000061c <HPS_TIM_clear_INT_ASM>:
     61c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     620:	e3a01000 	mov	r1, #0
     624:	e3a02001 	mov	r2, #1
     628:	eaffffff 	b	62c <INT_LOOP>

0000062c <INT_LOOP>:
     62c:	e1100112 	tst	r0, r2, lsl r1
     630:	0a000000 	beq	638 <INT_CONTINUE>
     634:	eb000004 	bl	64c <CLEAR_IT>

00000638 <INT_CONTINUE>:
     638:	e2811001 	add	r1, r1, #1
     63c:	e3510004 	cmp	r1, #4
     640:	bafffff9 	blt	62c <INT_LOOP>

00000644 <INT_DONE>:
     644:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     648:	e12fff1e 	bx	lr

0000064c <CLEAR_IT>:
     64c:	e59f3018 	ldr	r3, [pc, #24]	; 66c <HPS_TIM_BASE+0x10>
     650:	e7933101 	ldr	r3, [r3, r1, lsl #2]
     654:	e593300c 	ldr	r3, [r3, #12]
     658:	e12fff1e 	bx	lr

0000065c <HPS_TIM_BASE>:
     65c:	ffc08000 	.word	0xffc08000
     660:	ffc09000 	.word	0xffc09000
     664:	ffd00000 	.word	0xffd00000
     668:	ffd01000 	.word	0xffd01000
     66c:	0000065c 	.word	0x0000065c

00000670 <hps_tim0_int_flag>:
     670:	00000000 	.word	0x00000000

00000674 <A9_PRIV_TIM_ISR>:
	.global hps_tim0_int_flag

hps_tim0_int_flag: .word 0x0

A9_PRIV_TIM_ISR:
	BX LR
     674:	e12fff1e 	bx	lr

00000678 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     678:	e12fff1e 	bx	lr

0000067c <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}		
     67c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1				// R0 is the input for the clear method
     680:	e3a00001 	mov	r0, #1
								// In this case, we're using the TIM0 timer so R0 should be 0001
	BL HPS_TIM_clear_INT_ASM	
     684:	ebffffe4 	bl	61c <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
     688:	e59f003c 	ldr	r0, [pc, #60]	; 6cc <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     68c:	e3a01001 	mov	r1, #1
	STR R1, [R0]				// Set flag to 1
     690:	e5801000 	str	r1, [r0]

	POP {LR}
     694:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     698:	e12fff1e 	bx	lr

0000069c <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     69c:	e12fff1e 	bx	lr

000006a0 <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     6a0:	e12fff1e 	bx	lr

000006a4 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     6a4:	e12fff1e 	bx	lr

000006a8 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     6a8:	e12fff1e 	bx	lr

000006ac <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	BX LR
     6ac:	e12fff1e 	bx	lr

000006b0 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     6b0:	e12fff1e 	bx	lr

000006b4 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     6b4:	e12fff1e 	bx	lr

000006b8 <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     6b8:	e12fff1e 	bx	lr

000006bc <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     6bc:	e12fff1e 	bx	lr

000006c0 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     6c0:	e12fff1e 	bx	lr

000006c4 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     6c4:	e12fff1e 	bx	lr

000006c8 <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     6c8:	e12fff1e 	bx	lr
	
	MOV R0, #0x1				// R0 is the input for the clear method
								// In this case, we're using the TIM0 timer so R0 should be 0001
	BL HPS_TIM_clear_INT_ASM	

	LDR R0, =hps_tim0_int_flag
     6cc:	00000670 	.word	0x00000670

000006d0 <read_LEDs_ASM>:
     6d0:	e59f1010 	ldr	r1, [pc, #16]	; 6e8 <write_LEDs_ASM+0xc>
     6d4:	e5910000 	ldr	r0, [r1]
     6d8:	e12fff1e 	bx	lr

000006dc <write_LEDs_ASM>:
     6dc:	e59f1004 	ldr	r1, [pc, #4]	; 6e8 <write_LEDs_ASM+0xc>
     6e0:	e5810000 	str	r0, [r1]
     6e4:	e12fff1e 	bx	lr
     6e8:	ff200000 	.word	0xff200000

000006ec <read_ps2_data_ASM>:
     6ec:	e59f114c 	ldr	r1, [pc, #332]	; 840 <ps2_fifo_ravail+0x4>
     6f0:	e5911000 	ldr	r1, [r1]
     6f4:	e3a02902 	mov	r2, #32768	; 0x8000
     6f8:	e1110002 	tst	r1, r2
     6fc:	03a00000 	moveq	r0, #0
     700:	012fff1e 	bxeq	lr
     704:	e20120ff 	and	r2, r1, #255	; 0xff
     708:	e5c02000 	strb	r2, [r0]
     70c:	e59f2130 	ldr	r2, [pc, #304]	; 844 <ps2_fifo_ravail+0x8>
     710:	e0010002 	and	r0, r1, r2
     714:	e1a00820 	lsr	r0, r0, #16
     718:	e12fff1e 	bx	lr

0000071c <enable_ps2_int_ASM>:
     71c:	e59f011c 	ldr	r0, [pc, #284]	; 840 <ps2_fifo_ravail+0x4>
     720:	e3a01001 	mov	r1, #1
     724:	e5c01004 	strb	r1, [r0, #4]
     728:	e12fff1e 	bx	lr

0000072c <disable_ps2_int_ASM>:
     72c:	e59f010c 	ldr	r0, [pc, #268]	; 840 <ps2_fifo_ravail+0x4>
     730:	e3a01000 	mov	r1, #0
     734:	e5c01004 	strb	r1, [r0, #4]
     738:	e12fff1e 	bx	lr

0000073c <ps2_fifo_data>:
	...

0000083c <ps2_fifo_ravail>:
     83c:	00000000 	.word	0x00000000
     840:	ff200100 	.word	0xff200100
     844:	ffff0000 	.word	0xffff0000

00000848 <read_PB_data_ASM>:
     848:	e59f1074 	ldr	r1, [pc, #116]	; 8c4 <disable_PB_INT_ASM+0x14>
     84c:	e5910000 	ldr	r0, [r1]
     850:	e12fff1e 	bx	lr

00000854 <PB_data_is_pressed_ASM>:
     854:	e59f1068 	ldr	r1, [pc, #104]	; 8c4 <disable_PB_INT_ASM+0x14>
     858:	e5912000 	ldr	r2, [r1]
     85c:	e0000002 	and	r0, r0, r2
     860:	e3300000 	teq	r0, #0
     864:	13a00001 	movne	r0, #1
     868:	e12fff1e 	bx	lr

0000086c <read_PB_edgecap_ASM>:
     86c:	e59f1054 	ldr	r1, [pc, #84]	; 8c8 <disable_PB_INT_ASM+0x18>
     870:	e5910000 	ldr	r0, [r1]
     874:	e12fff1e 	bx	lr

00000878 <PB_edgecap_is_pressed_ASM>:
     878:	e59f1048 	ldr	r1, [pc, #72]	; 8c8 <disable_PB_INT_ASM+0x18>
     87c:	e5912000 	ldr	r2, [r1]
     880:	e0000002 	and	r0, r0, r2
     884:	e3300000 	teq	r0, #0
     888:	13a00001 	movne	r0, #1
     88c:	e12fff1e 	bx	lr

00000890 <PB_clear_edgecp_ASM>:
     890:	e59f1030 	ldr	r1, [pc, #48]	; 8c8 <disable_PB_INT_ASM+0x18>
     894:	e5810000 	str	r0, [r1]
     898:	e12fff1e 	bx	lr

0000089c <enable_PB_INT_ASM>:
     89c:	e59f1028 	ldr	r1, [pc, #40]	; 8cc <disable_PB_INT_ASM+0x1c>
     8a0:	e5912000 	ldr	r2, [r1]
     8a4:	e1800002 	orr	r0, r0, r2
     8a8:	e5810000 	str	r0, [r1]
     8ac:	e12fff1e 	bx	lr

000008b0 <disable_PB_INT_ASM>:
     8b0:	e59f1014 	ldr	r1, [pc, #20]	; 8cc <disable_PB_INT_ASM+0x1c>
     8b4:	e5912000 	ldr	r2, [r1]
     8b8:	e1c00002 	bic	r0, r0, r2
     8bc:	e5810000 	str	r0, [r1]
     8c0:	e12fff1e 	bx	lr
     8c4:	ff200050 	.word	0xff200050
     8c8:	ff20005c 	.word	0xff20005c
     8cc:	ff200058 	.word	0xff200058

000008d0 <read_slider_switches_ASM>:
     8d0:	e59f1004 	ldr	r1, [pc, #4]	; 8dc <read_slider_switches_ASM+0xc>
     8d4:	e5910000 	ldr	r0, [r1]
     8d8:	e12fff1e 	bx	lr
     8dc:	ff200040 	.word	0xff200040

000008e0 <VGA_clear_charbuff_ASM>:
     8e0:	e92d0030 	push	{r4, r5}
     8e4:	e3a02000 	mov	r2, #0
     8e8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     8ec:	e3a00000 	mov	r0, #0

000008f0 <CHAR_LOOPX>:
     8f0:	e3a01000 	mov	r1, #0
     8f4:	e0834000 	add	r4, r3, r0

000008f8 <CHAR_LOOPY>:
     8f8:	e0845381 	add	r5, r4, r1, lsl #7
     8fc:	e5c52000 	strb	r2, [r5]
     900:	e2811001 	add	r1, r1, #1
     904:	e351003c 	cmp	r1, #60	; 0x3c
     908:	bafffffa 	blt	8f8 <CHAR_LOOPY>
     90c:	e2800001 	add	r0, r0, #1
     910:	e3500050 	cmp	r0, #80	; 0x50
     914:	bafffff5 	blt	8f0 <CHAR_LOOPX>
     918:	e8bd0030 	pop	{r4, r5}
     91c:	e12fff1e 	bx	lr

00000920 <VGA_clear_pixelbuff_ASM>:
     920:	e92d0030 	push	{r4, r5}
     924:	e3a02000 	mov	r2, #0
     928:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     92c:	e3a00000 	mov	r0, #0

00000930 <PIXEL_LOOPX>:
     930:	e3a01000 	mov	r1, #0
     934:	e0834080 	add	r4, r3, r0, lsl #1

00000938 <PIXEL_LOOPY>:
     938:	e0845501 	add	r5, r4, r1, lsl #10
     93c:	e1c520b0 	strh	r2, [r5]
     940:	e2811001 	add	r1, r1, #1
     944:	e35100f0 	cmp	r1, #240	; 0xf0
     948:	bafffffa 	blt	938 <PIXEL_LOOPY>
     94c:	e2800001 	add	r0, r0, #1
     950:	e3500d05 	cmp	r0, #320	; 0x140
     954:	bafffff5 	blt	930 <PIXEL_LOOPX>
     958:	e8bd0030 	pop	{r4, r5}
     95c:	e12fff1e 	bx	lr

00000960 <VGA_write_char_ASM>:
     960:	e3500000 	cmp	r0, #0
     964:	b12fff1e 	bxlt	lr
     968:	e3510000 	cmp	r1, #0
     96c:	b12fff1e 	bxlt	lr
     970:	e350004f 	cmp	r0, #79	; 0x4f
     974:	c12fff1e 	bxgt	lr
     978:	e351003b 	cmp	r1, #59	; 0x3b
     97c:	c12fff1e 	bxgt	lr
     980:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     984:	e0833000 	add	r3, r3, r0
     988:	e0833381 	add	r3, r3, r1, lsl #7
     98c:	e5c32000 	strb	r2, [r3]
     990:	e12fff1e 	bx	lr

00000994 <VGA_write_byte_ASM>:
     994:	e3500000 	cmp	r0, #0
     998:	b12fff1e 	bxlt	lr
     99c:	e3510000 	cmp	r1, #0
     9a0:	b12fff1e 	bxlt	lr
     9a4:	e350004e 	cmp	r0, #78	; 0x4e
     9a8:	c12fff1e 	bxgt	lr
     9ac:	e351003b 	cmp	r1, #59	; 0x3b
     9b0:	c12fff1e 	bxgt	lr
     9b4:	e92d0030 	push	{r4, r5}
     9b8:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
     9bc:	e20250f0 	and	r5, r2, #240	; 0xf0
     9c0:	e1a05225 	lsr	r5, r5, #4
     9c4:	e202400f 	and	r4, r2, #15
     9c8:	e59f2068 	ldr	r2, [pc, #104]	; a38 <HEX_ASCII+0x10>
     9cc:	e7d25005 	ldrb	r5, [r2, r5]
     9d0:	e7d24004 	ldrb	r4, [r2, r4]
     9d4:	e0833000 	add	r3, r3, r0
     9d8:	e0833381 	add	r3, r3, r1, lsl #7
     9dc:	e5c35000 	strb	r5, [r3]
     9e0:	e2833001 	add	r3, r3, #1
     9e4:	e5c34000 	strb	r4, [r3]
     9e8:	e8bd0030 	pop	{r4, r5}
     9ec:	e12fff1e 	bx	lr

000009f0 <VGA_draw_point_ASM>:
     9f0:	e59f3044 	ldr	r3, [pc, #68]	; a3c <HEX_ASCII+0x14>
     9f4:	e3500000 	cmp	r0, #0
     9f8:	b12fff1e 	bxlt	lr
     9fc:	e3510000 	cmp	r1, #0
     a00:	b12fff1e 	bxlt	lr
     a04:	e1500003 	cmp	r0, r3
     a08:	c12fff1e 	bxgt	lr
     a0c:	e35100ef 	cmp	r1, #239	; 0xef
     a10:	c12fff1e 	bxgt	lr
     a14:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
     a18:	e0833080 	add	r3, r3, r0, lsl #1
     a1c:	e0833501 	add	r3, r3, r1, lsl #10
     a20:	e1c320b0 	strh	r2, [r3]
     a24:	e12fff1e 	bx	lr

00000a28 <HEX_ASCII>:
     a28:	33323130 	.word	0x33323130
     a2c:	37363534 	.word	0x37363534
     a30:	42413938 	.word	0x42413938
     a34:	46454443 	.word	0x46454443
     a38:	00000a28 	.word	0x00000a28
     a3c:	0000013f 	.word	0x0000013f

00000a40 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     a40:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a44:	e28db000 	add	r11, sp, #0
     a48:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     a4c:	e3a030d3 	mov	r3, #211	; 0xd3
     a50:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     a54:	e51b3008 	ldr	r3, [r11, #-8]
     a58:	e129f003 	msr	CPSR_fc, r3
}
     a5c:	e28bd000 	add	sp, r11, #0
     a60:	e8bd0800 	ldmfd	sp!, {r11}
     a64:	e12fff1e 	bx	lr

00000a68 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     a68:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a6c:	e28db000 	add	r11, sp, #0
     a70:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     a74:	e3a03053 	mov	r3, #83	; 0x53
     a78:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     a7c:	e51b3008 	ldr	r3, [r11, #-8]
     a80:	e129f003 	msr	CPSR_fc, r3
}
     a84:	e28bd000 	add	sp, r11, #0
     a88:	e8bd0800 	ldmfd	sp!, {r11}
     a8c:	e12fff1e 	bx	lr

00000a90 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     a90:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a94:	e28db000 	add	r11, sp, #0
     a98:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     a9c:	e3e03007 	mvn	r3, #7
     aa0:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     aa4:	e3a030d2 	mov	r3, #210	; 0xd2
     aa8:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     aac:	e51b300c 	ldr	r3, [r11, #-12]
     ab0:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     ab4:	e51b3008 	ldr	r3, [r11, #-8]
     ab8:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     abc:	e3a030d3 	mov	r3, #211	; 0xd3
     ac0:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     ac4:	e51b300c 	ldr	r3, [r11, #-12]
     ac8:	e129f003 	msr	CPSR_fc, r3
}
     acc:	e28bd000 	add	sp, r11, #0
     ad0:	e8bd0800 	ldmfd	sp!, {r11}
     ad4:	e12fff1e 	bx	lr

00000ad8 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     ad8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     adc:	e28db000 	add	r11, sp, #0
     ae0:	e24dd01c 	sub	sp, sp, #28
     ae4:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     ae8:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     aec:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     af0:	e1a031c3 	asr	r3, r3, #3
     af4:	e3c33003 	bic	r3, r3, #3
     af8:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     afc:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b00:	e203301f 	and	r3, r3, #31
     b04:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     b08:	e3a02001 	mov	r2, #1
     b0c:	e51b300c 	ldr	r3, [r11, #-12]
     b10:	e1a03312 	lsl	r3, r2, r3
     b14:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     b18:	e51b3008 	ldr	r3, [r11, #-8]
     b1c:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     b20:	e2433c03 	sub	r3, r3, #768	; 0x300
     b24:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     b28:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     b2c:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     b30:	e5921000 	ldr	r1, [r2]
     b34:	e51b2010 	ldr	r2, [r11, #-16]
     b38:	e1812002 	orr	r2, r1, r2
     b3c:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     b40:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b44:	e3c33003 	bic	r3, r3, #3
     b48:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     b4c:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     b50:	e2033003 	and	r3, r3, #3
     b54:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     b58:	e51b2008 	ldr	r2, [r11, #-8]
     b5c:	e51b300c 	ldr	r3, [r11, #-12]
     b60:	e0823003 	add	r3, r2, r3
     b64:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     b68:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     b6c:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     b70:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     b74:	e6ef2072 	uxtb	r2, r2
     b78:	e5c32000 	strb	r2, [r3]
}
     b7c:	e28bd000 	add	sp, r11, #0
     b80:	e8bd0800 	ldmfd	sp!, {r11}
     b84:	e12fff1e 	bx	lr

00000b88 <config_GIC>:

void config_GIC(int len, int* IDs) {
     b88:	e92d4800 	push	{r11, lr}
     b8c:	e28db004 	add	r11, sp, #4
     b90:	e24dd010 	sub	sp, sp, #16
     b94:	e50b0010 	str	r0, [r11, #-16]
     b98:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     b9c:	e3a03000 	mov	r3, #0
     ba0:	e50b3008 	str	r3, [r11, #-8]
     ba4:	ea00000a 	b	bd4 <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     ba8:	e51b3008 	ldr	r3, [r11, #-8]
     bac:	e1a03103 	lsl	r3, r3, #2
     bb0:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     bb4:	e0823003 	add	r3, r2, r3
     bb8:	e5933000 	ldr	r3, [r3]
     bbc:	e1a00003 	mov	r0, r3
     bc0:	e3a01001 	mov	r1, #1
     bc4:	ebffffc3 	bl	ad8 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     bc8:	e51b3008 	ldr	r3, [r11, #-8]
     bcc:	e2833001 	add	r3, r3, #1
     bd0:	e50b3008 	str	r3, [r11, #-8]
     bd4:	e51b2008 	ldr	r2, [r11, #-8]
     bd8:	e51b3010 	ldr	r3, [r11, #-16]
     bdc:	e1520003 	cmp	r2, r3
     be0:	bafffff0 	blt	ba8 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     be4:	e30c3104 	movw	r3, #49412	; 0xc104
     be8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     bec:	e30f2fff 	movw	r2, #65535	; 0xffff
     bf0:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     bf4:	e3a03cc1 	mov	r3, #49408	; 0xc100
     bf8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     bfc:	e3a02001 	mov	r2, #1
     c00:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     c04:	e3a03a0d 	mov	r3, #53248	; 0xd000
     c08:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c0c:	e3a02001 	mov	r2, #1
     c10:	e5832000 	str	r2, [r3]
}
     c14:	e24bd004 	sub	sp, r11, #4
     c18:	e8bd8800 	pop	{r11, pc}

00000c1c <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     c1c:	e24ee004 	sub	lr, lr, #4
     c20:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     c24:	e28db018 	add	r11, sp, #24
     c28:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     c2c:	e30c310c 	movw	r3, #49420	; 0xc10c
     c30:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     c34:	e5933000 	ldr	r3, [r3]
     c38:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     c3c:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     c40:	e3530053 	cmp	r3, #83	; 0x53
     c44:	0a00003d 	beq	d40 <__cs3_isr_irq+0x124>
     c48:	e3530053 	cmp	r3, #83	; 0x53
     c4c:	ca000011 	bgt	c98 <__cs3_isr_irq+0x7c>
     c50:	e353004e 	cmp	r3, #78	; 0x4e
     c54:	0a000031 	beq	d20 <__cs3_isr_irq+0x104>
     c58:	e353004e 	cmp	r3, #78	; 0x4e
     c5c:	ca000006 	bgt	c7c <__cs3_isr_irq+0x60>
     c60:	e3530048 	cmp	r3, #72	; 0x48
     c64:	0a000029 	beq	d10 <__cs3_isr_irq+0xf4>
     c68:	e3530049 	cmp	r3, #73	; 0x49
     c6c:	0a000029 	beq	d18 <__cs3_isr_irq+0xfc>
     c70:	e353001d 	cmp	r3, #29
     c74:	0a000019 	beq	ce0 <__cs3_isr_irq+0xc4>
     c78:	ea000036 	b	d58 <__cs3_isr_irq+0x13c>
     c7c:	e3530050 	cmp	r3, #80	; 0x50
     c80:	0a00002a 	beq	d30 <__cs3_isr_irq+0x114>
     c84:	e3530050 	cmp	r3, #80	; 0x50
     c88:	ba000026 	blt	d28 <__cs3_isr_irq+0x10c>
     c8c:	e3530051 	cmp	r3, #81	; 0x51
     c90:	0a000028 	beq	d38 <__cs3_isr_irq+0x11c>
     c94:	ea00002f 	b	d58 <__cs3_isr_irq+0x13c>
     c98:	e35300c7 	cmp	r3, #199	; 0xc7
     c9c:	0a000013 	beq	cf0 <__cs3_isr_irq+0xd4>
     ca0:	e35300c7 	cmp	r3, #199	; 0xc7
     ca4:	ca000006 	bgt	cc4 <__cs3_isr_irq+0xa8>
     ca8:	e3530059 	cmp	r3, #89	; 0x59
     cac:	0a000027 	beq	d50 <__cs3_isr_irq+0x134>
     cb0:	e35300c5 	cmp	r3, #197	; 0xc5
     cb4:	0a00000b 	beq	ce8 <__cs3_isr_irq+0xcc>
     cb8:	e3530054 	cmp	r3, #84	; 0x54
     cbc:	0a000021 	beq	d48 <__cs3_isr_irq+0x12c>
     cc0:	ea000024 	b	d58 <__cs3_isr_irq+0x13c>
     cc4:	e35300c9 	cmp	r3, #201	; 0xc9
     cc8:	0a00000c 	beq	d00 <__cs3_isr_irq+0xe4>
     ccc:	e35300c9 	cmp	r3, #201	; 0xc9
     cd0:	ba000008 	blt	cf8 <__cs3_isr_irq+0xdc>
     cd4:	e35300ca 	cmp	r3, #202	; 0xca
     cd8:	0a00000a 	beq	d08 <__cs3_isr_irq+0xec>
     cdc:	ea00001d 	b	d58 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     ce0:	ebfffe63 	bl	674 <A9_PRIV_TIM_ISR>
     ce4:	ea00001c 	b	d5c <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     ce8:	ebfffe62 	bl	678 <HPS_GPIO1_ISR>
     cec:	ea00001a 	b	d5c <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     cf0:	ebfffe61 	bl	67c <HPS_TIM0_ISR>
     cf4:	ea000018 	b	d5c <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     cf8:	ebfffe67 	bl	69c <HPS_TIM1_ISR>
     cfc:	ea000016 	b	d5c <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     d00:	ebfffe66 	bl	6a0 <HPS_TIM2_ISR>
     d04:	ea000014 	b	d5c <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     d08:	ebfffe65 	bl	6a4 <HPS_TIM3_ISR>
     d0c:	ea000012 	b	d5c <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     d10:	ebfffe64 	bl	6a8 <FPGA_INTERVAL_TIM_ISR>
     d14:	ea000010 	b	d5c <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     d18:	ebfffe63 	bl	6ac <FPGA_PB_KEYS_ISR>
     d1c:	ea00000e 	b	d5c <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     d20:	ebfffe62 	bl	6b0 <FPGA_Audio_ISR>
     d24:	ea00000c 	b	d5c <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     d28:	ebfffe61 	bl	6b4 <FPGA_PS2_ISR>
     d2c:	ea00000a 	b	d5c <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     d30:	ebfffe60 	bl	6b8 <FPGA_JTAG_ISR>
     d34:	ea000008 	b	d5c <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     d38:	ebfffe5f 	bl	6bc <FPGA_IrDA_ISR>
     d3c:	ea000006 	b	d5c <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     d40:	ebfffe5e 	bl	6c0 <FPGA_JP1_ISR>
     d44:	ea000004 	b	d5c <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     d48:	ebfffe5d 	bl	6c4 <FPGA_JP2_ISR>
     d4c:	ea000002 	b	d5c <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     d50:	ebfffe5c 	bl	6c8 <FPGA_PS2_DUAL_ISR>
     d54:	ea000000 	b	d5c <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     d58:	eafffffe 	b	d58 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     d5c:	e30c3110 	movw	r3, #49424	; 0xc110
     d60:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d64:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     d68:	e5832000 	str	r2, [r3]
}
     d6c:	e24bd018 	sub	sp, r11, #24
     d70:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000d74 <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     d74:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d78:	e28db000 	add	r11, sp, #0
	while(1);
     d7c:	eafffffe 	b	d7c <__cs3_reset+0x8>

00000d80 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     d80:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d84:	e28db000 	add	r11, sp, #0
	while(1);
     d88:	eafffffe 	b	d88 <__cs3_isr_undef+0x8>

00000d8c <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     d8c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d90:	e28db000 	add	r11, sp, #0
	while(1);
     d94:	eafffffe 	b	d94 <__cs3_isr_swi+0x8>

00000d98 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     d98:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d9c:	e28db000 	add	r11, sp, #0
	while(1);
     da0:	eafffffe 	b	da0 <__cs3_isr_pabort+0x8>

00000da4 <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     da4:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     da8:	e28db000 	add	r11, sp, #0
	while(1);
     dac:	eafffffe 	b	dac <__cs3_isr_dabort+0x8>

00000db0 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     db0:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     db4:	e28db000 	add	r11, sp, #0
	while(1);
     db8:	eafffffe 	b	db8 <__cs3_isr_fiq+0x8>

00000dbc <fix_bug>:
}

void fix_bug() {
     dbc:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     dc0:	e28db000 	add	r11, sp, #0
     dc4:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     dc8:	e30d3198 	movw	r3, #53656	; 0xd198
     dcc:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     dd0:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     dd4:	e51b3008 	ldr	r3, [r11, #-8]
     dd8:	e3a02703 	mov	r2, #786432	; 0xc0000
     ddc:	e5832000 	str	r2, [r3]
}
     de0:	e28bd000 	add	sp, r11, #0
     de4:	e8bd0800 	ldmfd	sp!, {r11}
     de8:	e12fff1e 	bx	lr

00000dec <int_setup>:

void int_setup(int len, int* IDs) {
     dec:	e92d4800 	push	{r11, lr}
     df0:	e28db004 	add	r11, sp, #4
     df4:	e24dd008 	sub	sp, sp, #8
     df8:	e50b0008 	str	r0, [r11, #-8]
     dfc:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     e00:	ebffff0e 	bl	a40 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     e04:	ebffff21 	bl	a90 <set_A9_IRQ_stack>
	fix_bug();
     e08:	ebffffeb 	bl	dbc <fix_bug>
	config_GIC(len, IDs);
     e0c:	e51b0008 	ldr	r0, [r11, #-8]
     e10:	e51b100c 	ldr	r1, [r11, #-12]
     e14:	ebffff5b 	bl	b88 <config_GIC>
	enable_A9_interrupts();
     e18:	ebffff12 	bl	a68 <enable_A9_interrupts>
}
     e1c:	e24bd004 	sub	sp, r11, #4
     e20:	e8bd8800 	pop	{r11, pc}

00000e24 <audio_write_ASM>:
	.equ right_fifo, 0xFF20304C
	.equ fifospace, 0xFF203044
	.global audio_write_ASM

audio_write_ASM:
			PUSH {R1-R5}
     e24:	e92d003e 	push	{r1, r2, r3, r4, r5}
			LDR R1, =left_fifo 	// Loads the address of the data register for the left fifo
     e28:	e59f1040 	ldr	r1, [pc, #64]	; e70 <audio_write_ASM+0x4c>
			LDR R2, =right_fifo // Loads the address of the data register for the right fifo
     e2c:	e59f2040 	ldr	r2, [pc, #64]	; e74 <audio_write_ASM+0x50>
			LDR R3, =fifospace 	// Loads the address of the data register for the fifospace
     e30:	e59f3040 	ldr	r3, [pc, #64]	; e78 <audio_write_ASM+0x54>

			LDRB R4, [R3, #2] 	// Loads the value of WSRC onto R4
     e34:	e5d34002 	ldrb	r4, [r3, #2]
			CMP R4, #0
     e38:	e3540000 	cmp	r4, #0
			MOVEQ R0, #0 		// If it's 0, the subroutine returns 0 because the FIFO is full
     e3c:	03a00000 	moveq	r0, #0
			POPEQ {R1-R5}
     e40:	08bd003e 	popeq	{r1, r2, r3, r4, r5}
			BXEQ LR
     e44:	012fff1e 	bxeq	lr
			LDRB R5, [R3, #3] 	// Loads the value of WSLC onto R5
     e48:	e5d35003 	ldrb	r5, [r3, #3]
			CMP R5, #0
     e4c:	e3550000 	cmp	r5, #0
			MOVEQ R0, #0		// If it's 0, the subroutine returns 0 because the FIFO is full
     e50:	03a00000 	moveq	r0, #0
			POPEQ {R1-R5}
     e54:	08bd003e 	popeq	{r1, r2, r3, r4, r5}
			BXEQ LR
     e58:	012fff1e 	bxeq	lr

			STR R0, [R1] 		// If the FIFOs are not full, the data is stored in them
     e5c:	e5810000 	str	r0, [r1]
			STR R0, [R2]
     e60:	e5820000 	str	r0, [r2]
			MOV R0, #1 			// and subroutine returns 1
     e64:	e3a00001 	mov	r0, #1
			POP {R1-R5}
     e68:	e8bd003e 	pop	{r1, r2, r3, r4, r5}
			BX LR
     e6c:	e12fff1e 	bx	lr
	.equ fifospace, 0xFF203044
	.global audio_write_ASM

audio_write_ASM:
			PUSH {R1-R5}
			LDR R1, =left_fifo 	// Loads the address of the data register for the left fifo
     e70:	ff203048 	.word	0xff203048
			LDR R2, =right_fifo // Loads the address of the data register for the right fifo
     e74:	ff20304c 	.word	0xff20304c
			LDR R3, =fifospace 	// Loads the address of the data register for the fifospace
     e78:	ff203044 	.word	0xff203044

00000e7c <audio_read_data_ASM>:
     e7c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     e80:	e92d0003 	push	{r0, r1}
     e84:	eb000093 	bl	10d8 <audio_read_ralc_ASM>
     e88:	e3500000 	cmp	r0, #0
     e8c:	08bd0003 	popeq	{r0, r1}
     e90:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     e94:	03a00000 	moveq	r0, #0
     e98:	012fff1e 	bxeq	lr
     e9c:	eb000092 	bl	10ec <audio_read_rarc_ASM>
     ea0:	e3500000 	cmp	r0, #0
     ea4:	08bd0003 	popeq	{r0, r1}
     ea8:	03a00000 	moveq	r0, #0
     eac:	012fff1e 	bxeq	lr
     eb0:	e8bd0003 	pop	{r0, r1}
     eb4:	e59f2240 	ldr	r2, [pc, #576]	; 10fc <audio_read_rarc_ASM+0x10>
     eb8:	e5922000 	ldr	r2, [r2]
     ebc:	e5802000 	str	r2, [r0]
     ec0:	e59f3238 	ldr	r3, [pc, #568]	; 1100 <audio_read_rarc_ASM+0x14>
     ec4:	e5933000 	ldr	r3, [r3]
     ec8:	e5813000 	str	r3, [r1]
     ecc:	e3a00001 	mov	r0, #1

00000ed0 <audio_read_leftdata_ASM>:
     ed0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     ed4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     ed8:	eb00007e 	bl	10d8 <audio_read_ralc_ASM>
     edc:	e3500000 	cmp	r0, #0
     ee0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     ee4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     ee8:	03a00000 	moveq	r0, #0
     eec:	012fff1e 	bxeq	lr
     ef0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     ef4:	e59f2200 	ldr	r2, [pc, #512]	; 10fc <audio_read_rarc_ASM+0x10>
     ef8:	e5922000 	ldr	r2, [r2]
     efc:	e5802000 	str	r2, [r0]
     f00:	e3a00001 	mov	r0, #1
     f04:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f08:	e12fff1e 	bx	lr

00000f0c <audio_read_rightdata_ASM>:
     f0c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f10:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     f14:	eb000074 	bl	10ec <audio_read_rarc_ASM>
     f18:	e3500000 	cmp	r0, #0
     f1c:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     f20:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f24:	03a00000 	moveq	r0, #0
     f28:	012fff1e 	bxeq	lr
     f2c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     f30:	e59f21c8 	ldr	r2, [pc, #456]	; 1100 <audio_read_rarc_ASM+0x14>
     f34:	e5922000 	ldr	r2, [r2]
     f38:	e5802000 	str	r2, [r0]
     f3c:	e3a00001 	mov	r0, #1
     f40:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f44:	e12fff1e 	bx	lr

00000f48 <audio_write_data_ASM>:
     f48:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     f4c:	e92d0003 	push	{r0, r1}
     f50:	eb000056 	bl	10b0 <audio_read_wslc_ASM>
     f54:	e3500000 	cmp	r0, #0
     f58:	08bd0003 	popeq	{r0, r1}
     f5c:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f60:	03a00000 	moveq	r0, #0
     f64:	012fff1e 	bxeq	lr
     f68:	eb000055 	bl	10c4 <audio_read_wsrc_ASM>
     f6c:	e3500000 	cmp	r0, #0
     f70:	08bd0003 	popeq	{r0, r1}
     f74:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     f78:	03a00000 	moveq	r0, #0
     f7c:	012fff1e 	bxeq	lr
     f80:	e8bd0003 	pop	{r0, r1}
     f84:	e59f2170 	ldr	r2, [pc, #368]	; 10fc <audio_read_rarc_ASM+0x10>
     f88:	e5820000 	str	r0, [r2]
     f8c:	e59f316c 	ldr	r3, [pc, #364]	; 1100 <audio_read_rarc_ASM+0x14>
     f90:	e5831000 	str	r1, [r3]
     f94:	e3a00001 	mov	r0, #1
     f98:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     f9c:	e12fff1e 	bx	lr

00000fa0 <audio_write_leftdata_ASM>:
     fa0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     fa4:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     fa8:	eb000040 	bl	10b0 <audio_read_wslc_ASM>
     fac:	e3500000 	cmp	r0, #0
     fb0:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     fb4:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     fb8:	03a00000 	moveq	r0, #0
     fbc:	012fff1e 	bxeq	lr
     fc0:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     fc4:	e59f2130 	ldr	r2, [pc, #304]	; 10fc <audio_read_rarc_ASM+0x10>
     fc8:	e5820000 	str	r0, [r2]
     fcc:	e3a00001 	mov	r0, #1
     fd0:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
     fd4:	e12fff1e 	bx	lr

00000fd8 <audio_write_rightdata_ASM>:
     fd8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
     fdc:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
     fe0:	eb000037 	bl	10c4 <audio_read_wsrc_ASM>
     fe4:	e3500000 	cmp	r0, #0
     fe8:	049d0004 	popeq	{r0}		; (ldreq r0, [sp], #4)
     fec:	049de004 	popeq	{lr}		; (ldreq lr, [sp], #4)
     ff0:	03a00000 	moveq	r0, #0
     ff4:	012fff1e 	bxeq	lr
     ff8:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
     ffc:	e59f20fc 	ldr	r2, [pc, #252]	; 1100 <audio_read_rarc_ASM+0x14>
    1000:	e5820000 	str	r0, [r2]
    1004:	e3a00001 	mov	r0, #1
    1008:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    100c:	e12fff1e 	bx	lr

00001010 <audio_enable_read_fifo_clear_ASM>:
    1010:	e59f00ec 	ldr	r0, [pc, #236]	; 1104 <audio_read_rarc_ASM+0x18>
    1014:	e5901000 	ldr	r1, [r0]
    1018:	e3811004 	orr	r1, r1, #4
    101c:	e5801000 	str	r1, [r0]
    1020:	e12fff1e 	bx	lr

00001024 <audio_enable_write_fifo_clear_ASM>:
    1024:	e59f00d8 	ldr	r0, [pc, #216]	; 1104 <audio_read_rarc_ASM+0x18>
    1028:	e5901000 	ldr	r1, [r0]
    102c:	e3811008 	orr	r1, r1, #8
    1030:	e5801000 	str	r1, [r0]
    1034:	e12fff1e 	bx	lr

00001038 <audio_disable_read_fifo_clear_ASM>:
    1038:	e59f00c4 	ldr	r0, [pc, #196]	; 1104 <audio_read_rarc_ASM+0x18>
    103c:	e5901000 	ldr	r1, [r0]
    1040:	e3c11004 	bic	r1, r1, #4
    1044:	e5801000 	str	r1, [r0]
    1048:	e12fff1e 	bx	lr

0000104c <audio_disable_write_fifo_clear_ASM>:
    104c:	e59f00b0 	ldr	r0, [pc, #176]	; 1104 <audio_read_rarc_ASM+0x18>
    1050:	e5901000 	ldr	r1, [r0]
    1054:	e3c11008 	bic	r1, r1, #8
    1058:	e5801000 	str	r1, [r0]
    105c:	e12fff1e 	bx	lr

00001060 <audio_enable_read_int_ASM>:
    1060:	e59f009c 	ldr	r0, [pc, #156]	; 1104 <audio_read_rarc_ASM+0x18>
    1064:	e5901000 	ldr	r1, [r0]
    1068:	e3811001 	orr	r1, r1, #1
    106c:	e5801000 	str	r1, [r0]
    1070:	e12fff1e 	bx	lr

00001074 <audio_enable_write_int_ASM>:
    1074:	e59f0088 	ldr	r0, [pc, #136]	; 1104 <audio_read_rarc_ASM+0x18>
    1078:	e5901000 	ldr	r1, [r0]
    107c:	e3811002 	orr	r1, r1, #2
    1080:	e5801000 	str	r1, [r0]
    1084:	e12fff1e 	bx	lr

00001088 <audio_disable_read_int_ASM>:
    1088:	e59f0074 	ldr	r0, [pc, #116]	; 1104 <audio_read_rarc_ASM+0x18>
    108c:	e5901000 	ldr	r1, [r0]
    1090:	e3c11001 	bic	r1, r1, #1
    1094:	e5801000 	str	r1, [r0]
    1098:	e12fff1e 	bx	lr

0000109c <audio_disable_write_int_ASM>:
    109c:	e59f0060 	ldr	r0, [pc, #96]	; 1104 <audio_read_rarc_ASM+0x18>
    10a0:	e5901000 	ldr	r1, [r0]
    10a4:	e3c11002 	bic	r1, r1, #2
    10a8:	e5801000 	str	r1, [r0]
    10ac:	e12fff1e 	bx	lr

000010b0 <audio_read_wslc_ASM>:
    10b0:	e59f0050 	ldr	r0, [pc, #80]	; 1108 <audio_read_rarc_ASM+0x1c>
    10b4:	e5900000 	ldr	r0, [r0]
    10b8:	e1a00c20 	lsr	r0, r0, #24
    10bc:	e20000ff 	and	r0, r0, #255	; 0xff
    10c0:	e12fff1e 	bx	lr

000010c4 <audio_read_wsrc_ASM>:
    10c4:	e59f003c 	ldr	r0, [pc, #60]	; 1108 <audio_read_rarc_ASM+0x1c>
    10c8:	e5900000 	ldr	r0, [r0]
    10cc:	e1a00820 	lsr	r0, r0, #16
    10d0:	e20000ff 	and	r0, r0, #255	; 0xff
    10d4:	e12fff1e 	bx	lr

000010d8 <audio_read_ralc_ASM>:
    10d8:	e59f0028 	ldr	r0, [pc, #40]	; 1108 <audio_read_rarc_ASM+0x1c>
    10dc:	e5900000 	ldr	r0, [r0]
    10e0:	e1a00420 	lsr	r0, r0, #8
    10e4:	e20000ff 	and	r0, r0, #255	; 0xff
    10e8:	e12fff1e 	bx	lr

000010ec <audio_read_rarc_ASM>:
    10ec:	e59f0014 	ldr	r0, [pc, #20]	; 1108 <audio_read_rarc_ASM+0x1c>
    10f0:	e5900000 	ldr	r0, [r0]
    10f4:	e20000ff 	and	r0, r0, #255	; 0xff
    10f8:	e12fff1e 	bx	lr
    10fc:	ff203048 	.word	0xff203048
    1100:	ff20304c 	.word	0xff20304c
    1104:	ff203040 	.word	0xff203040
    1108:	ff203044 	.word	0xff203044

0000110c <__aeabi_frsub>:
    110c:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    1110:	ea000000 	b	1118 <__addsf3>

00001114 <__aeabi_fsub>:
    1114:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00001118 <__addsf3>:
    1118:	e1b02080 	lsls	r2, r0, #1
    111c:	11b03081 	lslsne	r3, r1, #1
    1120:	11320003 	teqne	r2, r3
    1124:	11f0cc42 	mvnsne	r12, r2, asr #24
    1128:	11f0cc43 	mvnsne	r12, r3, asr #24
    112c:	0a000047 	beq	1250 <__addsf3+0x138>
    1130:	e1a02c22 	lsr	r2, r2, #24
    1134:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    1138:	c0822003 	addgt	r2, r2, r3
    113c:	c0201001 	eorgt	r1, r0, r1
    1140:	c0210000 	eorgt	r0, r1, r0
    1144:	c0201001 	eorgt	r1, r0, r1
    1148:	b2633000 	rsblt	r3, r3, #0
    114c:	e3530019 	cmp	r3, #25
    1150:	812fff1e 	bxhi	lr
    1154:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    1158:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    115c:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    1160:	12600000 	rsbne	r0, r0, #0
    1164:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1168:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    116c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    1170:	12611000 	rsbne	r1, r1, #0
    1174:	e1320003 	teq	r2, r3
    1178:	0a00002e 	beq	1238 <__addsf3+0x120>
    117c:	e2422001 	sub	r2, r2, #1
    1180:	e0900351 	adds	r0, r0, r1, asr r3
    1184:	e2633020 	rsb	r3, r3, #32
    1188:	e1a01311 	lsl	r1, r1, r3
    118c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    1190:	5a000001 	bpl	119c <__addsf3+0x84>
    1194:	e2711000 	rsbs	r1, r1, #0
    1198:	e2e00000 	rsc	r0, r0, #0
    119c:	e3500502 	cmp	r0, #8388608	; 0x800000
    11a0:	3a00000b 	bcc	11d4 <__addsf3+0xbc>
    11a4:	e3500401 	cmp	r0, #16777216	; 0x1000000
    11a8:	3a000004 	bcc	11c0 <__addsf3+0xa8>
    11ac:	e1b000a0 	lsrs	r0, r0, #1
    11b0:	e1a01061 	rrx	r1, r1
    11b4:	e2822001 	add	r2, r2, #1
    11b8:	e35200fe 	cmp	r2, #254	; 0xfe
    11bc:	2a000038 	bcs	12a4 <__addsf3+0x18c>
    11c0:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    11c4:	e0a00b82 	adc	r0, r0, r2, lsl #23
    11c8:	03c00001 	biceq	r0, r0, #1
    11cc:	e1800003 	orr	r0, r0, r3
    11d0:	e12fff1e 	bx	lr
    11d4:	e1b01081 	lsls	r1, r1, #1
    11d8:	e0a00000 	adc	r0, r0, r0
    11dc:	e3100502 	tst	r0, #8388608	; 0x800000
    11e0:	e2422001 	sub	r2, r2, #1
    11e4:	1afffff5 	bne	11c0 <__addsf3+0xa8>
    11e8:	e1b0c620 	lsrs	r12, r0, #12
    11ec:	01a00600 	lsleq	r0, r0, #12
    11f0:	0242200c 	subeq	r2, r2, #12
    11f4:	e31008ff 	tst	r0, #16711680	; 0xff0000
    11f8:	01a00400 	lsleq	r0, r0, #8
    11fc:	02422008 	subeq	r2, r2, #8
    1200:	e310060f 	tst	r0, #15728640	; 0xf00000
    1204:	01a00200 	lsleq	r0, r0, #4
    1208:	02422004 	subeq	r2, r2, #4
    120c:	e3100503 	tst	r0, #12582912	; 0xc00000
    1210:	01a00100 	lsleq	r0, r0, #2
    1214:	02422002 	subeq	r2, r2, #2
    1218:	e3500502 	cmp	r0, #8388608	; 0x800000
    121c:	31a00080 	lslcc	r0, r0, #1
    1220:	e2d22000 	sbcs	r2, r2, #0
    1224:	a0800b82 	addge	r0, r0, r2, lsl #23
    1228:	b2622000 	rsblt	r2, r2, #0
    122c:	a1800003 	orrge	r0, r0, r3
    1230:	b1830230 	orrlt	r0, r3, r0, lsr r2
    1234:	e12fff1e 	bx	lr
    1238:	e3320000 	teq	r2, #0
    123c:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    1240:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    1244:	02822001 	addeq	r2, r2, #1
    1248:	12433001 	subne	r3, r3, #1
    124c:	eaffffca 	b	117c <__addsf3+0x64>
    1250:	e1a03081 	lsl	r3, r1, #1
    1254:	e1f0cc42 	mvns	r12, r2, asr #24
    1258:	11f0cc43 	mvnsne	r12, r3, asr #24
    125c:	0a000013 	beq	12b0 <__addsf3+0x198>
    1260:	e1320003 	teq	r2, r3
    1264:	0a000002 	beq	1274 <__addsf3+0x15c>
    1268:	e3320000 	teq	r2, #0
    126c:	01a00001 	moveq	r0, r1
    1270:	e12fff1e 	bx	lr
    1274:	e1300001 	teq	r0, r1
    1278:	13a00000 	movne	r0, #0
    127c:	112fff1e 	bxne	lr
    1280:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    1284:	1a000002 	bne	1294 <__addsf3+0x17c>
    1288:	e1b00080 	lsls	r0, r0, #1
    128c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    1290:	e12fff1e 	bx	lr
    1294:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    1298:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    129c:	312fff1e 	bxcc	lr
    12a0:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    12a4:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    12a8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    12ac:	e12fff1e 	bx	lr
    12b0:	e1f02c42 	mvns	r2, r2, asr #24
    12b4:	11a00001 	movne	r0, r1
    12b8:	01f03c43 	mvnseq	r3, r3, asr #24
    12bc:	11a01000 	movne	r1, r0
    12c0:	e1b02480 	lsls	r2, r0, #9
    12c4:	01b03481 	lslseq	r3, r1, #9
    12c8:	01300001 	teqeq	r0, r1
    12cc:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    12d0:	e12fff1e 	bx	lr

000012d4 <__aeabi_ui2f>:
    12d4:	e3a03000 	mov	r3, #0
    12d8:	ea000001 	b	12e4 <__aeabi_i2f+0x8>

000012dc <__aeabi_i2f>:
    12dc:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    12e0:	42600000 	rsbmi	r0, r0, #0
    12e4:	e1b0c000 	movs	r12, r0
    12e8:	012fff1e 	bxeq	lr
    12ec:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    12f0:	e1a01000 	mov	r1, r0
    12f4:	e3a00000 	mov	r0, #0
    12f8:	ea00000f 	b	133c <__aeabi_l2f+0x30>

000012fc <__aeabi_ul2f>:
    12fc:	e1902001 	orrs	r2, r0, r1
    1300:	012fff1e 	bxeq	lr
    1304:	e3a03000 	mov	r3, #0
    1308:	ea000005 	b	1324 <__aeabi_l2f+0x18>

0000130c <__aeabi_l2f>:
    130c:	e1902001 	orrs	r2, r0, r1
    1310:	012fff1e 	bxeq	lr
    1314:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    1318:	5a000001 	bpl	1324 <__aeabi_l2f+0x18>
    131c:	e2700000 	rsbs	r0, r0, #0
    1320:	e2e11000 	rsc	r1, r1, #0
    1324:	e1b0c001 	movs	r12, r1
    1328:	01a0c000 	moveq	r12, r0
    132c:	01a01000 	moveq	r1, r0
    1330:	03a00000 	moveq	r0, #0
    1334:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    1338:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    133c:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    1340:	e3a02017 	mov	r2, #23
    1344:	e35c0801 	cmp	r12, #65536	; 0x10000
    1348:	21a0c82c 	lsrcs	r12, r12, #16
    134c:	22422010 	subcs	r2, r2, #16
    1350:	e35c0c01 	cmp	r12, #256	; 0x100
    1354:	21a0c42c 	lsrcs	r12, r12, #8
    1358:	22422008 	subcs	r2, r2, #8
    135c:	e35c0010 	cmp	r12, #16
    1360:	21a0c22c 	lsrcs	r12, r12, #4
    1364:	22422004 	subcs	r2, r2, #4
    1368:	e35c0004 	cmp	r12, #4
    136c:	22422002 	subcs	r2, r2, #2
    1370:	304220ac 	subcc	r2, r2, r12, lsr #1
    1374:	e05221ac 	subs	r2, r2, r12, lsr #3
    1378:	e0433b82 	sub	r3, r3, r2, lsl #23
    137c:	ba000006 	blt	139c <__aeabi_l2f+0x90>
    1380:	e0833211 	add	r3, r3, r1, lsl r2
    1384:	e1a0c210 	lsl	r12, r0, r2
    1388:	e2622020 	rsb	r2, r2, #32
    138c:	e35c0102 	cmp	r12, #-2147483648	; 0x80000000
    1390:	e0a30230 	adc	r0, r3, r0, lsr r2
    1394:	03c00001 	biceq	r0, r0, #1
    1398:	e12fff1e 	bx	lr
    139c:	e2822020 	add	r2, r2, #32
    13a0:	e1a0c211 	lsl	r12, r1, r2
    13a4:	e2622020 	rsb	r2, r2, #32
    13a8:	e190008c 	orrs	r0, r0, r12, lsl #1
    13ac:	e0a30231 	adc	r0, r3, r1, lsr r2
    13b0:	01c00fac 	biceq	r0, r0, r12, lsr #31
    13b4:	e12fff1e 	bx	lr

000013b8 <__aeabi_fmul>:
    13b8:	e3a0c0ff 	mov	r12, #255	; 0xff
    13bc:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    13c0:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    13c4:	1132000c 	teqne	r2, r12
    13c8:	1133000c 	teqne	r3, r12
    13cc:	0a00003e 	beq	14cc <__aeabi_fmul+0x114>
    13d0:	e0822003 	add	r2, r2, r3
    13d4:	e020c001 	eor	r12, r0, r1
    13d8:	e1b00480 	lsls	r0, r0, #9
    13dc:	11b01481 	lslsne	r1, r1, #9
    13e0:	0a000010 	beq	1428 <__aeabi_fmul+0x70>
    13e4:	e3a03302 	mov	r3, #134217728	; 0x8000000
    13e8:	e18302a0 	orr	r0, r3, r0, lsr #5
    13ec:	e18312a1 	orr	r1, r3, r1, lsr #5
    13f0:	e0813190 	umull	r3, r1, r0, r1
    13f4:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    13f8:	e3510502 	cmp	r1, #8388608	; 0x800000
    13fc:	31a01081 	lslcc	r1, r1, #1
    1400:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    1404:	31a03083 	lslcc	r3, r3, #1
    1408:	e1800001 	orr	r0, r0, r1
    140c:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    1410:	e35200fd 	cmp	r2, #253	; 0xfd
    1414:	8a00000f 	bhi	1458 <__aeabi_fmul+0xa0>
    1418:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    141c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    1420:	03c00001 	biceq	r0, r0, #1
    1424:	e12fff1e 	bx	lr
    1428:	e3300000 	teq	r0, #0
    142c:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    1430:	01a01481 	lsleq	r1, r1, #9
    1434:	e18c04a0 	orr	r0, r12, r0, lsr #9
    1438:	e18004a1 	orr	r0, r0, r1, lsr #9
    143c:	e252207f 	subs	r2, r2, #127	; 0x7f
    1440:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    1444:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    1448:	c12fff1e 	bxgt	lr
    144c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1450:	e3a03000 	mov	r3, #0
    1454:	e2522001 	subs	r2, r2, #1
    1458:	ca000035 	bgt	1534 <__aeabi_fmul+0x17c>
    145c:	e3720019 	cmn	r2, #25
    1460:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    1464:	d12fff1e 	bxle	lr
    1468:	e2622000 	rsb	r2, r2, #0
    146c:	e1b01080 	lsls	r1, r0, #1
    1470:	e1a01231 	lsr	r1, r1, r2
    1474:	e2622020 	rsb	r2, r2, #32
    1478:	e1a0c210 	lsl	r12, r0, r2
    147c:	e1b00061 	rrxs	r0, r1
    1480:	e2a00000 	adc	r0, r0, #0
    1484:	e193308c 	orrs	r3, r3, r12, lsl #1
    1488:	01c00fac 	biceq	r0, r0, r12, lsr #31
    148c:	e12fff1e 	bx	lr
    1490:	e3320000 	teq	r2, #0
    1494:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    1498:	01a00080 	lsleq	r0, r0, #1
    149c:	03100502 	tsteq	r0, #8388608	; 0x800000
    14a0:	02422001 	subeq	r2, r2, #1
    14a4:	0afffffb 	beq	1498 <__aeabi_fmul+0xe0>
    14a8:	e180000c 	orr	r0, r0, r12
    14ac:	e3330000 	teq	r3, #0
    14b0:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    14b4:	01a01081 	lsleq	r1, r1, #1
    14b8:	03110502 	tsteq	r1, #8388608	; 0x800000
    14bc:	02433001 	subeq	r3, r3, #1
    14c0:	0afffffb 	beq	14b4 <__aeabi_fmul+0xfc>
    14c4:	e181100c 	orr	r1, r1, r12
    14c8:	eaffffc0 	b	13d0 <__aeabi_fmul+0x18>
    14cc:	e00c3ba1 	and	r3, r12, r1, lsr #23
    14d0:	e132000c 	teq	r2, r12
    14d4:	1133000c 	teqne	r3, r12
    14d8:	0a000005 	beq	14f4 <__aeabi_fmul+0x13c>
    14dc:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    14e0:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    14e4:	1affffe9 	bne	1490 <__aeabi_fmul+0xd8>
    14e8:	e0200001 	eor	r0, r0, r1
    14ec:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    14f0:	e12fff1e 	bx	lr
    14f4:	e3300000 	teq	r0, #0
    14f8:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    14fc:	01a00001 	moveq	r0, r1
    1500:	13310000 	teqne	r1, #0
    1504:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    1508:	0a00000d 	beq	1544 <__aeabi_fmul+0x18c>
    150c:	e132000c 	teq	r2, r12
    1510:	1a000001 	bne	151c <__aeabi_fmul+0x164>
    1514:	e1b02480 	lsls	r2, r0, #9
    1518:	1a000009 	bne	1544 <__aeabi_fmul+0x18c>
    151c:	e133000c 	teq	r3, r12
    1520:	1a000002 	bne	1530 <__aeabi_fmul+0x178>
    1524:	e1b03481 	lsls	r3, r1, #9
    1528:	11a00001 	movne	r0, r1
    152c:	1a000004 	bne	1544 <__aeabi_fmul+0x18c>
    1530:	e0200001 	eor	r0, r0, r1
    1534:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    1538:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    153c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    1540:	e12fff1e 	bx	lr
    1544:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    1548:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    154c:	e12fff1e 	bx	lr

00001550 <__aeabi_fdiv>:
    1550:	e3a0c0ff 	mov	r12, #255	; 0xff
    1554:	e01c2ba0 	ands	r2, r12, r0, lsr #23
    1558:	101c3ba1 	andsne	r3, r12, r1, lsr #23
    155c:	1132000c 	teqne	r2, r12
    1560:	1133000c 	teqne	r3, r12
    1564:	0a00003a 	beq	1654 <__aeabi_fdiv+0x104>
    1568:	e0422003 	sub	r2, r2, r3
    156c:	e020c001 	eor	r12, r0, r1
    1570:	e1b01481 	lsls	r1, r1, #9
    1574:	e1a00480 	lsl	r0, r0, #9
    1578:	0a00001c 	beq	15f0 <__aeabi_fdiv+0xa0>
    157c:	e3a03201 	mov	r3, #268435456	; 0x10000000
    1580:	e1831221 	orr	r1, r3, r1, lsr #4
    1584:	e1833220 	orr	r3, r3, r0, lsr #4
    1588:	e20c0102 	and	r0, r12, #-2147483648	; 0x80000000
    158c:	e1530001 	cmp	r3, r1
    1590:	31a03083 	lslcc	r3, r3, #1
    1594:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    1598:	e3a0c502 	mov	r12, #8388608	; 0x800000
    159c:	e1530001 	cmp	r3, r1
    15a0:	20433001 	subcs	r3, r3, r1
    15a4:	2180000c 	orrcs	r0, r0, r12
    15a8:	e15300a1 	cmp	r3, r1, lsr #1
    15ac:	204330a1 	subcs	r3, r3, r1, lsr #1
    15b0:	218000ac 	orrcs	r0, r0, r12, lsr #1
    15b4:	e1530121 	cmp	r3, r1, lsr #2
    15b8:	20433121 	subcs	r3, r3, r1, lsr #2
    15bc:	2180012c 	orrcs	r0, r0, r12, lsr #2
    15c0:	e15301a1 	cmp	r3, r1, lsr #3
    15c4:	204331a1 	subcs	r3, r3, r1, lsr #3
    15c8:	218001ac 	orrcs	r0, r0, r12, lsr #3
    15cc:	e1b03203 	lsls	r3, r3, #4
    15d0:	11b0c22c 	lsrsne	r12, r12, #4
    15d4:	1afffff0 	bne	159c <__aeabi_fdiv+0x4c>
    15d8:	e35200fd 	cmp	r2, #253	; 0xfd
    15dc:	8affff9d 	bhi	1458 <__aeabi_fmul+0xa0>
    15e0:	e1530001 	cmp	r3, r1
    15e4:	e0a00b82 	adc	r0, r0, r2, lsl #23
    15e8:	03c00001 	biceq	r0, r0, #1
    15ec:	e12fff1e 	bx	lr
    15f0:	e20cc102 	and	r12, r12, #-2147483648	; 0x80000000
    15f4:	e18c04a0 	orr	r0, r12, r0, lsr #9
    15f8:	e292207f 	adds	r2, r2, #127	; 0x7f
    15fc:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    1600:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    1604:	c12fff1e 	bxgt	lr
    1608:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    160c:	e3a03000 	mov	r3, #0
    1610:	e2522001 	subs	r2, r2, #1
    1614:	eaffff8f 	b	1458 <__aeabi_fmul+0xa0>
    1618:	e3320000 	teq	r2, #0
    161c:	e200c102 	and	r12, r0, #-2147483648	; 0x80000000
    1620:	01a00080 	lsleq	r0, r0, #1
    1624:	03100502 	tsteq	r0, #8388608	; 0x800000
    1628:	02422001 	subeq	r2, r2, #1
    162c:	0afffffb 	beq	1620 <__aeabi_fdiv+0xd0>
    1630:	e180000c 	orr	r0, r0, r12
    1634:	e3330000 	teq	r3, #0
    1638:	e201c102 	and	r12, r1, #-2147483648	; 0x80000000
    163c:	01a01081 	lsleq	r1, r1, #1
    1640:	03110502 	tsteq	r1, #8388608	; 0x800000
    1644:	02433001 	subeq	r3, r3, #1
    1648:	0afffffb 	beq	163c <__aeabi_fdiv+0xec>
    164c:	e181100c 	orr	r1, r1, r12
    1650:	eaffffc4 	b	1568 <__aeabi_fdiv+0x18>
    1654:	e00c3ba1 	and	r3, r12, r1, lsr #23
    1658:	e132000c 	teq	r2, r12
    165c:	1a000005 	bne	1678 <__aeabi_fdiv+0x128>
    1660:	e1b02480 	lsls	r2, r0, #9
    1664:	1affffb6 	bne	1544 <__aeabi_fmul+0x18c>
    1668:	e133000c 	teq	r3, r12
    166c:	1affffaf 	bne	1530 <__aeabi_fmul+0x178>
    1670:	e1a00001 	mov	r0, r1
    1674:	eaffffb2 	b	1544 <__aeabi_fmul+0x18c>
    1678:	e133000c 	teq	r3, r12
    167c:	1a000003 	bne	1690 <__aeabi_fdiv+0x140>
    1680:	e1b03481 	lsls	r3, r1, #9
    1684:	0affff97 	beq	14e8 <__aeabi_fmul+0x130>
    1688:	e1a00001 	mov	r0, r1
    168c:	eaffffac 	b	1544 <__aeabi_fmul+0x18c>
    1690:	e3d0c102 	bics	r12, r0, #-2147483648	; 0x80000000
    1694:	13d1c102 	bicsne	r12, r1, #-2147483648	; 0x80000000
    1698:	1affffde 	bne	1618 <__aeabi_fdiv+0xc8>
    169c:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    16a0:	1affffa2 	bne	1530 <__aeabi_fmul+0x178>
    16a4:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    16a8:	1affff8e 	bne	14e8 <__aeabi_fmul+0x130>
    16ac:	eaffffa4 	b	1544 <__aeabi_fmul+0x18c>

000016b0 <__gesf2>:
    16b0:	e3e0c000 	mvn	r12, #0
    16b4:	ea000002 	b	16c4 <__cmpsf2+0x4>

000016b8 <__lesf2>:
    16b8:	e3a0c001 	mov	r12, #1
    16bc:	ea000000 	b	16c4 <__cmpsf2+0x4>

000016c0 <__cmpsf2>:
    16c0:	e3a0c001 	mov	r12, #1
    16c4:	e52dc004 	push	{r12}		; (str r12, [sp, #-4]!)
    16c8:	e1a02080 	lsl	r2, r0, #1
    16cc:	e1a03081 	lsl	r3, r1, #1
    16d0:	e1f0cc42 	mvns	r12, r2, asr #24
    16d4:	11f0cc43 	mvnsne	r12, r3, asr #24
    16d8:	0a000007 	beq	16fc <__cmpsf2+0x3c>
    16dc:	e28dd004 	add	sp, sp, #4
    16e0:	e192c0a3 	orrs	r12, r2, r3, lsr #1
    16e4:	11300001 	teqne	r0, r1
    16e8:	50520003 	subspl	r0, r2, r3
    16ec:	81a00fc1 	asrhi	r0, r1, #31
    16f0:	31e00fc1 	mvncc	r0, r1, asr #31
    16f4:	13800001 	orrne	r0, r0, #1
    16f8:	e12fff1e 	bx	lr
    16fc:	e1f0cc42 	mvns	r12, r2, asr #24
    1700:	1a000001 	bne	170c <__cmpsf2+0x4c>
    1704:	e1b0c480 	lsls	r12, r0, #9
    1708:	1a000003 	bne	171c <__cmpsf2+0x5c>
    170c:	e1f0cc43 	mvns	r12, r3, asr #24
    1710:	1afffff1 	bne	16dc <__cmpsf2+0x1c>
    1714:	e1b0c481 	lsls	r12, r1, #9
    1718:	0affffef 	beq	16dc <__cmpsf2+0x1c>
    171c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    1720:	e12fff1e 	bx	lr

00001724 <__aeabi_cfrcmple>:
    1724:	e1a0c000 	mov	r12, r0
    1728:	e1a00001 	mov	r0, r1
    172c:	e1a0100c 	mov	r1, r12
    1730:	eaffffff 	b	1734 <__aeabi_cfcmpeq>

00001734 <__aeabi_cfcmpeq>:
    1734:	e92d400f 	push	{r0, r1, r2, r3, lr}
    1738:	ebffffe0 	bl	16c0 <__cmpsf2>
    173c:	e3500000 	cmp	r0, #0
    1740:	43700000 	cmnmi	r0, #0
    1744:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    1748:	e12fff1e 	bx	lr

0000174c <__aeabi_fcmpeq>:
    174c:	e52de008 	str	lr, [sp, #-8]!
    1750:	ebfffff7 	bl	1734 <__aeabi_cfcmpeq>
    1754:	03a00001 	moveq	r0, #1
    1758:	13a00000 	movne	r0, #0
    175c:	e49de008 	ldr	lr, [sp], #8
    1760:	e12fff1e 	bx	lr

00001764 <__aeabi_fcmplt>:
    1764:	e52de008 	str	lr, [sp, #-8]!
    1768:	ebfffff1 	bl	1734 <__aeabi_cfcmpeq>
    176c:	33a00001 	movcc	r0, #1
    1770:	23a00000 	movcs	r0, #0
    1774:	e49de008 	ldr	lr, [sp], #8
    1778:	e12fff1e 	bx	lr

0000177c <__aeabi_fcmple>:
    177c:	e52de008 	str	lr, [sp, #-8]!
    1780:	ebffffeb 	bl	1734 <__aeabi_cfcmpeq>
    1784:	93a00001 	movls	r0, #1
    1788:	83a00000 	movhi	r0, #0
    178c:	e49de008 	ldr	lr, [sp], #8
    1790:	e12fff1e 	bx	lr

00001794 <__aeabi_fcmpge>:
    1794:	e52de008 	str	lr, [sp, #-8]!
    1798:	ebffffe1 	bl	1724 <__aeabi_cfrcmple>
    179c:	93a00001 	movls	r0, #1
    17a0:	83a00000 	movhi	r0, #0
    17a4:	e49de008 	ldr	lr, [sp], #8
    17a8:	e12fff1e 	bx	lr

000017ac <__aeabi_fcmpgt>:
    17ac:	e52de008 	str	lr, [sp, #-8]!
    17b0:	ebffffdb 	bl	1724 <__aeabi_cfrcmple>
    17b4:	33a00001 	movcc	r0, #1
    17b8:	23a00000 	movcs	r0, #0
    17bc:	e49de008 	ldr	lr, [sp], #8
    17c0:	e12fff1e 	bx	lr

000017c4 <__aeabi_f2iz>:
    17c4:	e1a02080 	lsl	r2, r0, #1
    17c8:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    17cc:	3a000008 	bcc	17f4 <__aeabi_f2iz+0x30>
    17d0:	e3a0309e 	mov	r3, #158	; 0x9e
    17d4:	e0532c22 	subs	r2, r3, r2, lsr #24
    17d8:	9a000007 	bls	17fc <__aeabi_f2iz+0x38>
    17dc:	e1a03400 	lsl	r3, r0, #8
    17e0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    17e4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    17e8:	e1a00233 	lsr	r0, r3, r2
    17ec:	12600000 	rsbne	r0, r0, #0
    17f0:	e12fff1e 	bx	lr
    17f4:	e3a00000 	mov	r0, #0
    17f8:	e12fff1e 	bx	lr
    17fc:	e3720061 	cmn	r2, #97	; 0x61
    1800:	1a000001 	bne	180c <__aeabi_f2iz+0x48>
    1804:	e1b02480 	lsls	r2, r0, #9
    1808:	1a000002 	bne	1818 <__aeabi_f2iz+0x54>
    180c:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    1810:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    1814:	e12fff1e 	bx	lr
    1818:	e3a00000 	mov	r0, #0
    181c:	e12fff1e 	bx	lr

00001820 <atexit>:
    1820:	e1a01000 	mov	r1, r0
    1824:	e3a00000 	mov	r0, #0
    1828:	e92d4008 	push	{r3, lr}
    182c:	e1a02000 	mov	r2, r0
    1830:	e1a03000 	mov	r3, r0
    1834:	eb00000e 	bl	1874 <__register_exitproc>
    1838:	e8bd4008 	pop	{r3, lr}
    183c:	e12fff1e 	bx	lr

00001840 <exit>:
    1840:	e92d4008 	push	{r3, lr}
    1844:	e3a01000 	mov	r1, #0
    1848:	e1a04000 	mov	r4, r0
    184c:	eb000045 	bl	1968 <__call_exitprocs>
    1850:	e59f3018 	ldr	r3, [pc, #24]	; 1870 <exit+0x30>
    1854:	e5930000 	ldr	r0, [r3]
    1858:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    185c:	e3530000 	cmp	r3, #0
    1860:	11a0e00f 	movne	lr, pc
    1864:	112fff13 	bxne	r3
    1868:	e1a00004 	mov	r0, r4
    186c:	eb0000c9 	bl	1b98 <_exit>
    1870:	00001c40 	.word	0x00001c40

00001874 <__register_exitproc>:
    1874:	e59fc0e4 	ldr	r12, [pc, #228]	; 1960 <__register_exitproc+0xec>
    1878:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    187c:	e59c4000 	ldr	r4, [r12]
    1880:	e594c148 	ldr	r12, [r4, #328]	; 0x148
    1884:	e35c0000 	cmp	r12, #0
    1888:	0284cf53 	addeq	r12, r4, #332	; 0x14c
    188c:	e59c5004 	ldr	r5, [r12, #4]
    1890:	0584c148 	streq	r12, [r4, #328]	; 0x148
    1894:	e355001f 	cmp	r5, #31
    1898:	e24dd010 	sub	sp, sp, #16
    189c:	e1a06000 	mov	r6, r0
    18a0:	da000015 	ble	18fc <__register_exitproc+0x88>
    18a4:	e59f00b8 	ldr	r0, [pc, #184]	; 1964 <__register_exitproc+0xf0>
    18a8:	e3500000 	cmp	r0, #0
    18ac:	1a000001 	bne	18b8 <__register_exitproc+0x44>
    18b0:	e3e00000 	mvn	r0, #0
    18b4:	ea000018 	b	191c <__register_exitproc+0xa8>
    18b8:	e3a00e19 	mov	r0, #400	; 0x190
    18bc:	e58d100c 	str	r1, [sp, #12]
    18c0:	e58d2008 	str	r2, [sp, #8]
    18c4:	e58d3004 	str	r3, [sp, #4]
    18c8:	e320f000 	nop	{0}
    18cc:	e250c000 	subs	r12, r0, #0
    18d0:	e59d100c 	ldr	r1, [sp, #12]
    18d4:	e59d2008 	ldr	r2, [sp, #8]
    18d8:	e59d3004 	ldr	r3, [sp, #4]
    18dc:	0afffff3 	beq	18b0 <__register_exitproc+0x3c>
    18e0:	e5945148 	ldr	r5, [r4, #328]	; 0x148
    18e4:	e3a00000 	mov	r0, #0
    18e8:	e58c0004 	str	r0, [r12, #4]
    18ec:	e58c5000 	str	r5, [r12]
    18f0:	e584c148 	str	r12, [r4, #328]	; 0x148
    18f4:	e58c0188 	str	r0, [r12, #392]	; 0x188
    18f8:	e58c018c 	str	r0, [r12, #396]	; 0x18c
    18fc:	e3560000 	cmp	r6, #0
    1900:	e59c4004 	ldr	r4, [r12, #4]
    1904:	1a000007 	bne	1928 <__register_exitproc+0xb4>
    1908:	e2843002 	add	r3, r4, #2
    190c:	e2844001 	add	r4, r4, #1
    1910:	e78c1103 	str	r1, [r12, r3, lsl #2]
    1914:	e58c4004 	str	r4, [r12, #4]
    1918:	e3a00000 	mov	r0, #0
    191c:	e28dd010 	add	sp, sp, #16
    1920:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
    1924:	e12fff1e 	bx	lr
    1928:	e3a00001 	mov	r0, #1
    192c:	e1a00410 	lsl	r0, r0, r4
    1930:	e08c8104 	add	r8, r12, r4, lsl #2
    1934:	e3560002 	cmp	r6, #2
    1938:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
    193c:	e5883108 	str	r3, [r8, #264]	; 0x108
    1940:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
    1944:	e1877000 	orr	r7, r7, r0
    1948:	01830000 	orreq	r0, r3, r0
    194c:	e1a05008 	mov	r5, r8
    1950:	e5882088 	str	r2, [r8, #136]	; 0x88
    1954:	e58c7188 	str	r7, [r12, #392]	; 0x188
    1958:	058c018c 	streq	r0, [r12, #396]	; 0x18c
    195c:	eaffffe9 	b	1908 <__register_exitproc+0x94>
    1960:	00001c40 	.word	0x00001c40
    1964:	00000000 	.word	0x00000000

00001968 <__call_exitprocs>:
    1968:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    196c:	e59f3168 	ldr	r3, [pc, #360]	; 1adc <__call_exitprocs+0x174>
    1970:	e5933000 	ldr	r3, [r3]
    1974:	e24dd014 	sub	sp, sp, #20
    1978:	e58d3004 	str	r3, [sp, #4]
    197c:	e2833f52 	add	r3, r3, #328	; 0x148
    1980:	e58d0008 	str	r0, [sp, #8]
    1984:	e58d300c 	str	r3, [sp, #12]
    1988:	e1a07001 	mov	r7, r1
    198c:	e3a08001 	mov	r8, #1
    1990:	e59d3004 	ldr	r3, [sp, #4]
    1994:	e5936148 	ldr	r6, [r3, #328]	; 0x148
    1998:	e3560000 	cmp	r6, #0
    199c:	e59db00c 	ldr	r11, [sp, #12]
    19a0:	0a000033 	beq	1a74 <__call_exitprocs+0x10c>
    19a4:	e5965004 	ldr	r5, [r6, #4]
    19a8:	e2554001 	subs	r4, r5, #1
    19ac:	5286a088 	addpl	r10, r6, #136	; 0x88
    19b0:	5285501f 	addpl	r5, r5, #31
    19b4:	508a5105 	addpl	r5, r10, r5, lsl #2
    19b8:	5a000007 	bpl	19dc <__call_exitprocs+0x74>
    19bc:	ea000029 	b	1a68 <__call_exitprocs+0x100>
    19c0:	e5953000 	ldr	r3, [r5]
    19c4:	e1530007 	cmp	r3, r7
    19c8:	0a000005 	beq	19e4 <__call_exitprocs+0x7c>
    19cc:	e2444001 	sub	r4, r4, #1
    19d0:	e3740001 	cmn	r4, #1
    19d4:	e2455004 	sub	r5, r5, #4
    19d8:	0a000022 	beq	1a68 <__call_exitprocs+0x100>
    19dc:	e3570000 	cmp	r7, #0
    19e0:	1afffff6 	bne	19c0 <__call_exitprocs+0x58>
    19e4:	e5963004 	ldr	r3, [r6, #4]
    19e8:	e06a2005 	rsb	r2, r10, r5
    19ec:	e2433001 	sub	r3, r3, #1
    19f0:	e0862002 	add	r2, r6, r2
    19f4:	e1530004 	cmp	r3, r4
    19f8:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
    19fc:	13a01000 	movne	r1, #0
    1a00:	05864004 	streq	r4, [r6, #4]
    1a04:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
    1a08:	e3530000 	cmp	r3, #0
    1a0c:	0affffee 	beq	19cc <__call_exitprocs+0x64>
    1a10:	e1a02418 	lsl	r2, r8, r4
    1a14:	e5961188 	ldr	r1, [r6, #392]	; 0x188
    1a18:	e1120001 	tst	r2, r1
    1a1c:	e5969004 	ldr	r9, [r6, #4]
    1a20:	0a000016 	beq	1a80 <__call_exitprocs+0x118>
    1a24:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
    1a28:	e1120001 	tst	r2, r1
    1a2c:	1a000016 	bne	1a8c <__call_exitprocs+0x124>
    1a30:	e59d0008 	ldr	r0, [sp, #8]
    1a34:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
    1a38:	e1a0e00f 	mov	lr, pc
    1a3c:	e12fff13 	bx	r3
    1a40:	e5963004 	ldr	r3, [r6, #4]
    1a44:	e1530009 	cmp	r3, r9
    1a48:	1affffd0 	bne	1990 <__call_exitprocs+0x28>
    1a4c:	e59b3000 	ldr	r3, [r11]
    1a50:	e1530006 	cmp	r3, r6
    1a54:	1affffcd 	bne	1990 <__call_exitprocs+0x28>
    1a58:	e2444001 	sub	r4, r4, #1
    1a5c:	e3740001 	cmn	r4, #1
    1a60:	e2455004 	sub	r5, r5, #4
    1a64:	1affffdc 	bne	19dc <__call_exitprocs+0x74>
    1a68:	e59f1070 	ldr	r1, [pc, #112]	; 1ae0 <__call_exitprocs+0x178>
    1a6c:	e3510000 	cmp	r1, #0
    1a70:	1a000009 	bne	1a9c <__call_exitprocs+0x134>
    1a74:	e28dd014 	add	sp, sp, #20
    1a78:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1a7c:	e12fff1e 	bx	lr
    1a80:	e1a0e00f 	mov	lr, pc
    1a84:	e12fff13 	bx	r3
    1a88:	eaffffec 	b	1a40 <__call_exitprocs+0xd8>
    1a8c:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    1a90:	e1a0e00f 	mov	lr, pc
    1a94:	e12fff13 	bx	r3
    1a98:	eaffffe8 	b	1a40 <__call_exitprocs+0xd8>
    1a9c:	e5963004 	ldr	r3, [r6, #4]
    1aa0:	e3530000 	cmp	r3, #0
    1aa4:	e5963000 	ldr	r3, [r6]
    1aa8:	1a000008 	bne	1ad0 <__call_exitprocs+0x168>
    1aac:	e3530000 	cmp	r3, #0
    1ab0:	0a000006 	beq	1ad0 <__call_exitprocs+0x168>
    1ab4:	e1a00006 	mov	r0, r6
    1ab8:	e58b3000 	str	r3, [r11]
    1abc:	e320f000 	nop	{0}
    1ac0:	e59b6000 	ldr	r6, [r11]
    1ac4:	e3560000 	cmp	r6, #0
    1ac8:	1affffb5 	bne	19a4 <__call_exitprocs+0x3c>
    1acc:	eaffffe8 	b	1a74 <__call_exitprocs+0x10c>
    1ad0:	e1a0b006 	mov	r11, r6
    1ad4:	e1a06003 	mov	r6, r3
    1ad8:	eafffff9 	b	1ac4 <__call_exitprocs+0x15c>
    1adc:	00001c40 	.word	0x00001c40
    1ae0:	00000000 	.word	0x00000000

00001ae4 <register_fini>:
    1ae4:	e92d4008 	push	{r3, lr}
    1ae8:	e59f3010 	ldr	r3, [pc, #16]	; 1b00 <register_fini+0x1c>
    1aec:	e3530000 	cmp	r3, #0
    1af0:	159f000c 	ldrne	r0, [pc, #12]	; 1b04 <register_fini+0x20>
    1af4:	1bffff49 	blne	1820 <atexit>
    1af8:	e8bd4008 	pop	{r3, lr}
    1afc:	e12fff1e 	bx	lr
    1b00:	00001c68 	.word	0x00001c68
    1b04:	00001b08 	.word	0x00001b08

00001b08 <__libc_fini_array>:
    1b08:	e92d4038 	push	{r3, r4, r5, lr}
    1b0c:	e59f5030 	ldr	r5, [pc, #48]	; 1b44 <__libc_fini_array+0x3c>
    1b10:	e59f4030 	ldr	r4, [pc, #48]	; 1b48 <__libc_fini_array+0x40>
    1b14:	e0654004 	rsb	r4, r5, r4
    1b18:	e1b04144 	asrs	r4, r4, #2
    1b1c:	10855104 	addne	r5, r5, r4, lsl #2
    1b20:	0a000004 	beq	1b38 <__libc_fini_array+0x30>
    1b24:	e5353004 	ldr	r3, [r5, #-4]!
    1b28:	e1a0e00f 	mov	lr, pc
    1b2c:	e12fff13 	bx	r3
    1b30:	e2544001 	subs	r4, r4, #1
    1b34:	1afffffa 	bne	1b24 <__libc_fini_array+0x1c>
    1b38:	eb00004a 	bl	1c68 <__libc_fini>
    1b3c:	e8bd4038 	pop	{r3, r4, r5, lr}
    1b40:	e12fff1e 	bx	lr
    1b44:	00001c80 	.word	0x00001c80
    1b48:	00001c84 	.word	0x00001c84

00001b4c <__cs3_premain>:
    1b4c:	e92d4008 	push	{r3, lr}
    1b50:	eb000017 	bl	1bb4 <__libc_init_array>
    1b54:	e59f3030 	ldr	r3, [pc, #48]	; 1b8c <__cs3_premain+0x40>
    1b58:	e3530000 	cmp	r3, #0
    1b5c:	15930000 	ldrne	r0, [r3]
    1b60:	01a00003 	moveq	r0, r3
    1b64:	e59f3024 	ldr	r3, [pc, #36]	; 1b90 <__cs3_premain+0x44>
    1b68:	e3530000 	cmp	r3, #0
    1b6c:	15931000 	ldrne	r1, [r3]
    1b70:	01a01003 	moveq	r1, r3
    1b74:	e3a02000 	mov	r2, #0
    1b78:	ebfffa30 	bl	440 <main>
    1b7c:	e59f3010 	ldr	r3, [pc, #16]	; 1b94 <__cs3_premain+0x48>
    1b80:	e3530000 	cmp	r3, #0
    1b84:	1bffff2d 	blne	1840 <exit>
    1b88:	eafffffe 	b	1b88 <__cs3_premain+0x3c>
	...
    1b94:	00001840 	.word	0x00001840

00001b98 <_exit>:
    1b98:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1b9c:	e3a00018 	mov	r0, #24
    1ba0:	e59f1004 	ldr	r1, [pc, #4]	; 1bac <_exit+0x14>
    1ba4:	ef123456 	svc	0x00123456
    1ba8:	eafffffe 	b	1ba8 <_exit+0x10>
    1bac:	00020026 	.word	0x00020026

00001bb0 <__cs3_isr_interrupt>:
    1bb0:	eafffffe 	b	1bb0 <__cs3_isr_interrupt>

00001bb4 <__libc_init_array>:
    1bb4:	e92d4070 	push	{r4, r5, r6, lr}
    1bb8:	e59f506c 	ldr	r5, [pc, #108]	; 1c2c <__libc_init_array+0x78>
    1bbc:	e59f606c 	ldr	r6, [pc, #108]	; 1c30 <__libc_init_array+0x7c>
    1bc0:	e0656006 	rsb	r6, r5, r6
    1bc4:	e1b06146 	asrs	r6, r6, #2
    1bc8:	12455004 	subne	r5, r5, #4
    1bcc:	13a04000 	movne	r4, #0
    1bd0:	0a000005 	beq	1bec <__libc_init_array+0x38>
    1bd4:	e5b53004 	ldr	r3, [r5, #4]!
    1bd8:	e2844001 	add	r4, r4, #1
    1bdc:	e1a0e00f 	mov	lr, pc
    1be0:	e12fff13 	bx	r3
    1be4:	e1560004 	cmp	r6, r4
    1be8:	1afffff9 	bne	1bd4 <__libc_init_array+0x20>
    1bec:	e59f5040 	ldr	r5, [pc, #64]	; 1c34 <__libc_init_array+0x80>
    1bf0:	e59f6040 	ldr	r6, [pc, #64]	; 1c38 <__libc_init_array+0x84>
    1bf4:	e0656006 	rsb	r6, r5, r6
    1bf8:	eb000012 	bl	1c48 <_init>
    1bfc:	e1b06146 	asrs	r6, r6, #2
    1c00:	12455004 	subne	r5, r5, #4
    1c04:	13a04000 	movne	r4, #0
    1c08:	0a000005 	beq	1c24 <__libc_init_array+0x70>
    1c0c:	e5b53004 	ldr	r3, [r5, #4]!
    1c10:	e2844001 	add	r4, r4, #1
    1c14:	e1a0e00f 	mov	lr, pc
    1c18:	e12fff13 	bx	r3
    1c1c:	e1560004 	cmp	r6, r4
    1c20:	1afffff9 	bne	1c0c <__libc_init_array+0x58>
    1c24:	e8bd4070 	pop	{r4, r5, r6, lr}
    1c28:	e12fff1e 	bx	lr
    1c2c:	00001c60 	.word	0x00001c60
    1c30:	00001c60 	.word	0x00001c60
    1c34:	00001c60 	.word	0x00001c60
    1c38:	00001c68 	.word	0x00001c68

Disassembly of section .rodata:

00001c40 <_global_impure_ptr>:
    1c40:	00030aa8 00000043                       ....C...

00001c48 <_init>:
    1c48:	e1a0c00d 	mov	r12, sp
    1c4c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1c50:	e24cb004 	sub	r11, r12, #4
    1c54:	e24bd028 	sub	sp, r11, #40	; 0x28
    1c58:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1c5c:	e12fff1e 	bx	lr

00001c60 <__init_array_start>:
    1c60:	00001ae4 	.word	0x00001ae4

00001c64 <__frame_dummy_init_array_entry>:
    1c64:	00000208                                ....

00001c68 <__libc_fini>:
    1c68:	e1a0c00d 	mov	r12, sp
    1c6c:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1c70:	e24cb004 	sub	r11, r12, #4
    1c74:	e24bd028 	sub	sp, r11, #40	; 0x28
    1c78:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1c7c:	e12fff1e 	bx	lr

00001c80 <__fini_array_start>:
    1c80:	000001c4 	.word	0x000001c4

00001c84 <__cs3_regions>:
    1c84:	00000000 	.word	0x00000000
    1c88:	00000040 	.word	0x00000040
    1c8c:	00000040 	.word	0x00000040
    1c90:	00030e98 	.word	0x00030e98
    1c94:	00000020 	.word	0x00000020
