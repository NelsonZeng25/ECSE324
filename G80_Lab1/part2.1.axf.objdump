
P:/ECSE324/G80_Lab1/part2.1.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
         .text
		 .global _start
			// R4 = [#, 7, 5,3,2,4,1]
_start:
 			LDR R4, =RESULT			//points to result
   0:	e59f407c 	ldr	r4, [pc, #124]	; 84 <NUMBERS+0x1c>
			LDR R2, [R4, #4]   		// holds the length of list
   4:	e5942004 	ldr	r2, [r4, #4]
			ADD R3, R4, #8			// points to the first number
   8:	e2843008 	add	r3, r4, #8

0000000c <LOOP>:
			       					// R0 holds the first number

LOOP:  		SUBS R2, R2, #1     	// counter
   c:	e2522001 	subs	r2, r2, #1
			BEQ DONE					// branch to done when loop ends
  10:	0a00000e 	beq	50 <DONE>
			LDR R0, [R3]			// R0 holds the first number
  14:	e5930000 	ldr	r0, [r3]
			ADD R3, R3, #4			// points to second number 			
  18:	e2833004 	add	r3, r3, #4
			LDR R1, [R3]			// R1 holds the second number
  1c:	e5931000 	ldr	r1, [r3]
			CMP R0, R1			
  20:	e1500001 	cmp	r0, r1
			BGT SWAP           		// If not, branch to min
  24:	ca000000 	bgt	2c <SWAP>
			//MOV R0,R1 			// else unpdate current max
			B LOOP				
  28:	eafffff7 	b	c <LOOP>

0000002c <SWAP>:

SWAP:		ADD R7, R0, #0			//R7 holds smaller number
  2c:	e2807000 	add	r7, r0, #0
			ADD R8, R1, #0			// R8 holds the bigger number
  30:	e2818000 	add	r8, r1, #0
			STR R7, [R3]			// Put the bigger number in R7
  34:	e5837000 	str	r7, [r3]
			SUB R3, R3, #4			// P3 points to the previous number
  38:	e2433004 	sub	r3, r3, #4
			STR R8, [R3]			// R8 now holds the smaller number
  3c:	e5838000 	str	r8, [r3]
			ADD R3, R3, #4			// R3 points to current number
  40:	e2833004 	add	r3, r3, #4
			LDR R2, [R4, #4]		//reset R2 to hold the number of numbers in the list
  44:	e5942004 	ldr	r2, [r4, #4]
			ADD R3, R4, #8 			//reset R3 so it holds the first number in the list
  48:	e2843008 	add	r3, r4, #8
			B LOOP				
  4c:	eaffffee 	b	c <LOOP>

00000050 <DONE>:

DONE:		LDR R5, [R3]
  50:	e5935000 	ldr	r5, [r3]
			LDR R6, [R4, #8]
  54:	e5946008 	ldr	r6, [r4, #8]
			SUB R4, R5, R6
  58:	e0454006 	sub	r4, r5, r6

0000005c <END>:

END: 		B END					//infinite loop
  5c:	eafffffe 	b	5c <END>

00000060 <RESULT>:
  60:	00000000 	.word	0x00000000

00000064 <N>:
  64:	00000007 	.word	0x00000007

00000068 <NUMBERS>:
  68:	00000004 	.word	0x00000004
  6c:	00000005 	.word	0x00000005
  70:	00000003 	.word	0x00000003
  74:	00000006 	.word	0x00000006
  78:	00000001 	.word	0x00000001
  7c:	00000008 	.word	0x00000008
  80:	00000002 	.word	0x00000002
  84:	00000060 	.word	0x00000060
