
P:/ECSE324/G80_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	1c 0d 00 00 28 0d 00 00 34 0d 00 00 40 0d 00 00     ....(...4...@...
  30:	4c 0d 00 00 5c 11 00 00 c4 0b 00 00 58 0d 00 00     L...\.......X...

Disassembly of section .text:

00000040 <__cs3_reset_generic>:
      40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
      44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
      48:	e3560000 	cmp	r6, #0
      4c:	e92d4080 	push	{r7, lr}
      50:	e2466001 	sub	r6, r6, #1
      54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
      58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
      5c:	e3a00000 	mov	r0, #0
      60:	e3a01000 	mov	r1, #0
      64:	e515200c 	ldr	r2, [r5, #-12]
      68:	e515e010 	ldr	lr, [r5, #-16]
      6c:	e5154008 	ldr	r4, [r5, #-8]
      70:	e15e0002 	cmp	lr, r2
      74:	00822004 	addeq	r2, r2, r4
      78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
      7c:	e3540000 	cmp	r4, #0
      80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
      84:	e1a07002 	mov	r7, r2
      88:	e1a0c002 	mov	r12, r2
      8c:	e8be000c 	ldm	lr!, {r2, r3}
      90:	e8ac000c 	stmia	r12!, {r2, r3}
      94:	e067300c 	rsb	r3, r7, r12
      98:	e1540003 	cmp	r4, r3
      9c:	e1a0200c 	mov	r2, r12
      a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
      a4:	e515e004 	ldr	lr, [r5, #-4]
      a8:	e35e0000 	cmp	lr, #0
      ac:	11a03002 	movne	r3, r2
      b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
      b4:	e8a30003 	stmia	r3!, {r0, r1}
      b8:	e062c003 	rsb	r12, r2, r3
      bc:	e15e000c 	cmp	lr, r12
      c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
      c4:	e2466001 	sub	r6, r6, #1
      c8:	e3760001 	cmn	r6, #1
      cc:	e2855014 	add	r5, r5, #20
      d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
      d4:	eb000407 	bl	10f8 <__cs3_premain>
      d8:	00000001 	.word	0x00000001
      dc:	0000124c 	.word	0x0000124c

000000e0 <__cs3_start_asm_sim>:
      e0:	e28f103c 	add	r1, pc, #60	; 0x3c
      e4:	e3a00016 	mov	r0, #22
      e8:	ef123456 	svc	0x00123456
      ec:	e3500000 	cmp	r0, #0
      f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
      f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
      f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
      fc:	e5920008 	ldr	r0, [r2, #8]
     100:	e3500000 	cmp	r0, #0
     104:	11a0d000 	movne	sp, r0
     108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
     10c:	e5920004 	ldr	r0, [r2, #4]
     110:	e3500000 	cmp	r0, #0
     114:	15810000 	strne	r0, [r1]
     118:	eaffffc9 	b	44 <__cs3_start_c>
     11c:	3ffffff8 	.word	0x3ffffff8
     120:	00001688 	.word	0x00001688

00000124 <__cs3_heap_start_ptr>:
     124:	000016b0 	.word	0x000016b0

00000128 <_start>:
     128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
     12c:	eaffffc4 	b	44 <__cs3_start_c>
     130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
     134:	e92d4008 	push	{r3, lr}
     138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
     13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
     140:	e0603003 	rsb	r3, r0, r3
     144:	e3530006 	cmp	r3, #6
     148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
     14c:	e8bd4008 	pop	{r3, lr}
     150:	e12fff1e 	bx	lr
     154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
     158:	e3530000 	cmp	r3, #0
     15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
     160:	e1a0e00f 	mov	lr, pc
     164:	e12fff13 	bx	r3
     168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
     16c:	00001690 	.word	0x00001690
     170:	00001693 	.word	0x00001693
     174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
     178:	e92d4008 	push	{r3, lr}
     17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
     180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
     184:	e0603003 	rsb	r3, r0, r3
     188:	e1a03143 	asr	r3, r3, #2
     18c:	e0833fa3 	add	r3, r3, r3, lsr #31
     190:	e1b010c3 	asrs	r1, r3, #1
     194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
     198:	e8bd4008 	pop	{r3, lr}
     19c:	e12fff1e 	bx	lr
     1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
     1a4:	e3520000 	cmp	r2, #0
     1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
     1ac:	e1a0e00f 	mov	lr, pc
     1b0:	e12fff12 	bx	r2
     1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
     1b8:	00001690 	.word	0x00001690
     1bc:	00001690 	.word	0x00001690
     1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
     1c4:	e92d4010 	push	{r4, lr}
     1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
     1cc:	e5d43000 	ldrb	r3, [r4]
     1d0:	e3530000 	cmp	r3, #0
     1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
     1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
     1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
     1e0:	e3530000 	cmp	r3, #0
     1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
     1e8:	1320f000 	nopne	{0}
     1ec:	e3a03001 	mov	r3, #1
     1f0:	e5c43000 	strb	r3, [r4]
     1f4:	e8bd4010 	pop	{r4, lr}
     1f8:	e12fff1e 	bx	lr
     1fc:	00001690 	.word	0x00001690
     200:	00000000 	.word	0x00000000
     204:	000011e8 	.word	0x000011e8

00000208 <frame_dummy>:
     208:	e92d4008 	push	{r3, lr}
     20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
     210:	e3530000 	cmp	r3, #0
     214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
     218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
     21c:	1320f000 	nopne	{0}
     220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
     224:	e5903000 	ldr	r3, [r0]
     228:	e3530000 	cmp	r3, #0
     22c:	0a000003 	beq	240 <frame_dummy+0x38>
     230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
     234:	e3530000 	cmp	r3, #0
     238:	11a0e00f 	movne	lr, pc
     23c:	112fff13 	bxne	r3
     240:	e8bd4008 	pop	{r3, lr}
     244:	eaffffcb 	b	178 <register_tm_clones>
     248:	00000000 	.word	0x00000000
     24c:	000011e8 	.word	0x000011e8
     250:	00001694 	.word	0x00001694
     254:	00001250 	.word	0x00001250
     258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/HPS_TIM.h"
#include "./drivers/inc/ISRs.h"
#include "./drivers/inc/address_map_arm.h"
#include "./drivers/inc/int_setup.h"
int main() {
     25c:	e92d4800 	push	{r11, lr}
     260:	e28db004 	add	r11, sp, #4
     264:	e24dd030 	sub	sp, sp, #48	; 0x30
				HEX_write_ASM(HEX5, 0);
			}
		}
	}
*/
	int_setup(2, (int[]) {73, 199});
     268:	e30131ec 	movw	r3, #4588	; 0x11ec
     26c:	e3403000 	movt	r3, #0
     270:	e24b201c 	sub	r2, r11, #28
     274:	e8930003 	ldm	r3, {r0, r1}
     278:	e8820003 	stm	r2, {r0, r1}
     27c:	e24b301c 	sub	r3, r11, #28
     280:	e3a00002 	mov	r0, #2
     284:	e1a01003 	mov	r1, r3
     288:	eb0002c1 	bl	d94 <int_setup>
	enable_PB_INT_ASM(PB3 | PB2 | PB1);
     28c:	e3a0000e 	mov	r0, #14
     290:	eb000164 	bl	828 <enable_PB_INT_ASM>

	HPS_TIM_config_t hps_tim;
	hps_tim.tim = TIM0;
     294:	e3a03001 	mov	r3, #1
     298:	e54b3030 	strb	r3, [r11, #-48]	; 0xffffffd0
	hps_tim.timeout = 10000;
     29c:	e3023710 	movw	r3, #10000	; 0x2710
     2a0:	e50b302c 	str	r3, [r11, #-44]	; 0xffffffd4
	hps_tim.LD_en = 1;
     2a4:	e3a03001 	mov	r3, #1
     2a8:	e50b3028 	str	r3, [r11, #-40]	; 0xffffffd8
	hps_tim.INT_en = 1;
     2ac:	e3a03001 	mov	r3, #1
     2b0:	e50b3024 	str	r3, [r11, #-36]	; 0xffffffdc
	hps_tim.enable = 1;
     2b4:	e3a03001 	mov	r3, #1
     2b8:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	HPS_TIM_config_ASM(&hps_tim);
     2bc:	e24b3030 	sub	r3, r11, #48	; 0x30
     2c0:	e1a00003 	mov	r0, r3
     2c4:	eb000162 	bl	854 <HPS_TIM_config_ASM>

	int micro = 0, second = 0, minute = 0, timerstart = 0;
     2c8:	e3a03000 	mov	r3, #0
     2cc:	e50b3008 	str	r3, [r11, #-8]
     2d0:	e3a03000 	mov	r3, #0
     2d4:	e50b300c 	str	r3, [r11, #-12]
     2d8:	e3a03000 	mov	r3, #0
     2dc:	e50b3010 	str	r3, [r11, #-16]
     2e0:	e3a03000 	mov	r3, #0
     2e4:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     2e8:	ea000000 	b	2f0 <main+0x94>
				HEX_write_ASM(HEX4, 0);
				HEX_write_ASM(HEX5, 0);
			}
			pb_int_flag = 0;
		}
	}
     2ec:	e1a00000 	nop			; (mov r0, r0)

	int micro = 0, second = 0, minute = 0, timerstart = 0;

	while (1) {
		//each 10 ms, we increment, we only go when the subroutine flag is active
		if (hps_tim0_int_flag && timerstart) {
     2f0:	e3003968 	movw	r3, #2408	; 0x968
     2f4:	e3403000 	movt	r3, #0
     2f8:	e5933000 	ldr	r3, [r3]
     2fc:	e3530000 	cmp	r3, #0
     300:	0a000074 	beq	4d8 <main+0x27c>
     304:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     308:	e3530000 	cmp	r3, #0
     30c:	0a000071 	beq	4d8 <main+0x27c>
			hps_tim0_int_flag = 0;
     310:	e3003968 	movw	r3, #2408	; 0x968
     314:	e3403000 	movt	r3, #0
     318:	e3a02000 	mov	r2, #0
     31c:	e5832000 	str	r2, [r3]
			micro += 10; 
     320:	e51b3008 	ldr	r3, [r11, #-8]
     324:	e283300a 	add	r3, r3, #10
     328:	e50b3008 	str	r3, [r11, #-8]

			//increment ms until we reach 1000, then +1 second then reset
			if (micro >= 1000) {
     32c:	e51b2008 	ldr	r2, [r11, #-8]
     330:	e30033e7 	movw	r3, #999	; 0x3e7
     334:	e1520003 	cmp	r2, r3
     338:	da000011 	ble	384 <main+0x128>
				micro = 0;
     33c:	e3a03000 	mov	r3, #0
     340:	e50b3008 	str	r3, [r11, #-8]
				second++;
     344:	e51b300c 	ldr	r3, [r11, #-12]
     348:	e2833001 	add	r3, r3, #1
     34c:	e50b300c 	str	r3, [r11, #-12]
				//increment seconds, until we reach 60, then +1 minute then reset
				if (second >= 60) {
     350:	e51b300c 	ldr	r3, [r11, #-12]
     354:	e353003b 	cmp	r3, #59	; 0x3b
     358:	da000009 	ble	384 <main+0x128>
					second = 0;
     35c:	e3a03000 	mov	r3, #0
     360:	e50b300c 	str	r3, [r11, #-12]
					minute++;
     364:	e51b3010 	ldr	r3, [r11, #-16]
     368:	e2833001 	add	r3, r3, #1
     36c:	e50b3010 	str	r3, [r11, #-16]
					//reset minutes since we have no hours
					if (minute >= 60) {
     370:	e51b3010 	ldr	r3, [r11, #-16]
     374:	e353003b 	cmp	r3, #59	; 0x3b
     378:	da000001 	ble	384 <main+0x128>
						minute = 0;
     37c:	e3a03000 	mov	r3, #0
     380:	e50b3010 	str	r3, [r11, #-16]
					}
				}
			}

			//write on the proper hex display
			HEX_write_ASM(HEX0, (micro % 100) / 10);
     384:	e51b2008 	ldr	r2, [r11, #-8]
     388:	e308351f 	movw	r3, #34079	; 0x851f
     38c:	e34531eb 	movt	r3, #20971	; 0x51eb
     390:	e0c31293 	smull	r1, r3, r3, r2
     394:	e1a012c3 	asr	r1, r3, #5
     398:	e1a03fc2 	asr	r3, r2, #31
     39c:	e0633001 	rsb	r3, r3, r1
     3a0:	e3a01064 	mov	r1, #100	; 0x64
     3a4:	e0030391 	mul	r3, r1, r3
     3a8:	e0633002 	rsb	r3, r3, r2
     3ac:	e3062667 	movw	r2, #26215	; 0x6667
     3b0:	e3462666 	movt	r2, #26214	; 0x6666
     3b4:	e0c21392 	smull	r1, r2, r2, r3
     3b8:	e1a02142 	asr	r2, r2, #2
     3bc:	e1a03fc3 	asr	r3, r3, #31
     3c0:	e0633002 	rsb	r3, r3, r2
     3c4:	e6ef3073 	uxtb	r3, r3
     3c8:	e3a00001 	mov	r0, #1
     3cc:	e1a01003 	mov	r1, r3
     3d0:	eb0000c1 	bl	6dc <HEX_write_ASM>
			HEX_write_ASM(HEX1, micro / 100);
     3d4:	e51b2008 	ldr	r2, [r11, #-8]
     3d8:	e308351f 	movw	r3, #34079	; 0x851f
     3dc:	e34531eb 	movt	r3, #20971	; 0x51eb
     3e0:	e0c31293 	smull	r1, r3, r3, r2
     3e4:	e1a012c3 	asr	r1, r3, #5
     3e8:	e1a03fc2 	asr	r3, r2, #31
     3ec:	e0633001 	rsb	r3, r3, r1
     3f0:	e6ef3073 	uxtb	r3, r3
     3f4:	e3a00002 	mov	r0, #2
     3f8:	e1a01003 	mov	r1, r3
     3fc:	eb0000b6 	bl	6dc <HEX_write_ASM>
			HEX_write_ASM(HEX2, second % 10);
     400:	e51b100c 	ldr	r1, [r11, #-12]
     404:	e3063667 	movw	r3, #26215	; 0x6667
     408:	e3463666 	movt	r3, #26214	; 0x6666
     40c:	e0c32193 	smull	r2, r3, r3, r1
     410:	e1a02143 	asr	r2, r3, #2
     414:	e1a03fc1 	asr	r3, r1, #31
     418:	e0632002 	rsb	r2, r3, r2
     41c:	e1a03002 	mov	r3, r2
     420:	e1a03103 	lsl	r3, r3, #2
     424:	e0833002 	add	r3, r3, r2
     428:	e1a03083 	lsl	r3, r3, #1
     42c:	e0632001 	rsb	r2, r3, r1
     430:	e6ef3072 	uxtb	r3, r2
     434:	e3a00004 	mov	r0, #4
     438:	e1a01003 	mov	r1, r3
     43c:	eb0000a6 	bl	6dc <HEX_write_ASM>
			HEX_write_ASM(HEX3, second / 10);
     440:	e51b200c 	ldr	r2, [r11, #-12]
     444:	e3063667 	movw	r3, #26215	; 0x6667
     448:	e3463666 	movt	r3, #26214	; 0x6666
     44c:	e0c31293 	smull	r1, r3, r3, r2
     450:	e1a01143 	asr	r1, r3, #2
     454:	e1a03fc2 	asr	r3, r2, #31
     458:	e0633001 	rsb	r3, r3, r1
     45c:	e6ef3073 	uxtb	r3, r3
     460:	e3a00008 	mov	r0, #8
     464:	e1a01003 	mov	r1, r3
     468:	eb00009b 	bl	6dc <HEX_write_ASM>
			HEX_write_ASM(HEX4, minute % 10);
     46c:	e51b1010 	ldr	r1, [r11, #-16]
     470:	e3063667 	movw	r3, #26215	; 0x6667
     474:	e3463666 	movt	r3, #26214	; 0x6666
     478:	e0c32193 	smull	r2, r3, r3, r1
     47c:	e1a02143 	asr	r2, r3, #2
     480:	e1a03fc1 	asr	r3, r1, #31
     484:	e0632002 	rsb	r2, r3, r2
     488:	e1a03002 	mov	r3, r2
     48c:	e1a03103 	lsl	r3, r3, #2
     490:	e0833002 	add	r3, r3, r2
     494:	e1a03083 	lsl	r3, r3, #1
     498:	e0632001 	rsb	r2, r3, r1
     49c:	e6ef3072 	uxtb	r3, r2
     4a0:	e3a00010 	mov	r0, #16
     4a4:	e1a01003 	mov	r1, r3
     4a8:	eb00008b 	bl	6dc <HEX_write_ASM>
			HEX_write_ASM(HEX5, minute / 10);
     4ac:	e51b2010 	ldr	r2, [r11, #-16]
     4b0:	e3063667 	movw	r3, #26215	; 0x6667
     4b4:	e3463666 	movt	r3, #26214	; 0x6666
     4b8:	e0c31293 	smull	r1, r3, r3, r2
     4bc:	e1a01143 	asr	r1, r3, #2
     4c0:	e1a03fc2 	asr	r3, r2, #31
     4c4:	e0633001 	rsb	r3, r3, r1
     4c8:	e6ef3073 	uxtb	r3, r3
     4cc:	e3a00020 	mov	r0, #32
     4d0:	e1a01003 	mov	r1, r3
     4d4:	eb000080 	bl	6dc <HEX_write_ASM>
		}
		//if pushbutton flag active, the ISR is active, we do something according to which button pressed
		if (pb_int_flag != 0){
     4d8:	e300396c 	movw	r3, #2412	; 0x96c
     4dc:	e3403000 	movt	r3, #0
     4e0:	e5933000 	ldr	r3, [r3]
     4e4:	e3530000 	cmp	r3, #0
     4e8:	0affff7f 	beq	2ec <main+0x90>
			if(pb_int_flag == 8) timerstart = 1;
     4ec:	e300396c 	movw	r3, #2412	; 0x96c
     4f0:	e3403000 	movt	r3, #0
     4f4:	e5933000 	ldr	r3, [r3]
     4f8:	e3530008 	cmp	r3, #8
     4fc:	1a000002 	bne	50c <main+0x2b0>
     500:	e3a03001 	mov	r3, #1
     504:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     508:	ea000026 	b	5a8 <main+0x34c>
			else if(pb_int_flag == 4) timerstart = 0;
     50c:	e300396c 	movw	r3, #2412	; 0x96c
     510:	e3403000 	movt	r3, #0
     514:	e5933000 	ldr	r3, [r3]
     518:	e3530004 	cmp	r3, #4
     51c:	1a000002 	bne	52c <main+0x2d0>
     520:	e3a03000 	mov	r3, #0
     524:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
     528:	ea00001e 	b	5a8 <main+0x34c>
			else if(pb_int_flag == 2) {
     52c:	e300396c 	movw	r3, #2412	; 0x96c
     530:	e3403000 	movt	r3, #0
     534:	e5933000 	ldr	r3, [r3]
     538:	e3530002 	cmp	r3, #2
     53c:	1a000019 	bne	5a8 <main+0x34c>
				micro = 0;
     540:	e3a03000 	mov	r3, #0
     544:	e50b3008 	str	r3, [r11, #-8]
				second = 0;
     548:	e3a03000 	mov	r3, #0
     54c:	e50b300c 	str	r3, [r11, #-12]
				minute = 0;
     550:	e3a03000 	mov	r3, #0
     554:	e50b3010 	str	r3, [r11, #-16]
				timerstart = 0;
     558:	e3a03000 	mov	r3, #0
     55c:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
				HEX_write_ASM(HEX0, 0);
     560:	e3a00001 	mov	r0, #1
     564:	e3a01000 	mov	r1, #0
     568:	eb00005b 	bl	6dc <HEX_write_ASM>
				HEX_write_ASM(HEX1, 0);
     56c:	e3a00002 	mov	r0, #2
     570:	e3a01000 	mov	r1, #0
     574:	eb000058 	bl	6dc <HEX_write_ASM>
				HEX_write_ASM(HEX2, 0);
     578:	e3a00004 	mov	r0, #4
     57c:	e3a01000 	mov	r1, #0
     580:	eb000055 	bl	6dc <HEX_write_ASM>
				HEX_write_ASM(HEX3, 0);
     584:	e3a00008 	mov	r0, #8
     588:	e3a01000 	mov	r1, #0
     58c:	eb000052 	bl	6dc <HEX_write_ASM>
				HEX_write_ASM(HEX4, 0);
     590:	e3a00010 	mov	r0, #16
     594:	e3a01000 	mov	r1, #0
     598:	eb00004f 	bl	6dc <HEX_write_ASM>
				HEX_write_ASM(HEX5, 0);
     59c:	e3a00020 	mov	r0, #32
     5a0:	e3a01000 	mov	r1, #0
     5a4:	eb00004c 	bl	6dc <HEX_write_ASM>
			}
			pb_int_flag = 0;
     5a8:	e300396c 	movw	r3, #2412	; 0x96c
     5ac:	e3403000 	movt	r3, #0
     5b0:	e3a02000 	mov	r2, #0
     5b4:	e5832000 	str	r2, [r3]
		}
	}
     5b8:	eaffff4b 	b	2ec <main+0x90>

000005bc <read_LEDs_ASM>:
	.equ LED, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
		LDR R1, =LED
     5bc:	e59f1010 	ldr	r1, [pc, #16]	; 5d4 <write_LEDs_ASM+0xc>
		LDR R0, [R1]
     5c0:	e5910000 	ldr	r0, [r1]
		BX LR
     5c4:	e12fff1e 	bx	lr

000005c8 <write_LEDs_ASM>:

write_LEDs_ASM:
		LDR R1, =LED
     5c8:	e59f1004 	ldr	r1, [pc, #4]	; 5d4 <write_LEDs_ASM+0xc>
		STR R0, [R1]
     5cc:	e5810000 	str	r0, [r1]
		BX LR 
     5d0:	e12fff1e 	bx	lr
	.equ LED, 0xFF200000
	.global read_LEDs_ASM
	.global write_LEDs_ASM

read_LEDs_ASM:
		LDR R1, =LED
     5d4:	ff200000 	.word	0xff200000

000005d8 <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
		LDR R1, =SW_BASE
     5d8:	e59f1004 	ldr	r1, [pc, #4]	; 5e4 <read_slider_switches_ASM+0xc>
		LDR R0, [R1]
     5dc:	e5910000 	ldr	r0, [r1]
		BX LR
     5e0:	e12fff1e 	bx	lr
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
		LDR R1, =SW_BASE
     5e4:	ff200040 	.word	0xff200040

000005e8 <display>:
	.global HEX_flood_ASM
	.global HEX_write_ASM

display:	
			// 44-20-64
			LDR R2, =HEX_4_5
     5e8:	e59f21cc 	ldr	r2, [pc, #460]	; 7bc <LIGHTS+0x40>
			MOV R3, #0x00000066
     5ec:	e3a03066 	mov	r3, #102	; 0x66
			LSL R3, #8
     5f0:	e1a03403 	lsl	r3, r3, #8
			ORR R3, #0x66
     5f4:	e3833066 	orr	r3, r3, #102	; 0x66
			STR R3, [R2]
     5f8:	e5823000 	str	r3, [r2]

			LDR R8, =HEX_0_3
     5fc:	e59f81bc 	ldr	r8, [pc, #444]	; 7c0 <LIGHTS+0x44>
			MOV R5, #0x0000005B		//give it an initial value
     600:	e3a0505b 	mov	r5, #91	; 0x5b
			LSL R5, #8
     604:	e1a05405 	lsl	r5, r5, #8
			ORR R5, #0X3F
     608:	e385503f 	orr	r5, r5, #63	; 0x3f
			LSL R5, #8
     60c:	e1a05405 	lsl	r5, r5, #8
			ORR R5, #0X7D
     610:	e385507d 	orr	r5, r5, #125	; 0x7d
			LSL R5, #8
     614:	e1a05405 	lsl	r5, r5, #8
			ORR R5, #0X66
     618:	e3855066 	orr	r5, r5, #102	; 0x66
			STR R5, [R8]
     61c:	e5885000 	str	r5, [r8]

			BX LR
     620:	e12fff1e 	bx	lr

00000624 <HEX_clear_ASM>:
// turns off all the LED segments of the HEX displays
HEX_clear_ASM:
			//BL display
	
			PUSH {R1-R8,LR}
     624:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
			LDR R1, =HEX_0_3			
     628:	e59f1190 	ldr	r1, [pc, #400]	; 7c0 <LIGHTS+0x44>
			MOV R3, #0			// Index of which hex we're at
     62c:	e3a03000 	mov	r3, #0

00000630 <Clear_Loop>:
			
Clear_Loop:	CMP R3, #6
     630:	e3530006 	cmp	r3, #6
			BEQ Clear_DONE
     634:	0a00000f 	beq	678 <Clear_DONE>
			AND R4, R0, #1
     638:	e2004001 	and	r4, r0, #1
			CMP R4, #1
     63c:	e3540001 	cmp	r4, #1
			BLEQ Clear
     640:	0b000002 	bleq	650 <Clear>

			LSR R0, R0, #1 		// Shift the input right by 1 bit since the input is hot encoded
     644:	e1a000a0 	lsr	r0, r0, #1
								// So we move on to the next bit to check if that value (HEX) is 1
			ADD R3, R3, #1		// Increment counter
     648:	e2833001 	add	r3, r3, #1
			B Clear_Loop
     64c:	eafffff7 	b	630 <Clear_Loop>

00000650 <Clear>:

Clear:		CMP R3, #3			// Check if we're at the HEX 4 or 5
     650:	e3530003 	cmp	r3, #3
			SUBGT R3, R3, #4	// Sets the counter to 0 or 1 when it's > 3 (the counter refers to HEX 4-5 when it's 0-1 after this is called)
     654:	c2433004 	subgt	r3, r3, #4
			LDRGT R1, =HEX_4_5	// Set it to the the other disp HEX
     658:	c59f115c 	ldrgt	r1, [pc, #348]	; 7bc <LIGHTS+0x40>
			LDR R2, [R1]		// Set R2 to address of HEX 4-5
     65c:	e5912000 	ldr	r2, [r1]
			LDR R5, =CLEAR_N
     660:	e59f515c 	ldr	r5, [pc, #348]	; 7c4 <LIGHTS+0x48>
			LSL R6, R3, #2
     664:	e1a06103 	lsl	r6, r3, #2
			LDR R5, [R5, R6]
     668:	e7955006 	ldr	r5, [r5, r6]
			AND R2, R2, R5
     66c:	e0022005 	and	r2, r2, r5
			STR R2, [R1]
     670:	e5812000 	str	r2, [r1]
			BX LR
     674:	e12fff1e 	bx	lr

00000678 <Clear_DONE>:

Clear_DONE:	POP {R1-R8, LR}
     678:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
			BX LR
     67c:	e12fff1e 	bx	lr

00000680 <HEX_flood_ASM>:

HEX_flood_ASM:
			//BL display			

			PUSH {R1-R8,LR}		
     680:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
			LDR R1, =HEX_0_3	
     684:	e59f1134 	ldr	r1, [pc, #308]	; 7c0 <LIGHTS+0x44>
			MOV R3, #0			// Index of which hex we're at
     688:	e3a03000 	mov	r3, #0

0000068c <Flood_Loop>:
			
Flood_Loop:	CMP R3, #6
     68c:	e3530006 	cmp	r3, #6
			BEQ Flood_DONE
     690:	0a00000f 	beq	6d4 <Flood_DONE>
			AND R4, R0, #1
     694:	e2004001 	and	r4, r0, #1
			CMP R4, #1
     698:	e3540001 	cmp	r4, #1
			BLEQ Flood
     69c:	0b000002 	bleq	6ac <Flood>

			LSR R0, R0, #1 		// Shift the input right by 1 bit since the input is hot encoded
     6a0:	e1a000a0 	lsr	r0, r0, #1
								// So we move on to the next bit to check if that value (HEX) is 1
			ADD R3, R3, #1		// Increment counter
     6a4:	e2833001 	add	r3, r3, #1
			B Flood_Loop
     6a8:	eafffff7 	b	68c <Flood_Loop>

000006ac <Flood>:

Flood:		CMP R3, #3			// Check if we're at the HEX 4 or 5
     6ac:	e3530003 	cmp	r3, #3
			SUBGT R3, R3, #4	// Sets the counter to 0 or 1 when it's > 3 (the counter refers to HEX 4-5 when it's 0-1 after this is called)
     6b0:	c2433004 	subgt	r3, r3, #4
			LDRGT R1, =HEX_4_5	// Set it to the the other disp HEX
     6b4:	c59f1100 	ldrgt	r1, [pc, #256]	; 7bc <LIGHTS+0x40>
			LDR R2, [R1]		// Set R2 to address of HEX 4-5
     6b8:	e5912000 	ldr	r2, [r1]
			LDR R5, =FLOOD_N
     6bc:	e59f5104 	ldr	r5, [pc, #260]	; 7c8 <LIGHTS+0x4c>
			LSL R6, R3, #2
     6c0:	e1a06103 	lsl	r6, r3, #2
			LDR R5, [R5, R6]
     6c4:	e7955006 	ldr	r5, [r5, r6]
			ORR R2, R2, R5
     6c8:	e1822005 	orr	r2, r2, r5
			STR R2, [R1]
     6cc:	e5812000 	str	r2, [r1]
			BX LR
     6d0:	e12fff1e 	bx	lr

000006d4 <Flood_DONE>:

Flood_DONE:	POP {R1-R8, LR}
     6d4:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
			BX LR
     6d8:	e12fff1e 	bx	lr

000006dc <HEX_write_ASM>:


HEX_write_ASM:	MOV R10, R0
     6dc:	e1a0a000 	mov	r10, r0
				MOV R9, R1
     6e0:	e1a09001 	mov	r9, r1
				PUSH {R1-R8,LR}
     6e4:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
				BL HEX_clear_ASM		//we have to clear the display we have before doing anything on it
     6e8:	ebffffcd 	bl	624 <HEX_clear_ASM>
				POP {R1-R8,LR}
     6ec:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
				MOV R0, R10
     6f0:	e1a0000a 	mov	r0, r10
	
				PUSH {R1-R8,LR}
     6f4:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
				LDR R1, =HEX_0_3		//put location of the HEX3-0 register into R0
     6f8:	e59f10c0 	ldr	r1, [pc, #192]	; 7c0 <LIGHTS+0x44>
				MOV R3, #0				//this is our counter for which hex counts
     6fc:	e3a03000 	mov	r3, #0
				LDR R5, =LIGHTS
     700:	e59f50c4 	ldr	r5, [pc, #196]	; 7cc <LIGHTS+0x50>
				ADD R5, R5, R9, LSL #2
     704:	e0855109 	add	r5, r5, r9, lsl #2
				B Write_Loop
     708:	eaffffff 	b	70c <Write_Loop>

0000070c <Write_Loop>:

Write_Loop:	CMP R3, #6
     70c:	e3530006 	cmp	r3, #6
			BEQ Write_DONE
     710:	0a00000f 	beq	754 <Write_DONE>
			AND R4, R0, #1
     714:	e2004001 	and	r4, r0, #1
			CMP R4, #1
     718:	e3540001 	cmp	r4, #1
			BLEQ Write
     71c:	0b000002 	bleq	72c <Write>

			LSR R0, R0, #1 		// Shift the input right by 1 bit since the input is hot encoded
     720:	e1a000a0 	lsr	r0, r0, #1
								// So we move on to the next bit to check if that value (HEX) is 1
			ADD R3, R3, #1		// Increment counter
     724:	e2833001 	add	r3, r3, #1
			B Write_Loop
     728:	eafffff7 	b	70c <Write_Loop>

0000072c <Write>:

Write:		CMP R3, #3			// Check if we're at the HEX 4 or 5
     72c:	e3530003 	cmp	r3, #3
			SUBGT R3, R3, #4	// Sets the counter to 0 or 1 when it's > 3 (the counter refers to HEX 4-5 when it's 0-1 after this is called)
     730:	c2433004 	subgt	r3, r3, #4
			LDRGT R1, =HEX_4_5	// Set it to the the other disp HEX
     734:	c59f1080 	ldrgt	r1, [pc, #128]	; 7bc <LIGHTS+0x40>
			LDR R2, [R1]
     738:	e5912000 	ldr	r2, [r1]
			LDR R7, [R5]
     73c:	e5957000 	ldr	r7, [r5]
			LSL R6, R3, #3
     740:	e1a06183 	lsl	r6, r3, #3
			LSL R7, R7, R6
     744:	e1a07617 	lsl	r7, r7, r6
			ORR R2, R2, R7
     748:	e1822007 	orr	r2, r2, r7
			STR R2, [R1]
     74c:	e5812000 	str	r2, [r1]
			BX LR
     750:	e12fff1e 	bx	lr

00000754 <Write_DONE>:

Write_DONE: POP {R1-R8, LR}
     754:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
			BX LR
     758:	e12fff1e 	bx	lr

0000075c <CLEAR_N>:
     75c:	ffffff00 	.word	0xffffff00
     760:	ffff00ff 	.word	0xffff00ff
     764:	ff00ffff 	.word	0xff00ffff
     768:	00ffffff 	.word	0x00ffffff

0000076c <FLOOD_N>:
     76c:	000000ff 	.word	0x000000ff
     770:	0000ff00 	.word	0x0000ff00
     774:	00ff0000 	.word	0x00ff0000
     778:	ff000000 	.word	0xff000000

0000077c <LIGHTS>:
     77c:	0000003f 	.word	0x0000003f
     780:	00000006 	.word	0x00000006
     784:	0000005b 	.word	0x0000005b
     788:	0000004f 	.word	0x0000004f
     78c:	00000066 	.word	0x00000066
     790:	0000006d 	.word	0x0000006d
     794:	0000007d 	.word	0x0000007d
     798:	00000007 	.word	0x00000007
     79c:	0000007f 	.word	0x0000007f
     7a0:	00000067 	.word	0x00000067
     7a4:	00000077 	.word	0x00000077
     7a8:	0000007c 	.word	0x0000007c
     7ac:	00000039 	.word	0x00000039
     7b0:	0000005e 	.word	0x0000005e
     7b4:	00000079 	.word	0x00000079
     7b8:	00000071 	.word	0x00000071
	.global HEX_flood_ASM
	.global HEX_write_ASM

display:	
			// 44-20-64
			LDR R2, =HEX_4_5
     7bc:	ff200030 	.word	0xff200030
			MOV R3, #0x00000066
			LSL R3, #8
			ORR R3, #0x66
			STR R3, [R2]

			LDR R8, =HEX_0_3
     7c0:	ff200020 	.word	0xff200020

Clear:		CMP R3, #3			// Check if we're at the HEX 4 or 5
			SUBGT R3, R3, #4	// Sets the counter to 0 or 1 when it's > 3 (the counter refers to HEX 4-5 when it's 0-1 after this is called)
			LDRGT R1, =HEX_4_5	// Set it to the the other disp HEX
			LDR R2, [R1]		// Set R2 to address of HEX 4-5
			LDR R5, =CLEAR_N
     7c4:	0000075c 	.word	0x0000075c

Flood:		CMP R3, #3			// Check if we're at the HEX 4 or 5
			SUBGT R3, R3, #4	// Sets the counter to 0 or 1 when it's > 3 (the counter refers to HEX 4-5 when it's 0-1 after this is called)
			LDRGT R1, =HEX_4_5	// Set it to the the other disp HEX
			LDR R2, [R1]		// Set R2 to address of HEX 4-5
			LDR R5, =FLOOD_N
     7c8:	0000076c 	.word	0x0000076c
				MOV R0, R10
	
				PUSH {R1-R8,LR}
				LDR R1, =HEX_0_3		//put location of the HEX3-0 register into R0
				MOV R3, #0				//this is our counter for which hex counts
				LDR R5, =LIGHTS
     7cc:	0000077c 	.word	0x0000077c

000007d0 <read_PB_data_ASM>:
		.global PB_clear_edgecap_ASM
		.global enable_PB_INT_ASM
		.global disable_PB_INT_ASM

read_PB_data_ASM:					//only access the pushbutton data register
		LDR R1, =PB_DATA	
     7d0:	e59f1070 	ldr	r1, [pc, #112]	; 848 <disable_PB_INT_ASM+0x14>
		LDR R0, [R1]				//load the contents of the pushbutton register into R1
     7d4:	e5910000 	ldr	r0, [r1]
		BX LR						//USE R0 to pass arguments back		
     7d8:	e12fff1e 	bx	lr

000007dc <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:				//R0 contains which button to check, hot-one encoding
		LDR R1, =PB_DATA	
     7dc:	e59f1064 	ldr	r1, [pc, #100]	; 848 <disable_PB_INT_ASM+0x14>
		LDR R2, [R1]				//load contents of register into R2
     7e0:	e5912000 	ldr	r2, [r1]
		AND R2, R2, R0
     7e4:	e0022000 	and	r2, r2, r0
		CMP R2, R0
     7e8:	e1520000 	cmp	r2, r0
		MOVEQ R0, #1				//True if equal
     7ec:	03a00001 	moveq	r0, #1
		MOVNE R0, #0				//false, the button isnt pressed
     7f0:	13a00000 	movne	r0, #0
		BX LR
     7f4:	e12fff1e 	bx	lr

000007f8 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:				//no input, only access edgecapture register
		LDR R1, =PB_EDGE	
     7f8:	e59f104c 	ldr	r1, [pc, #76]	; 84c <disable_PB_INT_ASM+0x18>
		LDR R0, [R1]				//load the contents of the pushbutton register into R1
     7fc:	e5910000 	ldr	r0, [r1]
		//AND R0, R0, #0xF			//Get only edge cap bits
		BX LR						//USE R0 to pass arguments back		
     800:	e12fff1e 	bx	lr

00000804 <PB_edgecap_is_pressed_ASM>:
		
PB_edgecap_is_pressed_ASM:			//R0 contains which button to check, hot-one encoding
		LDR R1, =PB_EDGE
     804:	e59f1040 	ldr	r1, [pc, #64]	; 84c <disable_PB_INT_ASM+0x18>
		LDR R2, [R1]	
     808:	e5912000 	ldr	r2, [r1]
		CMP R0, R2
     80c:	e1500002 	cmp	r0, r2
		MOVEQ R0, #1
     810:	03a00001 	moveq	r0, #1
		MOVNE R0, #0
     814:	13a00000 	movne	r0, #0
		BX LR
     818:	e12fff1e 	bx	lr

0000081c <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:				//R0 contains which pushbutton
		LDR R1, =PB_EDGE
     81c:	e59f1028 	ldr	r1, [pc, #40]	; 84c <disable_PB_INT_ASM+0x18>
		STR R0, [R1] // writing to it clears it
     820:	e5810000 	str	r0, [r1]
		BX LR
     824:	e12fff1e 	bx	lr

00000828 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:					//R0 contains which button to enable, hot-one encoding
		LDR R1, =PB_MASK
     828:	e59f1020 	ldr	r1, [pc, #32]	; 850 <disable_PB_INT_ASM+0x1c>
		STR R0, [R1]				//store it back into location
     82c:	e5810000 	str	r0, [r1]
		BX LR
     830:	e12fff1e 	bx	lr

00000834 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:					//R0 is hot-one encoding of which button to disable
		LDR R1, =PB_MASK	//load mask location
     834:	e59f1014 	ldr	r1, [pc, #20]	; 850 <disable_PB_INT_ASM+0x1c>
		LDR R2, [R1]				//load mask bits
     838:	e5912000 	ldr	r2, [r1]
		BIC R2, R2, R0				//AND on the complement of R0
     83c:	e1c22000 	bic	r2, r2, r0
		STR R2, [R1]				//store it back into the mask
     840:	e5812000 	str	r2, [r1]
		BX LR
     844:	e12fff1e 	bx	lr
		.global PB_clear_edgecap_ASM
		.global enable_PB_INT_ASM
		.global disable_PB_INT_ASM

read_PB_data_ASM:					//only access the pushbutton data register
		LDR R1, =PB_DATA	
     848:	ff200050 	.word	0xff200050
		MOVEQ R0, #1				//True if equal
		MOVNE R0, #0				//false, the button isnt pressed
		BX LR

read_PB_edgecap_ASM:				//no input, only access edgecapture register
		LDR R1, =PB_EDGE	
     84c:	ff20005c 	.word	0xff20005c
		LDR R1, =PB_EDGE
		STR R0, [R1] // writing to it clears it
		BX LR

enable_PB_INT_ASM:					//R0 contains which button to enable, hot-one encoding
		LDR R1, =PB_MASK
     850:	ff200058 	.word	0xff200058

00000854 <HPS_TIM_config_ASM>:
    	.global HPS_TIM_config_ASM
		.global HPS_TIM_read_INT_ASM
		.global HPS_TIM_clear_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R1-R8,LR}
     854:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
	LDR R1, [R0]
     858:	e5901000 	ldr	r1, [r0]
	MOV R2, #0
     85c:	e3a02000 	mov	r2, #0

00000860 <CONFIG_LOOP>:


CONFIG_LOOP:	CMP R2, #4
     860:	e3520004 	cmp	r2, #4
				BEQ CONFIG_DONE
     864:	0a00001c 	beq	8dc <CONFIG_DONE>
				ANDS R4, R1, #1
     868:	e2114001 	ands	r4, r1, #1
				BLNE CONFIG
     86c:	1b000002 	blne	87c <CONFIG>
				LSR R1, R1, #1
     870:	e1a010a1 	lsr	r1, r1, #1
				ADD R2, R2, #1
     874:	e2822001 	add	r2, r2, #1
				B CONFIG_LOOP
     878:	eafffff8 	b	860 <CONFIG_LOOP>

0000087c <CONFIG>:

CONFIG:
					// load word address of the chosen timer is at R3
	LDR R3, =HPS_TIM
     87c:	e59f30e0 	ldr	r3, [pc, #224]	; 964 <HPS_TIM+0x10>
	LDR R3, [R3, R2, LSL #2]
     880:	e7933102 	ldr	r3, [r3, r2, lsl #2]
	MOV R4, R3
     884:	e1a04003 	mov	r4, r3
	ADD R4, R4, #8 				// the control word address is 8 bytes after the load word
     888:	e2844008 	add	r4, r4, #8
	
	// set the control word to all 0's
	MOV R5, #0
     88c:	e3a05000 	mov	r5, #0
	STR R5, [R4]
     890:	e5845000 	str	r5, [r4]
	
	LDR R5, [R0, #4] 				// R5 is the timeout that we pass as argument
     894:	e5905004 	ldr	r5, [r0, #4]
	CMP R2, #2
     898:	e3520002 	cmp	r2, #2
	MOVGE R6, #25 					// multiply the input period in usec according to which clock used
     89c:	a3a06019 	movge	r6, #25
	MOVLT R6, #100 					// either x25 or x100
     8a0:	b3a06064 	movlt	r6, #100	; 0x64
	MUL R5, R5, R6
     8a4:	e0050695 	mul	r5, r5, r6
	STR R5, [R3] 					// set corrected timeout value to Load register
     8a8:	e5835000 	str	r5, [r3]
	
	MOV R5, #0
     8ac:	e3a05000 	mov	r5, #0
	LDR R6, [R0, #8] // loads LD to correct place in control word
     8b0:	e5906008 	ldr	r6, [r0, #8]
	LSL R6, R6, #1
     8b4:	e1a06086 	lsl	r6, r6, #1
	ADD R5, R5, R6
     8b8:	e0855006 	add	r5, r5, r6

	LDR R6, [R0, #12] // loads INT to correct place in control word
     8bc:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #1
     8c0:	e2266001 	eor	r6, r6, #1
	LSL R6, R6, #2
     8c4:	e1a06106 	lsl	r6, r6, #2
	ADD R5, R5, R6 
     8c8:	e0855006 	add	r5, r5, r6
	// I needs to be 0 to assert S, so flip the input

	LDR R6, [R0, #16] // load enable to control bit, (1=start 0=stop)
     8cc:	e5906010 	ldr	r6, [r0, #16]
	ADD R5, R5, R6
     8d0:	e0855006 	add	r5, r5, r6
	STR R5, [R4] // actually put the updated control word in place
     8d4:	e5845000 	str	r5, [r4]
	BX LR
     8d8:	e12fff1e 	bx	lr

000008dc <CONFIG_DONE>:

CONFIG_DONE:	POP {R1-R8,LR}
     8dc:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
				BX LR
     8e0:	e12fff1e 	bx	lr

000008e4 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:	PUSH {R1-R8,LR}
     8e4:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
						MOV R1, #0
     8e8:	e3a01000 	mov	r1, #0
						LDR R3, =HPS_TIM
     8ec:	e59f3070 	ldr	r3, [pc, #112]	; 964 <HPS_TIM+0x10>

000008f0 <READ_LOOP>:

READ_LOOP:	CMP R1, #4
     8f0:	e3510004 	cmp	r1, #4
			BEQ READ_DONE
     8f4:	0a000006 	beq	914 <READ_DONE>
			ANDS R2, R0, #0x00000001
     8f8:	e2102001 	ands	r2, r0, #1
			LDRNE R3, [R3, R1, LSL #2]
     8fc:	17933101 	ldrne	r3, [r3, r1, lsl #2]
			LDRNE R0, [R3, #16]
     900:	15930010 	ldrne	r0, [r3, #16]
			BNE READ_DONE
     904:	1a000002 	bne	914 <READ_DONE>
			LSR R0, R0, #1
     908:	e1a000a0 	lsr	r0, r0, #1
			ADD R1, R1, #1
     90c:	e2811001 	add	r1, r1, #1
			B READ_LOOP
     910:	eafffff6 	b	8f0 <READ_LOOP>

00000914 <READ_DONE>:

READ_DONE:	POP {R1-R8, LR}
     914:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
			BX LR
     918:	e12fff1e 	bx	lr

0000091c <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:	PUSH {R1-R8,LR}
     91c:	e92d41fe 	push	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
						MOV R1, #0
     920:	e3a01000 	mov	r1, #0
						LDR R3, =HPS_TIM
     924:	e59f3038 	ldr	r3, [pc, #56]	; 964 <HPS_TIM+0x10>

00000928 <CLEAR_LOOP>:

CLEAR_LOOP:	CMP R1, #4
     928:	e3510004 	cmp	r1, #4
			BEQ CLEAR_DONE
     92c:	0a000006 	beq	94c <CLEAR_DONE>
			ANDS R2, R0, #0x00000001
     930:	e2102001 	ands	r2, r0, #1
			LDRNE R3, [R3, R1, LSL #2]
     934:	17933101 	ldrne	r3, [r3, r1, lsl #2]
			LDRNE R4, [R3, #12]
     938:	1593400c 	ldrne	r4, [r3, #12]
			LDRNE R4, [R3, #16]
     93c:	15934010 	ldrne	r4, [r3, #16]
			LSR R0, R0, #1
     940:	e1a000a0 	lsr	r0, r0, #1
			ADD R1, R1, #1
     944:	e2811001 	add	r1, r1, #1
			B CLEAR_LOOP
     948:	eafffff6 	b	928 <CLEAR_LOOP>

0000094c <CLEAR_DONE>:

CLEAR_DONE:	POP {R1-R8, LR}
     94c:	e8bd41fe 	pop	{r1, r2, r3, r4, r5, r6, r7, r8, lr}
			BX LR
     950:	e12fff1e 	bx	lr

00000954 <HPS_TIM>:
     954:	ffc08000 	.word	0xffc08000
     958:	ffc09000 	.word	0xffc09000
     95c:	ffd00000 	.word	0xffd00000
     960:	ffd01000 	.word	0xffd01000
				ADD R2, R2, #1
				B CONFIG_LOOP

CONFIG:
					// load word address of the chosen timer is at R3
	LDR R3, =HPS_TIM
     964:	00000954 	.word	0x00000954

00000968 <hps_tim0_int_flag>:
     968:	00000000 	.word	0x00000000

0000096c <pb_int_flag>:
     96c:	00000000 	.word	0x00000000

00000970 <A9_PRIV_TIM_ISR>:

pb_int_flag:
	.word 0x0000

A9_PRIV_TIM_ISR:
	BX LR
     970:	e12fff1e 	bx	lr

00000974 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
     974:	e12fff1e 	bx	lr

00000978 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}		
     978:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	MOV R0, #0x1				// Determine which timer it is
     97c:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM	
     980:	ebffffe5 	bl	91c <HPS_TIM_clear_INT_ASM>

	LDR R0, =hps_tim0_int_flag
     984:	e59f0054 	ldr	r0, [pc, #84]	; 9e0 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
     988:	e3a01001 	mov	r1, #1
	STR R1, [R0]				//Set flag to 1
     98c:	e5801000 	str	r1, [r0]

	POP {LR}
     990:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     994:	e12fff1e 	bx	lr

00000998 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
     998:	e12fff1e 	bx	lr

0000099c <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
     99c:	e12fff1e 	bx	lr

000009a0 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
     9a0:	e12fff1e 	bx	lr

000009a4 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
     9a4:	e12fff1e 	bx	lr

000009a8 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
     9a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	BL read_PB_edgecap_ASM		//Get pushbutton that was pressed
     9ac:	ebffff91 	bl	7f8 <read_PB_edgecap_ASM>

	LDR R1, =pb_int_flag
     9b0:	e59f102c 	ldr	r1, [pc, #44]	; 9e4 <FPGA_PS2_DUAL_ISR+0x8>
	STR R0, [R1]				//Set flag to value of pb
     9b4:	e5810000 	str	r0, [r1]

	BL PB_clear_edgecap_ASM		//Clear edgecap to reset interrupt
     9b8:	ebffff97 	bl	81c <PB_clear_edgecap_ASM>

	POP {LR}
     9bc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
     9c0:	e12fff1e 	bx	lr

000009c4 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
     9c4:	e12fff1e 	bx	lr

000009c8 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
     9c8:	e12fff1e 	bx	lr

000009cc <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
     9cc:	e12fff1e 	bx	lr

000009d0 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
     9d0:	e12fff1e 	bx	lr

000009d4 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
     9d4:	e12fff1e 	bx	lr

000009d8 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
     9d8:	e12fff1e 	bx	lr

000009dc <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
     9dc:	e12fff1e 	bx	lr
	PUSH {LR}		
	
	MOV R0, #0x1				// Determine which timer it is
	BL HPS_TIM_clear_INT_ASM	

	LDR R0, =hps_tim0_int_flag
     9e0:	00000968 	.word	0x00000968
	
FPGA_PB_KEYS_ISR:
	PUSH {LR}
	BL read_PB_edgecap_ASM		//Get pushbutton that was pressed

	LDR R1, =pb_int_flag
     9e4:	0000096c 	.word	0x0000096c

000009e8 <disable_A9_interrupts>:
#include "../inc/int_setup.h"

void disable_A9_interrupts() {
     9e8:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     9ec:	e28db000 	add	r11, sp, #0
     9f0:	e24dd00c 	sub	sp, sp, #12
	int status = 0b11010011;
     9f4:	e3a030d3 	mov	r3, #211	; 0xd3
     9f8:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     9fc:	e51b3008 	ldr	r3, [r11, #-8]
     a00:	e129f003 	msr	CPSR_fc, r3
}
     a04:	e28bd000 	add	sp, r11, #0
     a08:	e8bd0800 	ldmfd	sp!, {r11}
     a0c:	e12fff1e 	bx	lr

00000a10 <enable_A9_interrupts>:

void enable_A9_interrupts() {
     a10:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a14:	e28db000 	add	r11, sp, #0
     a18:	e24dd00c 	sub	sp, sp, #12
	int status = 0b01010011;
     a1c:	e3a03053 	mov	r3, #83	; 0x53
     a20:	e50b3008 	str	r3, [r11, #-8]
	asm("msr cpsr, %[ps]" : : [ps]"r"(status));
     a24:	e51b3008 	ldr	r3, [r11, #-8]
     a28:	e129f003 	msr	CPSR_fc, r3
}
     a2c:	e28bd000 	add	sp, r11, #0
     a30:	e8bd0800 	ldmfd	sp!, {r11}
     a34:	e12fff1e 	bx	lr

00000a38 <set_A9_IRQ_stack>:

void set_A9_IRQ_stack() {
     a38:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a3c:	e28db000 	add	r11, sp, #0
     a40:	e24dd00c 	sub	sp, sp, #12
	int stack, mode;
	stack = 0xFFFFFFFF - 7;
     a44:	e3e03007 	mvn	r3, #7
     a48:	e50b3008 	str	r3, [r11, #-8]
	mode = 0b11010010;
     a4c:	e3a030d2 	mov	r3, #210	; 0xd2
     a50:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     a54:	e51b300c 	ldr	r3, [r11, #-12]
     a58:	e129f003 	msr	CPSR_fc, r3
	asm("mov sp, %[ps]" : : [ps] "r" (stack));
     a5c:	e51b3008 	ldr	r3, [r11, #-8]
     a60:	e1a0d003 	mov	sp, r3
	
	mode = 0b11010011;
     a64:	e3a030d3 	mov	r3, #211	; 0xd3
     a68:	e50b300c 	str	r3, [r11, #-12]
	asm("msr cpsr, %[ps]" : : [ps] "r" (mode));
     a6c:	e51b300c 	ldr	r3, [r11, #-12]
     a70:	e129f003 	msr	CPSR_fc, r3
}
     a74:	e28bd000 	add	sp, r11, #0
     a78:	e8bd0800 	ldmfd	sp!, {r11}
     a7c:	e12fff1e 	bx	lr

00000a80 <config_interrupt>:

void config_interrupt(int ID, int CPU) {
     a80:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     a84:	e28db000 	add	r11, sp, #0
     a88:	e24dd01c 	sub	sp, sp, #28
     a8c:	e50b0018 	str	r0, [r11, #-24]	; 0xffffffe8
     a90:	e50b101c 	str	r1, [r11, #-28]	; 0xffffffe4
	int reg_offset;
	int index;
	int value;
	int address;
	
	reg_offset = (ID>>3) & 0xFFFFFFFC;
     a94:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     a98:	e1a031c3 	asr	r3, r3, #3
     a9c:	e3c33003 	bic	r3, r3, #3
     aa0:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 0x1F;
     aa4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     aa8:	e203301f 	and	r3, r3, #31
     aac:	e50b300c 	str	r3, [r11, #-12]
	value = 1<<index;
     ab0:	e3a02001 	mov	r2, #1
     ab4:	e51b300c 	ldr	r3, [r11, #-12]
     ab8:	e1a03312 	lsl	r3, r2, r3
     abc:	e50b3010 	str	r3, [r11, #-16]
	address = MPCORE_GIC_DIST + ICDISER + reg_offset;
     ac0:	e51b3008 	ldr	r3, [r11, #-8]
     ac4:	e2433b4b 	sub	r3, r3, #76800	; 0x12c00
     ac8:	e2433c03 	sub	r3, r3, #768	; 0x300
     acc:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(int *)address |= value;
     ad0:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     ad4:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     ad8:	e5921000 	ldr	r1, [r2]
     adc:	e51b2010 	ldr	r2, [r11, #-16]
     ae0:	e1812002 	orr	r2, r1, r2
     ae4:	e5832000 	str	r2, [r3]
	
	reg_offset = (ID & 0xFFFFFFFC);
     ae8:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     aec:	e3c33003 	bic	r3, r3, #3
     af0:	e50b3008 	str	r3, [r11, #-8]
	index = ID & 3;
     af4:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
     af8:	e2033003 	and	r3, r3, #3
     afc:	e50b300c 	str	r3, [r11, #-12]
	address = MPCORE_GIC_DIST + ICDIPTR + reg_offset + index;
     b00:	e51b2008 	ldr	r2, [r11, #-8]
     b04:	e51b300c 	ldr	r3, [r11, #-12]
     b08:	e0823003 	add	r3, r2, r3
     b0c:	e2433b4a 	sub	r3, r3, #75776	; 0x12800
     b10:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	*(char *)address = (char)CPU;
     b14:	e51b3014 	ldr	r3, [r11, #-20]	; 0xffffffec
     b18:	e51b201c 	ldr	r2, [r11, #-28]	; 0xffffffe4
     b1c:	e6ef2072 	uxtb	r2, r2
     b20:	e5c32000 	strb	r2, [r3]
}
     b24:	e28bd000 	add	sp, r11, #0
     b28:	e8bd0800 	ldmfd	sp!, {r11}
     b2c:	e12fff1e 	bx	lr

00000b30 <config_GIC>:

void config_GIC(int len, int* IDs) {
     b30:	e92d4800 	push	{r11, lr}
     b34:	e28db004 	add	r11, sp, #4
     b38:	e24dd010 	sub	sp, sp, #16
     b3c:	e50b0010 	str	r0, [r11, #-16]
     b40:	e50b1014 	str	r1, [r11, #-20]	; 0xffffffec
	int i;
	for(i=0 ; i<len ; i++)
     b44:	e3a03000 	mov	r3, #0
     b48:	e50b3008 	str	r3, [r11, #-8]
     b4c:	ea00000a 	b	b7c <config_GIC+0x4c>
		config_interrupt(IDs[i],1);
     b50:	e51b3008 	ldr	r3, [r11, #-8]
     b54:	e1a03103 	lsl	r3, r3, #2
     b58:	e51b2014 	ldr	r2, [r11, #-20]	; 0xffffffec
     b5c:	e0823003 	add	r3, r2, r3
     b60:	e5933000 	ldr	r3, [r3]
     b64:	e1a00003 	mov	r0, r3
     b68:	e3a01001 	mov	r1, #1
     b6c:	ebffffc3 	bl	a80 <config_interrupt>
	*(char *)address = (char)CPU;
}

void config_GIC(int len, int* IDs) {
	int i;
	for(i=0 ; i<len ; i++)
     b70:	e51b3008 	ldr	r3, [r11, #-8]
     b74:	e2833001 	add	r3, r3, #1
     b78:	e50b3008 	str	r3, [r11, #-8]
     b7c:	e51b2008 	ldr	r2, [r11, #-8]
     b80:	e51b3010 	ldr	r3, [r11, #-16]
     b84:	e1520003 	cmp	r2, r3
     b88:	bafffff0 	blt	b50 <config_GIC+0x20>
		config_interrupt(IDs[i],1);
	*((int *) (MPCORE_GIC_CPUIF + ICCPMR)) = 0xFFFF;
     b8c:	e30c3104 	movw	r3, #49412	; 0xc104
     b90:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     b94:	e30f2fff 	movw	r2, #65535	; 0xffff
     b98:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_CPUIF)) = 1;
     b9c:	e3a03cc1 	mov	r3, #49408	; 0xc100
     ba0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     ba4:	e3a02001 	mov	r2, #1
     ba8:	e5832000 	str	r2, [r3]
	*((int *) (MPCORE_GIC_DIST)) = 1;
     bac:	e3a03a0d 	mov	r3, #53248	; 0xd000
     bb0:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     bb4:	e3a02001 	mov	r2, #1
     bb8:	e5832000 	str	r2, [r3]
}
     bbc:	e24bd004 	sub	sp, r11, #4
     bc0:	e8bd8800 	pop	{r11, pc}

00000bc4 <__cs3_isr_irq>:

void __attribute__ ((interrupt)) __cs3_isr_irq() {
     bc4:	e24ee004 	sub	lr, lr, #4
     bc8:	e92d580f 	push	{r0, r1, r2, r3, r11, r12, lr}
     bcc:	e28db018 	add	r11, sp, #24
     bd0:	e24dd00c 	sub	sp, sp, #12
	int interrupt_ID = *((int *) (MPCORE_GIC_CPUIF + ICCIAR));
     bd4:	e30c310c 	movw	r3, #49420	; 0xc10c
     bd8:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     bdc:	e5933000 	ldr	r3, [r3]
     be0:	e50b3020 	str	r3, [r11, #-32]	; 0xffffffe0
	
	switch(interrupt_ID) {
     be4:	e51b3020 	ldr	r3, [r11, #-32]	; 0xffffffe0
     be8:	e3530053 	cmp	r3, #83	; 0x53
     bec:	0a00003d 	beq	ce8 <__cs3_isr_irq+0x124>
     bf0:	e3530053 	cmp	r3, #83	; 0x53
     bf4:	ca000011 	bgt	c40 <__cs3_isr_irq+0x7c>
     bf8:	e353004e 	cmp	r3, #78	; 0x4e
     bfc:	0a000031 	beq	cc8 <__cs3_isr_irq+0x104>
     c00:	e353004e 	cmp	r3, #78	; 0x4e
     c04:	ca000006 	bgt	c24 <__cs3_isr_irq+0x60>
     c08:	e3530048 	cmp	r3, #72	; 0x48
     c0c:	0a000029 	beq	cb8 <__cs3_isr_irq+0xf4>
     c10:	e3530049 	cmp	r3, #73	; 0x49
     c14:	0a000029 	beq	cc0 <__cs3_isr_irq+0xfc>
     c18:	e353001d 	cmp	r3, #29
     c1c:	0a000019 	beq	c88 <__cs3_isr_irq+0xc4>
     c20:	ea000036 	b	d00 <__cs3_isr_irq+0x13c>
     c24:	e3530050 	cmp	r3, #80	; 0x50
     c28:	0a00002a 	beq	cd8 <__cs3_isr_irq+0x114>
     c2c:	e3530050 	cmp	r3, #80	; 0x50
     c30:	ba000026 	blt	cd0 <__cs3_isr_irq+0x10c>
     c34:	e3530051 	cmp	r3, #81	; 0x51
     c38:	0a000028 	beq	ce0 <__cs3_isr_irq+0x11c>
     c3c:	ea00002f 	b	d00 <__cs3_isr_irq+0x13c>
     c40:	e35300c7 	cmp	r3, #199	; 0xc7
     c44:	0a000013 	beq	c98 <__cs3_isr_irq+0xd4>
     c48:	e35300c7 	cmp	r3, #199	; 0xc7
     c4c:	ca000006 	bgt	c6c <__cs3_isr_irq+0xa8>
     c50:	e3530059 	cmp	r3, #89	; 0x59
     c54:	0a000027 	beq	cf8 <__cs3_isr_irq+0x134>
     c58:	e35300c5 	cmp	r3, #197	; 0xc5
     c5c:	0a00000b 	beq	c90 <__cs3_isr_irq+0xcc>
     c60:	e3530054 	cmp	r3, #84	; 0x54
     c64:	0a000021 	beq	cf0 <__cs3_isr_irq+0x12c>
     c68:	ea000024 	b	d00 <__cs3_isr_irq+0x13c>
     c6c:	e35300c9 	cmp	r3, #201	; 0xc9
     c70:	0a00000c 	beq	ca8 <__cs3_isr_irq+0xe4>
     c74:	e35300c9 	cmp	r3, #201	; 0xc9
     c78:	ba000008 	blt	ca0 <__cs3_isr_irq+0xdc>
     c7c:	e35300ca 	cmp	r3, #202	; 0xca
     c80:	0a00000a 	beq	cb0 <__cs3_isr_irq+0xec>
     c84:	ea00001d 	b	d00 <__cs3_isr_irq+0x13c>
		
		case 29:  A9_PRIV_TIM_ISR(); break;
     c88:	ebffff38 	bl	970 <A9_PRIV_TIM_ISR>
     c8c:	ea00001c 	b	d04 <__cs3_isr_irq+0x140>
		case 197: HPS_GPIO1_ISR(); break;
     c90:	ebffff37 	bl	974 <HPS_GPIO1_ISR>
     c94:	ea00001a 	b	d04 <__cs3_isr_irq+0x140>
		case 199: HPS_TIM0_ISR(); break;
     c98:	ebffff36 	bl	978 <HPS_TIM0_ISR>
     c9c:	ea000018 	b	d04 <__cs3_isr_irq+0x140>
		case 200: HPS_TIM1_ISR(); break;
     ca0:	ebffff3c 	bl	998 <HPS_TIM1_ISR>
     ca4:	ea000016 	b	d04 <__cs3_isr_irq+0x140>
		case 201: HPS_TIM2_ISR(); break;
     ca8:	ebffff3b 	bl	99c <HPS_TIM2_ISR>
     cac:	ea000014 	b	d04 <__cs3_isr_irq+0x140>
		case 202: HPS_TIM3_ISR(); break;
     cb0:	ebffff3a 	bl	9a0 <HPS_TIM3_ISR>
     cb4:	ea000012 	b	d04 <__cs3_isr_irq+0x140>
		case 72:  FPGA_INTERVAL_TIM_ISR(); break;
     cb8:	ebffff39 	bl	9a4 <FPGA_INTERVAL_TIM_ISR>
     cbc:	ea000010 	b	d04 <__cs3_isr_irq+0x140>
		case 73:  FPGA_PB_KEYS_ISR(); break;
     cc0:	ebffff38 	bl	9a8 <FPGA_PB_KEYS_ISR>
     cc4:	ea00000e 	b	d04 <__cs3_isr_irq+0x140>
		case 78:  FPGA_Audio_ISR(); break;
     cc8:	ebffff3d 	bl	9c4 <FPGA_Audio_ISR>
     ccc:	ea00000c 	b	d04 <__cs3_isr_irq+0x140>
		case 79:  FPGA_PS2_ISR(); break;
     cd0:	ebffff3c 	bl	9c8 <FPGA_PS2_ISR>
     cd4:	ea00000a 	b	d04 <__cs3_isr_irq+0x140>
		case 80:  FPGA_JTAG_ISR(); break;
     cd8:	ebffff3b 	bl	9cc <FPGA_JTAG_ISR>
     cdc:	ea000008 	b	d04 <__cs3_isr_irq+0x140>
		case 81:  FPGA_IrDA_ISR(); break;
     ce0:	ebffff3a 	bl	9d0 <FPGA_IrDA_ISR>
     ce4:	ea000006 	b	d04 <__cs3_isr_irq+0x140>
		case 83:  FPGA_JP1_ISR(); break;
     ce8:	ebffff39 	bl	9d4 <FPGA_JP1_ISR>
     cec:	ea000004 	b	d04 <__cs3_isr_irq+0x140>
		case 84:  FPGA_JP2_ISR(); break;
     cf0:	ebffff38 	bl	9d8 <FPGA_JP2_ISR>
     cf4:	ea000002 	b	d04 <__cs3_isr_irq+0x140>
		case 89:  FPGA_PS2_DUAL_ISR(); break;
     cf8:	ebffff37 	bl	9dc <FPGA_PS2_DUAL_ISR>
     cfc:	ea000000 	b	d04 <__cs3_isr_irq+0x140>
	
		default: while(1); break;
     d00:	eafffffe 	b	d00 <__cs3_isr_irq+0x13c>
	}
	
	*((int *) (MPCORE_GIC_CPUIF + ICCEOIR)) = interrupt_ID;
     d04:	e30c3110 	movw	r3, #49424	; 0xc110
     d08:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d0c:	e51b2020 	ldr	r2, [r11, #-32]	; 0xffffffe0
     d10:	e5832000 	str	r2, [r3]
}
     d14:	e24bd018 	sub	sp, r11, #24
     d18:	e8fd980f 	ldm	sp!, {r0, r1, r2, r3, r11, r12, pc}^

00000d1c <__cs3_reset>:

void __attribute__ ((interrupt)) __cs3_reset (void) {
     d1c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d20:	e28db000 	add	r11, sp, #0
	while(1);
     d24:	eafffffe 	b	d24 <__cs3_reset+0x8>

00000d28 <__cs3_isr_undef>:
}

void __attribute__ ((interrupt)) __cs3_isr_undef (void) {
     d28:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d2c:	e28db000 	add	r11, sp, #0
	while(1);
     d30:	eafffffe 	b	d30 <__cs3_isr_undef+0x8>

00000d34 <__cs3_isr_swi>:
}

void __attribute__ ((interrupt)) __cs3_isr_swi (void) {
     d34:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d38:	e28db000 	add	r11, sp, #0
	while(1);
     d3c:	eafffffe 	b	d3c <__cs3_isr_swi+0x8>

00000d40 <__cs3_isr_pabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_pabort (void) {
     d40:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d44:	e28db000 	add	r11, sp, #0
	while(1);
     d48:	eafffffe 	b	d48 <__cs3_isr_pabort+0x8>

00000d4c <__cs3_isr_dabort>:
}

void __attribute__ ((interrupt)) __cs3_isr_dabort (void) {
     d4c:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d50:	e28db000 	add	r11, sp, #0
	while(1);
     d54:	eafffffe 	b	d54 <__cs3_isr_dabort+0x8>

00000d58 <__cs3_isr_fiq>:
}

void __attribute__ ((interrupt)) __cs3_isr_fiq (void) {
     d58:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d5c:	e28db000 	add	r11, sp, #0
	while(1);
     d60:	eafffffe 	b	d60 <__cs3_isr_fiq+0x8>

00000d64 <fix_bug>:
}

void fix_bug() {
     d64:	e52db004 	push	{r11}		; (str r11, [sp, #-4]!)
     d68:	e28db000 	add	r11, sp, #0
     d6c:	e24dd00c 	sub	sp, sp, #12
	volatile int * addr = (int *)0xFFFED198;
     d70:	e30d3198 	movw	r3, #53656	; 0xd198
     d74:	e34f3ffe 	movt	r3, #65534	; 0xfffe
     d78:	e50b3008 	str	r3, [r11, #-8]
	*addr = 0x000C0000;
     d7c:	e51b3008 	ldr	r3, [r11, #-8]
     d80:	e3a02703 	mov	r2, #786432	; 0xc0000
     d84:	e5832000 	str	r2, [r3]
}
     d88:	e28bd000 	add	sp, r11, #0
     d8c:	e8bd0800 	ldmfd	sp!, {r11}
     d90:	e12fff1e 	bx	lr

00000d94 <int_setup>:

void int_setup(int len, int* IDs) {
     d94:	e92d4800 	push	{r11, lr}
     d98:	e28db004 	add	r11, sp, #4
     d9c:	e24dd008 	sub	sp, sp, #8
     da0:	e50b0008 	str	r0, [r11, #-8]
     da4:	e50b100c 	str	r1, [r11, #-12]
	disable_A9_interrupts();
     da8:	ebffff0e 	bl	9e8 <disable_A9_interrupts>
	set_A9_IRQ_stack();
     dac:	ebffff21 	bl	a38 <set_A9_IRQ_stack>
	fix_bug();
     db0:	ebffffeb 	bl	d64 <fix_bug>
	config_GIC(len, IDs);
     db4:	e51b0008 	ldr	r0, [r11, #-8]
     db8:	e51b100c 	ldr	r1, [r11, #-12]
     dbc:	ebffff5b 	bl	b30 <config_GIC>
	enable_A9_interrupts();
     dc0:	ebffff12 	bl	a10 <enable_A9_interrupts>
}
     dc4:	e24bd004 	sub	sp, r11, #4
     dc8:	e8bd8800 	pop	{r11, pc}

00000dcc <atexit>:
     dcc:	e1a01000 	mov	r1, r0
     dd0:	e3a00000 	mov	r0, #0
     dd4:	e92d4008 	push	{r3, lr}
     dd8:	e1a02000 	mov	r2, r0
     ddc:	e1a03000 	mov	r3, r0
     de0:	eb00000e 	bl	e20 <__register_exitproc>
     de4:	e8bd4008 	pop	{r3, lr}
     de8:	e12fff1e 	bx	lr

00000dec <exit>:
     dec:	e92d4008 	push	{r3, lr}
     df0:	e3a01000 	mov	r1, #0
     df4:	e1a04000 	mov	r4, r0
     df8:	eb000045 	bl	f14 <__call_exitprocs>
     dfc:	e59f3018 	ldr	r3, [pc, #24]	; e1c <exit+0x30>
     e00:	e5930000 	ldr	r0, [r3]
     e04:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
     e08:	e3530000 	cmp	r3, #0
     e0c:	11a0e00f 	movne	lr, pc
     e10:	112fff13 	bxne	r3
     e14:	e1a00004 	mov	r0, r4
     e18:	eb0000c9 	bl	1144 <_exit>
     e1c:	000011f4 	.word	0x000011f4

00000e20 <__register_exitproc>:
     e20:	e59fc0e4 	ldr	r12, [pc, #228]	; f0c <__register_exitproc+0xec>
     e24:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
     e28:	e59c4000 	ldr	r4, [r12]
     e2c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
     e30:	e35c0000 	cmp	r12, #0
     e34:	0284cf53 	addeq	r12, r4, #332	; 0x14c
     e38:	e59c5004 	ldr	r5, [r12, #4]
     e3c:	0584c148 	streq	r12, [r4, #328]	; 0x148
     e40:	e355001f 	cmp	r5, #31
     e44:	e24dd010 	sub	sp, sp, #16
     e48:	e1a06000 	mov	r6, r0
     e4c:	da000015 	ble	ea8 <__register_exitproc+0x88>
     e50:	e59f00b8 	ldr	r0, [pc, #184]	; f10 <__register_exitproc+0xf0>
     e54:	e3500000 	cmp	r0, #0
     e58:	1a000001 	bne	e64 <__register_exitproc+0x44>
     e5c:	e3e00000 	mvn	r0, #0
     e60:	ea000018 	b	ec8 <__register_exitproc+0xa8>
     e64:	e3a00e19 	mov	r0, #400	; 0x190
     e68:	e58d100c 	str	r1, [sp, #12]
     e6c:	e58d2008 	str	r2, [sp, #8]
     e70:	e58d3004 	str	r3, [sp, #4]
     e74:	e320f000 	nop	{0}
     e78:	e250c000 	subs	r12, r0, #0
     e7c:	e59d100c 	ldr	r1, [sp, #12]
     e80:	e59d2008 	ldr	r2, [sp, #8]
     e84:	e59d3004 	ldr	r3, [sp, #4]
     e88:	0afffff3 	beq	e5c <__register_exitproc+0x3c>
     e8c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
     e90:	e3a00000 	mov	r0, #0
     e94:	e58c0004 	str	r0, [r12, #4]
     e98:	e58c5000 	str	r5, [r12]
     e9c:	e584c148 	str	r12, [r4, #328]	; 0x148
     ea0:	e58c0188 	str	r0, [r12, #392]	; 0x188
     ea4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
     ea8:	e3560000 	cmp	r6, #0
     eac:	e59c4004 	ldr	r4, [r12, #4]
     eb0:	1a000007 	bne	ed4 <__register_exitproc+0xb4>
     eb4:	e2843002 	add	r3, r4, #2
     eb8:	e2844001 	add	r4, r4, #1
     ebc:	e78c1103 	str	r1, [r12, r3, lsl #2]
     ec0:	e58c4004 	str	r4, [r12, #4]
     ec4:	e3a00000 	mov	r0, #0
     ec8:	e28dd010 	add	sp, sp, #16
     ecc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
     ed0:	e12fff1e 	bx	lr
     ed4:	e3a00001 	mov	r0, #1
     ed8:	e1a00410 	lsl	r0, r0, r4
     edc:	e08c8104 	add	r8, r12, r4, lsl #2
     ee0:	e3560002 	cmp	r6, #2
     ee4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
     ee8:	e5883108 	str	r3, [r8, #264]	; 0x108
     eec:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
     ef0:	e1877000 	orr	r7, r7, r0
     ef4:	01830000 	orreq	r0, r3, r0
     ef8:	e1a05008 	mov	r5, r8
     efc:	e5882088 	str	r2, [r8, #136]	; 0x88
     f00:	e58c7188 	str	r7, [r12, #392]	; 0x188
     f04:	058c018c 	streq	r0, [r12, #396]	; 0x18c
     f08:	eaffffe9 	b	eb4 <__register_exitproc+0x94>
     f0c:	000011f4 	.word	0x000011f4
     f10:	00000000 	.word	0x00000000

00000f14 <__call_exitprocs>:
     f14:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
     f18:	e59f3168 	ldr	r3, [pc, #360]	; 1088 <__call_exitprocs+0x174>
     f1c:	e5933000 	ldr	r3, [r3]
     f20:	e24dd014 	sub	sp, sp, #20
     f24:	e58d3004 	str	r3, [sp, #4]
     f28:	e2833f52 	add	r3, r3, #328	; 0x148
     f2c:	e58d0008 	str	r0, [sp, #8]
     f30:	e58d300c 	str	r3, [sp, #12]
     f34:	e1a07001 	mov	r7, r1
     f38:	e3a08001 	mov	r8, #1
     f3c:	e59d3004 	ldr	r3, [sp, #4]
     f40:	e5936148 	ldr	r6, [r3, #328]	; 0x148
     f44:	e3560000 	cmp	r6, #0
     f48:	e59db00c 	ldr	r11, [sp, #12]
     f4c:	0a000033 	beq	1020 <__call_exitprocs+0x10c>
     f50:	e5965004 	ldr	r5, [r6, #4]
     f54:	e2554001 	subs	r4, r5, #1
     f58:	5286a088 	addpl	r10, r6, #136	; 0x88
     f5c:	5285501f 	addpl	r5, r5, #31
     f60:	508a5105 	addpl	r5, r10, r5, lsl #2
     f64:	5a000007 	bpl	f88 <__call_exitprocs+0x74>
     f68:	ea000029 	b	1014 <__call_exitprocs+0x100>
     f6c:	e5953000 	ldr	r3, [r5]
     f70:	e1530007 	cmp	r3, r7
     f74:	0a000005 	beq	f90 <__call_exitprocs+0x7c>
     f78:	e2444001 	sub	r4, r4, #1
     f7c:	e3740001 	cmn	r4, #1
     f80:	e2455004 	sub	r5, r5, #4
     f84:	0a000022 	beq	1014 <__call_exitprocs+0x100>
     f88:	e3570000 	cmp	r7, #0
     f8c:	1afffff6 	bne	f6c <__call_exitprocs+0x58>
     f90:	e5963004 	ldr	r3, [r6, #4]
     f94:	e06a2005 	rsb	r2, r10, r5
     f98:	e2433001 	sub	r3, r3, #1
     f9c:	e0862002 	add	r2, r6, r2
     fa0:	e1530004 	cmp	r3, r4
     fa4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
     fa8:	13a01000 	movne	r1, #0
     fac:	05864004 	streq	r4, [r6, #4]
     fb0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
     fb4:	e3530000 	cmp	r3, #0
     fb8:	0affffee 	beq	f78 <__call_exitprocs+0x64>
     fbc:	e1a02418 	lsl	r2, r8, r4
     fc0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
     fc4:	e1120001 	tst	r2, r1
     fc8:	e5969004 	ldr	r9, [r6, #4]
     fcc:	0a000016 	beq	102c <__call_exitprocs+0x118>
     fd0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
     fd4:	e1120001 	tst	r2, r1
     fd8:	1a000016 	bne	1038 <__call_exitprocs+0x124>
     fdc:	e59d0008 	ldr	r0, [sp, #8]
     fe0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
     fe4:	e1a0e00f 	mov	lr, pc
     fe8:	e12fff13 	bx	r3
     fec:	e5963004 	ldr	r3, [r6, #4]
     ff0:	e1530009 	cmp	r3, r9
     ff4:	1affffd0 	bne	f3c <__call_exitprocs+0x28>
     ff8:	e59b3000 	ldr	r3, [r11]
     ffc:	e1530006 	cmp	r3, r6
    1000:	1affffcd 	bne	f3c <__call_exitprocs+0x28>
    1004:	e2444001 	sub	r4, r4, #1
    1008:	e3740001 	cmn	r4, #1
    100c:	e2455004 	sub	r5, r5, #4
    1010:	1affffdc 	bne	f88 <__call_exitprocs+0x74>
    1014:	e59f1070 	ldr	r1, [pc, #112]	; 108c <__call_exitprocs+0x178>
    1018:	e3510000 	cmp	r1, #0
    101c:	1a000009 	bne	1048 <__call_exitprocs+0x134>
    1020:	e28dd014 	add	sp, sp, #20
    1024:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
    1028:	e12fff1e 	bx	lr
    102c:	e1a0e00f 	mov	lr, pc
    1030:	e12fff13 	bx	r3
    1034:	eaffffec 	b	fec <__call_exitprocs+0xd8>
    1038:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
    103c:	e1a0e00f 	mov	lr, pc
    1040:	e12fff13 	bx	r3
    1044:	eaffffe8 	b	fec <__call_exitprocs+0xd8>
    1048:	e5963004 	ldr	r3, [r6, #4]
    104c:	e3530000 	cmp	r3, #0
    1050:	e5963000 	ldr	r3, [r6]
    1054:	1a000008 	bne	107c <__call_exitprocs+0x168>
    1058:	e3530000 	cmp	r3, #0
    105c:	0a000006 	beq	107c <__call_exitprocs+0x168>
    1060:	e1a00006 	mov	r0, r6
    1064:	e58b3000 	str	r3, [r11]
    1068:	e320f000 	nop	{0}
    106c:	e59b6000 	ldr	r6, [r11]
    1070:	e3560000 	cmp	r6, #0
    1074:	1affffb5 	bne	f50 <__call_exitprocs+0x3c>
    1078:	eaffffe8 	b	1020 <__call_exitprocs+0x10c>
    107c:	e1a0b006 	mov	r11, r6
    1080:	e1a06003 	mov	r6, r3
    1084:	eafffff9 	b	1070 <__call_exitprocs+0x15c>
    1088:	000011f4 	.word	0x000011f4
    108c:	00000000 	.word	0x00000000

00001090 <register_fini>:
    1090:	e92d4008 	push	{r3, lr}
    1094:	e59f3010 	ldr	r3, [pc, #16]	; 10ac <register_fini+0x1c>
    1098:	e3530000 	cmp	r3, #0
    109c:	159f000c 	ldrne	r0, [pc, #12]	; 10b0 <register_fini+0x20>
    10a0:	1bffff49 	blne	dcc <atexit>
    10a4:	e8bd4008 	pop	{r3, lr}
    10a8:	e12fff1e 	bx	lr
    10ac:	0000121c 	.word	0x0000121c
    10b0:	000010b4 	.word	0x000010b4

000010b4 <__libc_fini_array>:
    10b4:	e92d4038 	push	{r3, r4, r5, lr}
    10b8:	e59f5030 	ldr	r5, [pc, #48]	; 10f0 <__libc_fini_array+0x3c>
    10bc:	e59f4030 	ldr	r4, [pc, #48]	; 10f4 <__libc_fini_array+0x40>
    10c0:	e0654004 	rsb	r4, r5, r4
    10c4:	e1b04144 	asrs	r4, r4, #2
    10c8:	10855104 	addne	r5, r5, r4, lsl #2
    10cc:	0a000004 	beq	10e4 <__libc_fini_array+0x30>
    10d0:	e5353004 	ldr	r3, [r5, #-4]!
    10d4:	e1a0e00f 	mov	lr, pc
    10d8:	e12fff13 	bx	r3
    10dc:	e2544001 	subs	r4, r4, #1
    10e0:	1afffffa 	bne	10d0 <__libc_fini_array+0x1c>
    10e4:	eb00004c 	bl	121c <__libc_fini>
    10e8:	e8bd4038 	pop	{r3, r4, r5, lr}
    10ec:	e12fff1e 	bx	lr
    10f0:	00001234 	.word	0x00001234
    10f4:	00001238 	.word	0x00001238

000010f8 <__cs3_premain>:
    10f8:	e92d4008 	push	{r3, lr}
    10fc:	eb000017 	bl	1160 <__libc_init_array>
    1100:	e59f3030 	ldr	r3, [pc, #48]	; 1138 <__cs3_premain+0x40>
    1104:	e3530000 	cmp	r3, #0
    1108:	15930000 	ldrne	r0, [r3]
    110c:	01a00003 	moveq	r0, r3
    1110:	e59f3024 	ldr	r3, [pc, #36]	; 113c <__cs3_premain+0x44>
    1114:	e3530000 	cmp	r3, #0
    1118:	15931000 	ldrne	r1, [r3]
    111c:	01a01003 	moveq	r1, r3
    1120:	e3a02000 	mov	r2, #0
    1124:	ebfffc4c 	bl	25c <main>
    1128:	e59f3010 	ldr	r3, [pc, #16]	; 1140 <__cs3_premain+0x48>
    112c:	e3530000 	cmp	r3, #0
    1130:	1bffff2d 	blne	dec <exit>
    1134:	eafffffe 	b	1134 <__cs3_premain+0x3c>
	...
    1140:	00000dec 	.word	0x00000dec

00001144 <_exit>:
    1144:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    1148:	e3a00018 	mov	r0, #24
    114c:	e59f1004 	ldr	r1, [pc, #4]	; 1158 <_exit+0x14>
    1150:	ef123456 	svc	0x00123456
    1154:	eafffffe 	b	1154 <_exit+0x10>
    1158:	00020026 	.word	0x00020026

0000115c <__cs3_isr_interrupt>:
    115c:	eafffffe 	b	115c <__cs3_isr_interrupt>

00001160 <__libc_init_array>:
    1160:	e92d4070 	push	{r4, r5, r6, lr}
    1164:	e59f506c 	ldr	r5, [pc, #108]	; 11d8 <__libc_init_array+0x78>
    1168:	e59f606c 	ldr	r6, [pc, #108]	; 11dc <__libc_init_array+0x7c>
    116c:	e0656006 	rsb	r6, r5, r6
    1170:	e1b06146 	asrs	r6, r6, #2
    1174:	12455004 	subne	r5, r5, #4
    1178:	13a04000 	movne	r4, #0
    117c:	0a000005 	beq	1198 <__libc_init_array+0x38>
    1180:	e5b53004 	ldr	r3, [r5, #4]!
    1184:	e2844001 	add	r4, r4, #1
    1188:	e1a0e00f 	mov	lr, pc
    118c:	e12fff13 	bx	r3
    1190:	e1560004 	cmp	r6, r4
    1194:	1afffff9 	bne	1180 <__libc_init_array+0x20>
    1198:	e59f5040 	ldr	r5, [pc, #64]	; 11e0 <__libc_init_array+0x80>
    119c:	e59f6040 	ldr	r6, [pc, #64]	; 11e4 <__libc_init_array+0x84>
    11a0:	e0656006 	rsb	r6, r5, r6
    11a4:	eb000014 	bl	11fc <_init>
    11a8:	e1b06146 	asrs	r6, r6, #2
    11ac:	12455004 	subne	r5, r5, #4
    11b0:	13a04000 	movne	r4, #0
    11b4:	0a000005 	beq	11d0 <__libc_init_array+0x70>
    11b8:	e5b53004 	ldr	r3, [r5, #4]!
    11bc:	e2844001 	add	r4, r4, #1
    11c0:	e1a0e00f 	mov	lr, pc
    11c4:	e12fff13 	bx	r3
    11c8:	e1560004 	cmp	r6, r4
    11cc:	1afffff9 	bne	11b8 <__libc_init_array+0x58>
    11d0:	e8bd4070 	pop	{r4, r5, r6, lr}
    11d4:	e12fff1e 	bx	lr
    11d8:	00001214 	.word	0x00001214
    11dc:	00001214 	.word	0x00001214
    11e0:	00001214 	.word	0x00001214
    11e4:	0000121c 	.word	0x0000121c

Disassembly of section .rodata:

000011ec <_global_impure_ptr-0x8>:
    11ec:	00000049 	.word	0x00000049
    11f0:	000000c7 	.word	0x000000c7

000011f4 <_global_impure_ptr>:
    11f4:	00001260 00000043                       `...C...

000011fc <_init>:
    11fc:	e1a0c00d 	mov	r12, sp
    1200:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1204:	e24cb004 	sub	r11, r12, #4
    1208:	e24bd028 	sub	sp, r11, #40	; 0x28
    120c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1210:	e12fff1e 	bx	lr

00001214 <__init_array_start>:
    1214:	00001090 	.word	0x00001090

00001218 <__frame_dummy_init_array_entry>:
    1218:	00000208                                ....

0000121c <__libc_fini>:
    121c:	e1a0c00d 	mov	r12, sp
    1220:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
    1224:	e24cb004 	sub	r11, r12, #4
    1228:	e24bd028 	sub	sp, r11, #40	; 0x28
    122c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
    1230:	e12fff1e 	bx	lr

00001234 <__fini_array_start>:
    1234:	000001c4 	.word	0x000001c4

00001238 <__cs3_regions>:
    1238:	00000000 	.word	0x00000000
    123c:	00000040 	.word	0x00000040
    1240:	00000040 	.word	0x00000040
    1244:	00001650 	.word	0x00001650
    1248:	00000020 	.word	0x00000020

0000124c <__cs3_regions_end>:
    124c:	00000000 	.word	0x00000000
