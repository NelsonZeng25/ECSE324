
P:/ECSE324/G80_Lab4/main.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 58 08 00 00 5c 08 00 00 60 08 00 00     @...X...\...`...
  30:	64 08 00 00 54 08 00 00 68 08 00 00 6c 08 00 00     d...T...h...l...

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <Y_offset+0x58>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <Y_offset+0x54>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <Y_offset+0x5c>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <Y_offset+0x24>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <Y_offset+0x24>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <Y_offset+0xc>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <Y_offset+0x44>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <Y_offset+0x34>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <char_end_X+0x15>
  d4:	eb0001c5 	bl	7f0 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000954 	.word	0x00000954

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d90 	.word	0x00000d90

00000124 <__cs3_heap_start_ptr>:
 124:	00000db8 	.word	0x00000db8

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <pixel_end_X+0x2d>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <pixel_end_X+0x31>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <pixel_end_X+0x15>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <pixel_end_X+0x35>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <pixel_end_X+0xd>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <pixel_end_X+0xd>
 16c:	00000d98 	.word	0x00000d98
 170:	00000d9b 	.word	0x00000d9b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d98 	.word	0x00000d98
 1bc:	00000d98 	.word	0x00000d98
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d98 	.word	0x00000d98
 200:	00000000 	.word	0x00000000
 204:	000008f8 	.word	0x000008f8

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	000008f8 	.word	0x000008f8
 250:	00000d9c 	.word	0x00000d9c
 254:	00000958 	.word	0x00000958
 258:	00000000 	.word	0x00000000

0000025c <test_char>:
#include <stdio.h>

#include "./drivers/inc/VGA.h"

void test_char() {
 25c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int x,y;
	char c = 0;
	
	for (y=0; y < 10; y++) {
 260:	e3a06000 	mov	r6, #0

#include "./drivers/inc/VGA.h"

void test_char() {
	int x,y;
	char c = 0;
 264:	e1a05006 	mov	r5, r6
#include <stdio.h>

#include "./drivers/inc/VGA.h"

void test_char() {
 268:	e1a07006 	mov	r7, r6
 26c:	ea00000c 	b	2a4 <test_char+0x48>
 270:	e0852004 	add	r2, r5, r4
	int x,y;
	char c = 0;
	
	for (y=0; y < 10; y++) {
		for (x=0; x< 10; x++) {
			VGA_write_char_ASM(x, y, c++);
 274:	e1a00004 	mov	r0, r4
 278:	e1a01006 	mov	r1, r6
 27c:	e6ef2072 	uxtb	r2, r2
 280:	eb000057 	bl	3e4 <VGA_write_char_ASM>
void test_char() {
	int x,y;
	char c = 0;
	
	for (y=0; y < 10; y++) {
		for (x=0; x< 10; x++) {
 284:	e2844001 	add	r4, r4, #1
 288:	e354000a 	cmp	r4, #10
 28c:	1afffff7 	bne	270 <test_char+0x14>
 290:	e285500a 	add	r5, r5, #10
 294:	e6ef5075 	uxtb	r5, r5

void test_char() {
	int x,y;
	char c = 0;
	
	for (y=0; y < 10; y++) {
 298:	e2866001 	add	r6, r6, #1
 29c:	e3550064 	cmp	r5, #100	; 0x64
 2a0:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
#include <stdio.h>

#include "./drivers/inc/VGA.h"

void test_char() {
 2a4:	e1a04007 	mov	r4, r7
 2a8:	eafffff0 	b	270 <test_char+0x14>

000002ac <test_byte>:
			VGA_write_char_ASM(x, y, c++);
		}
	}
}

void test_byte() {
 2ac:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	int x,y;
	char c = 0;
	
	for (y=0; y< 59; y++) {
 2b0:	e3a06000 	mov	r6, #0
	}
}

void test_byte() {
	int x,y;
	char c = 0;
 2b4:	e1a07006 	mov	r7, r6
			VGA_write_char_ASM(x, y, c++);
		}
	}
}

void test_byte() {
 2b8:	e1a08006 	mov	r8, r6
 2bc:	ea00000d 	b	2f8 <test_byte+0x4c>
	int x,y;
	char c = 0;
	
	for (y=0; y< 59; y++) {
		for (x=0; x< 79; x+=3) {
			VGA_write_byte_ASM(x, y, c++);
 2c0:	e2825001 	add	r5, r2, #1
 2c4:	e6ef5075 	uxtb	r5, r5
 2c8:	e1a00004 	mov	r0, r4
 2cc:	e1a01006 	mov	r1, r6
 2d0:	eb000052 	bl	420 <VGA_write_byte_ASM>
void test_byte() {
	int x,y;
	char c = 0;
	
	for (y=0; y< 59; y++) {
		for (x=0; x< 79; x+=3) {
 2d4:	e2844003 	add	r4, r4, #3
			VGA_write_byte_ASM(x, y, c++);
 2d8:	e1a02005 	mov	r2, r5
void test_byte() {
	int x,y;
	char c = 0;
	
	for (y=0; y< 59; y++) {
		for (x=0; x< 79; x+=3) {
 2dc:	e3540051 	cmp	r4, #81	; 0x51
 2e0:	1afffff6 	bne	2c0 <test_byte+0x14>
 2e4:	e287701b 	add	r7, r7, #27
 2e8:	e6ef7077 	uxtb	r7, r7

void test_byte() {
	int x,y;
	char c = 0;
	
	for (y=0; y< 59; y++) {
 2ec:	e2866001 	add	r6, r6, #1
 2f0:	e3570039 	cmp	r7, #57	; 0x39
 2f4:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
			VGA_write_char_ASM(x, y, c++);
		}
	}
}

void test_byte() {
 2f8:	e1a02007 	mov	r2, r7
 2fc:	e1a04008 	mov	r4, r8
 300:	eaffffee 	b	2c0 <test_byte+0x14>

00000304 <test_pixel>:
			VGA_write_byte_ASM(x, y, c++);
		}
	}
}

void test_pixel() {
 304:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	int x,y;
	unsigned short colour = 0;
	
	for (y=0; y<=239; y++) {
 308:	e3a06000 	mov	r6, #0
	}
}

void test_pixel() {
	int x,y;
	unsigned short colour = 0;
 30c:	e1a05006 	mov	r5, r6
			VGA_write_byte_ASM(x, y, c++);
		}
	}
}

void test_pixel() {
 310:	e1a07006 	mov	r7, r6
 314:	ea00000c 	b	34c <test_pixel+0x48>
 318:	e0852004 	add	r2, r5, r4
	int x,y;
	unsigned short colour = 0;
	
	for (y=0; y<=239; y++) {
		for (x=0; x<=319; x++) {
			VGA_draw_point_ASM(x,y,colour++);
 31c:	e1a00004 	mov	r0, r4
 320:	e1a01006 	mov	r1, r6
 324:	e6bf2072 	sxth	r2, r2
 328:	eb000054 	bl	480 <VGA_draw_point_ASM>
void test_pixel() {
	int x,y;
	unsigned short colour = 0;
	
	for (y=0; y<=239; y++) {
		for (x=0; x<=319; x++) {
 32c:	e2844001 	add	r4, r4, #1
 330:	e3540d05 	cmp	r4, #320	; 0x140
 334:	1afffff7 	bne	318 <test_pixel+0x14>
 338:	e2855d05 	add	r5, r5, #320	; 0x140
 33c:	e6ff5075 	uxth	r5, r5

void test_pixel() {
	int x,y;
	unsigned short colour = 0;
	
	for (y=0; y<=239; y++) {
 340:	e2866001 	add	r6, r6, #1
 344:	e3550b0b 	cmp	r5, #11264	; 0x2c00
 348:	08bd80f8 	popeq	{r3, r4, r5, r6, r7, pc}
			VGA_write_byte_ASM(x, y, c++);
		}
	}
}

void test_pixel() {
 34c:	e1a04007 	mov	r4, r7
 350:	eafffff0 	b	318 <test_pixel+0x14>

00000354 <main>:
	}
}

//VGA_clear_charbuff_ASM();
//VGA_clear_pixelbuff_ASM();
int main() {
 354:	e92d4008 	push	{r3, lr}
	VGA_clear_pixelbuff_ASM();
 358:	eb000011 	bl	3a4 <VGA_clear_pixelbuff_ASM>
	return 0;
}
 35c:	e3a00000 	mov	r0, #0
 360:	e8bd8008 	pop	{r3, pc}

00000364 <VGA_clear_charbuff_ASM>:
	.global VGA_write_char_ASM
	.global VGA_write_byte_ASM
	.global VGA_draw_point_ASM

VGA_clear_charbuff_ASM:
	PUSH {R4-R12} 				//save the state of the system
 364:	e92d1ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, r12}
	MOV R2, #0
 368:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_charbuff
 36c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	MOV R0, #0
 370:	e3a00000 	mov	r0, #0

00000374 <X_CHAR_LOOP>:

X_CHAR_LOOP: 
	MOV R1, #0
 374:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0			// Iterate x-axis
 378:	e0834000 	add	r4, r3, r0

0000037c <Y_CHAR_LOOP>:

Y_CHAR_LOOP: 
	ADD R5, R4, R1, LSL #7	// Iterate y-axis
 37c:	e0845381 	add	r5, r4, r1, lsl #7
	
	STRB R2, [R5]			// Clear specific byte
 380:	e5c52000 	strb	r2, [r5]
	
	ADD R1, R1, #1			// increment y counter
 384:	e2811001 	add	r1, r1, #1
	CMP R1, #60				// check if it's at the bottom of the screen
 388:	e351003c 	cmp	r1, #60	; 0x3c
	BLT Y_CHAR_LOOP
 38c:	bafffffa 	blt	37c <Y_CHAR_LOOP>
	
	ADD R0, R0, #1			// increment x counter	
 390:	e2800001 	add	r0, r0, #1
	CMP R0, #80				// check if it's at the right of the screen
 394:	e3500050 	cmp	r0, #80	; 0x50
	BLT X_CHAR_LOOP
 398:	bafffff5 	blt	374 <X_CHAR_LOOP>

	POP {R4-R5}
 39c:	e8bd0030 	pop	{r4, r5}
	BX LR
 3a0:	e12fff1e 	bx	lr

000003a4 <VGA_clear_pixelbuff_ASM>:


VGA_clear_pixelbuff_ASM:
	PUSH {R4-R5}	
 3a4:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 3a8:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_pixelbuff
 3ac:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	MOV R0, #0
 3b0:	e3a00000 	mov	r0, #0

000003b4 <X_PIXEL_LOOP>:

X_PIXEL_LOOP:
	MOV R1, #0
 3b4:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0, LSL #1			// Iterate x-axis
 3b8:	e0834080 	add	r4, r3, r0, lsl #1

000003bc <Y_PIXEL_LOOP>:
Y_PIXEL_LOOP:
	ADD R5, R4, R1, LSL #10			// Iterate y-axis
 3bc:	e0845501 	add	r5, r4, r1, lsl #10
	
	STRH R2, [R5]
 3c0:	e1c520b0 	strh	r2, [r5]
	
	ADD R1, R1, #1
 3c4:	e2811001 	add	r1, r1, #1
	CMP R1, #240
 3c8:	e35100f0 	cmp	r1, #240	; 0xf0
	BLT Y_PIXEL_LOOP
 3cc:	bafffffa 	blt	3bc <Y_PIXEL_LOOP>
	
	ADD R0, R0, #1
 3d0:	e2800001 	add	r0, r0, #1
	CMP R0, #320
 3d4:	e3500d05 	cmp	r0, #320	; 0x140
	BLT X_PIXEL_LOOP
 3d8:	bafffff5 	blt	3b4 <X_PIXEL_LOOP>

	POP {R4-R5}
 3dc:	e8bd0030 	pop	{r4, r5}
	BX LR
 3e0:	e12fff1e 	bx	lr

000003e4 <VGA_write_char_ASM>:

VGA_write_char_ASM:	
	PUSH {R3-R7}
 3e4:	e92d00f8 	push	{r3, r4, r5, r6, r7}
	CMP R0, #0
 3e8:	e3500000 	cmp	r0, #0
	BXLT LR
 3ec:	b12fff1e 	bxlt	lr
	CMP R1, #0
 3f0:	e3510000 	cmp	r1, #0
	BXLT LR
 3f4:	b12fff1e 	bxlt	lr
	CMP R0, #79
 3f8:	e350004f 	cmp	r0, #79	; 0x4f
	BXGT LR
 3fc:	c12fff1e 	bxgt	lr
	CMP R1, #59
 400:	e351003b 	cmp	r1, #59	; 0x3b
	BXGT LR
 404:	c12fff1e 	bxgt	lr

	LDR R3, =VGA_charbuff
 408:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	ADD R3, R3, R0
 40c:	e0833000 	add	r3, r3, r0
	ADD R3, R3, R1, LSL #7
 410:	e0833381 	add	r3, r3, r1, lsl #7
	STRB R2, [R3]
 414:	e5c32000 	strb	r2, [r3]
	POP {R3-R7}
 418:	e8bd00f8 	pop	{r3, r4, r5, r6, r7}
	BX LR
 41c:	e12fff1e 	bx	lr

00000420 <VGA_write_byte_ASM>:

VGA_write_byte_ASM:
	PUSH {R3-R7}
 420:	e92d00f8 	push	{r3, r4, r5, r6, r7}
	CMP R0, #0
 424:	e3500000 	cmp	r0, #0
	BXLT LR
 428:	b12fff1e 	bxlt	lr
	CMP R1, #0
 42c:	e3510000 	cmp	r1, #0
	BXLT LR
 430:	b12fff1e 	bxlt	lr
	CMP R0, #78
 434:	e350004e 	cmp	r0, #78	; 0x4e
	BXGT LR
 438:	c12fff1e 	bxgt	lr
	CMP R1, #58
 43c:	e351003a 	cmp	r1, #58	; 0x3a
	BXGT LR
 440:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_charbuff
 444:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	ADD R3, R3, R0					// Set X-address and add it to base address					
 448:	e0833000 	add	r3, r3, r0
	ADD R3, R3, R1, LSL #7			// Add Y-address
 44c:	e0833381 	add	r3, r3, r1, lsl #7
									// R3 now holds the address of where we want to write
	LSR R4, R2, #4					//get most significant hex in R4					
 450:	e1a04222 	lsr	r4, r2, #4
	AND R5, R2, #0x0F				//the least significant hex in R5
 454:	e202500f 	and	r5, r2, #15
	
	CMP R4, #9						// Check if input is A,B,C,D,E,F
 458:	e3540009 	cmp	r4, #9
	ADDGT R4, R4, #7				// Add 7 so that the ASCII value is right
 45c:	c2844007 	addgt	r4, r4, #7
	CMP R5, #9						
 460:	e3550009 	cmp	r5, #9
	ADDGT R5, R5, #7
 464:	c2855007 	addgt	r5, r5, #7
	ADD R4, R4, #48					// Add base address of 0
 468:	e2844030 	add	r4, r4, #48	; 0x30
	ADD R5, R5, #48
 46c:	e2855030 	add	r5, r5, #48	; 0x30
	
	STRB R4, [R3]					// Store most significant hex at input location
 470:	e5c34000 	strb	r4, [r3]
	STRB R5, [R3, #1]				// Store least significant hex at input location + 1
 474:	e5c35001 	strb	r5, [r3, #1]
	POP {R3-R7}
 478:	e8bd00f8 	pop	{r3, r4, r5, r6, r7}
	BX LR
 47c:	e12fff1e 	bx	lr

00000480 <VGA_draw_point_ASM>:

VGA_draw_point_ASM:
	PUSH {R3}
 480:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
	CMP R0, #0
 484:	e3500000 	cmp	r0, #0
	BXLT LR
 488:	b12fff1e 	bxlt	lr
	CMP R1, #0
 48c:	e3510000 	cmp	r1, #0
	BXLT LR
 490:	b12fff1e 	bxlt	lr
	LDR R3, =319
 494:	e59f3024 	ldr	r3, [pc, #36]	; 4c0 <VGA_draw_point_ASM+0x40>
	CMP R0, R3
 498:	e1500003 	cmp	r0, r3
	BXGT LR
 49c:	c12fff1e 	bxgt	lr
	CMP R1, #239
 4a0:	e35100ef 	cmp	r1, #239	; 0xef
	BXGT LR
 4a4:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_pixelbuff
 4a8:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	ADD R3, R3, R0, LSL #1
 4ac:	e0833080 	add	r3, r3, r0, lsl #1
	ADD R3, R3, R1, LSL #10
 4b0:	e0833501 	add	r3, r3, r1, lsl #10
	STRH R2, [R3]
 4b4:	e1c320b0 	strh	r2, [r3]
	POP {R3}
 4b8:	e49d3004 	pop	{r3}		; (ldr r3, [sp], #4)
	BX LR
 4bc:	e12fff1e 	bx	lr
	PUSH {R3}
	CMP R0, #0
	BXLT LR
	CMP R1, #0
	BXLT LR
	LDR R3, =319
 4c0:	0000013f 	.word	0x0000013f

000004c4 <atexit>:
 4c4:	e1a01000 	mov	r1, r0
 4c8:	e3a00000 	mov	r0, #0
 4cc:	e92d4008 	push	{r3, lr}
 4d0:	e1a02000 	mov	r2, r0
 4d4:	e1a03000 	mov	r3, r0
 4d8:	eb00000e 	bl	518 <__register_exitproc>
 4dc:	e8bd4008 	pop	{r3, lr}
 4e0:	e12fff1e 	bx	lr

000004e4 <exit>:
 4e4:	e92d4008 	push	{r3, lr}
 4e8:	e3a01000 	mov	r1, #0
 4ec:	e1a04000 	mov	r4, r0
 4f0:	eb000045 	bl	60c <__call_exitprocs>
 4f4:	e59f3018 	ldr	r3, [pc, #24]	; 514 <exit+0x30>
 4f8:	e5930000 	ldr	r0, [r3]
 4fc:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 500:	e3530000 	cmp	r3, #0
 504:	11a0e00f 	movne	lr, pc
 508:	112fff13 	bxne	r3
 50c:	e1a00004 	mov	r0, r4
 510:	eb0000c9 	bl	83c <_exit>
 514:	000008fc 	.word	0x000008fc

00000518 <__register_exitproc>:
 518:	e59fc0e4 	ldr	r12, [pc, #228]	; 604 <__register_exitproc+0xec>
 51c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 520:	e59c4000 	ldr	r4, [r12]
 524:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 528:	e35c0000 	cmp	r12, #0
 52c:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 530:	e59c5004 	ldr	r5, [r12, #4]
 534:	0584c148 	streq	r12, [r4, #328]	; 0x148
 538:	e355001f 	cmp	r5, #31
 53c:	e24dd010 	sub	sp, sp, #16
 540:	e1a06000 	mov	r6, r0
 544:	da000015 	ble	5a0 <__register_exitproc+0x88>
 548:	e59f00b8 	ldr	r0, [pc, #184]	; 608 <__register_exitproc+0xf0>
 54c:	e3500000 	cmp	r0, #0
 550:	1a000001 	bne	55c <__register_exitproc+0x44>
 554:	e3e00000 	mvn	r0, #0
 558:	ea000018 	b	5c0 <__register_exitproc+0xa8>
 55c:	e3a00e19 	mov	r0, #400	; 0x190
 560:	e58d100c 	str	r1, [sp, #12]
 564:	e58d2008 	str	r2, [sp, #8]
 568:	e58d3004 	str	r3, [sp, #4]
 56c:	e320f000 	nop	{0}
 570:	e250c000 	subs	r12, r0, #0
 574:	e59d100c 	ldr	r1, [sp, #12]
 578:	e59d2008 	ldr	r2, [sp, #8]
 57c:	e59d3004 	ldr	r3, [sp, #4]
 580:	0afffff3 	beq	554 <__register_exitproc+0x3c>
 584:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 588:	e3a00000 	mov	r0, #0
 58c:	e58c0004 	str	r0, [r12, #4]
 590:	e58c5000 	str	r5, [r12]
 594:	e584c148 	str	r12, [r4, #328]	; 0x148
 598:	e58c0188 	str	r0, [r12, #392]	; 0x188
 59c:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 5a0:	e3560000 	cmp	r6, #0
 5a4:	e59c4004 	ldr	r4, [r12, #4]
 5a8:	1a000007 	bne	5cc <__register_exitproc+0xb4>
 5ac:	e2843002 	add	r3, r4, #2
 5b0:	e2844001 	add	r4, r4, #1
 5b4:	e78c1103 	str	r1, [r12, r3, lsl #2]
 5b8:	e58c4004 	str	r4, [r12, #4]
 5bc:	e3a00000 	mov	r0, #0
 5c0:	e28dd010 	add	sp, sp, #16
 5c4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 5c8:	e12fff1e 	bx	lr
 5cc:	e3a00001 	mov	r0, #1
 5d0:	e1a00410 	lsl	r0, r0, r4
 5d4:	e08c8104 	add	r8, r12, r4, lsl #2
 5d8:	e3560002 	cmp	r6, #2
 5dc:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 5e0:	e5883108 	str	r3, [r8, #264]	; 0x108
 5e4:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 5e8:	e1877000 	orr	r7, r7, r0
 5ec:	01830000 	orreq	r0, r3, r0
 5f0:	e1a05008 	mov	r5, r8
 5f4:	e5882088 	str	r2, [r8, #136]	; 0x88
 5f8:	e58c7188 	str	r7, [r12, #392]	; 0x188
 5fc:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 600:	eaffffe9 	b	5ac <__register_exitproc+0x94>
 604:	000008fc 	.word	0x000008fc
 608:	00000000 	.word	0x00000000

0000060c <__call_exitprocs>:
 60c:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 610:	e59f3168 	ldr	r3, [pc, #360]	; 780 <__call_exitprocs+0x174>
 614:	e5933000 	ldr	r3, [r3]
 618:	e24dd014 	sub	sp, sp, #20
 61c:	e58d3004 	str	r3, [sp, #4]
 620:	e2833f52 	add	r3, r3, #328	; 0x148
 624:	e58d0008 	str	r0, [sp, #8]
 628:	e58d300c 	str	r3, [sp, #12]
 62c:	e1a07001 	mov	r7, r1
 630:	e3a08001 	mov	r8, #1
 634:	e59d3004 	ldr	r3, [sp, #4]
 638:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 63c:	e3560000 	cmp	r6, #0
 640:	e59db00c 	ldr	r11, [sp, #12]
 644:	0a000033 	beq	718 <__call_exitprocs+0x10c>
 648:	e5965004 	ldr	r5, [r6, #4]
 64c:	e2554001 	subs	r4, r5, #1
 650:	5286a088 	addpl	r10, r6, #136	; 0x88
 654:	5285501f 	addpl	r5, r5, #31
 658:	508a5105 	addpl	r5, r10, r5, lsl #2
 65c:	5a000007 	bpl	680 <__call_exitprocs+0x74>
 660:	ea000029 	b	70c <__call_exitprocs+0x100>
 664:	e5953000 	ldr	r3, [r5]
 668:	e1530007 	cmp	r3, r7
 66c:	0a000005 	beq	688 <__call_exitprocs+0x7c>
 670:	e2444001 	sub	r4, r4, #1
 674:	e3740001 	cmn	r4, #1
 678:	e2455004 	sub	r5, r5, #4
 67c:	0a000022 	beq	70c <__call_exitprocs+0x100>
 680:	e3570000 	cmp	r7, #0
 684:	1afffff6 	bne	664 <__call_exitprocs+0x58>
 688:	e5963004 	ldr	r3, [r6, #4]
 68c:	e06a2005 	rsb	r2, r10, r5
 690:	e2433001 	sub	r3, r3, #1
 694:	e0862002 	add	r2, r6, r2
 698:	e1530004 	cmp	r3, r4
 69c:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 6a0:	13a01000 	movne	r1, #0
 6a4:	05864004 	streq	r4, [r6, #4]
 6a8:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 6ac:	e3530000 	cmp	r3, #0
 6b0:	0affffee 	beq	670 <__call_exitprocs+0x64>
 6b4:	e1a02418 	lsl	r2, r8, r4
 6b8:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 6bc:	e1120001 	tst	r2, r1
 6c0:	e5969004 	ldr	r9, [r6, #4]
 6c4:	0a000016 	beq	724 <__call_exitprocs+0x118>
 6c8:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 6cc:	e1120001 	tst	r2, r1
 6d0:	1a000016 	bne	730 <__call_exitprocs+0x124>
 6d4:	e59d0008 	ldr	r0, [sp, #8]
 6d8:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 6dc:	e1a0e00f 	mov	lr, pc
 6e0:	e12fff13 	bx	r3
 6e4:	e5963004 	ldr	r3, [r6, #4]
 6e8:	e1530009 	cmp	r3, r9
 6ec:	1affffd0 	bne	634 <__call_exitprocs+0x28>
 6f0:	e59b3000 	ldr	r3, [r11]
 6f4:	e1530006 	cmp	r3, r6
 6f8:	1affffcd 	bne	634 <__call_exitprocs+0x28>
 6fc:	e2444001 	sub	r4, r4, #1
 700:	e3740001 	cmn	r4, #1
 704:	e2455004 	sub	r5, r5, #4
 708:	1affffdc 	bne	680 <__call_exitprocs+0x74>
 70c:	e59f1070 	ldr	r1, [pc, #112]	; 784 <__call_exitprocs+0x178>
 710:	e3510000 	cmp	r1, #0
 714:	1a000009 	bne	740 <__call_exitprocs+0x134>
 718:	e28dd014 	add	sp, sp, #20
 71c:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 720:	e12fff1e 	bx	lr
 724:	e1a0e00f 	mov	lr, pc
 728:	e12fff13 	bx	r3
 72c:	eaffffec 	b	6e4 <__call_exitprocs+0xd8>
 730:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 734:	e1a0e00f 	mov	lr, pc
 738:	e12fff13 	bx	r3
 73c:	eaffffe8 	b	6e4 <__call_exitprocs+0xd8>
 740:	e5963004 	ldr	r3, [r6, #4]
 744:	e3530000 	cmp	r3, #0
 748:	e5963000 	ldr	r3, [r6]
 74c:	1a000008 	bne	774 <__call_exitprocs+0x168>
 750:	e3530000 	cmp	r3, #0
 754:	0a000006 	beq	774 <__call_exitprocs+0x168>
 758:	e1a00006 	mov	r0, r6
 75c:	e58b3000 	str	r3, [r11]
 760:	e320f000 	nop	{0}
 764:	e59b6000 	ldr	r6, [r11]
 768:	e3560000 	cmp	r6, #0
 76c:	1affffb5 	bne	648 <__call_exitprocs+0x3c>
 770:	eaffffe8 	b	718 <__call_exitprocs+0x10c>
 774:	e1a0b006 	mov	r11, r6
 778:	e1a06003 	mov	r6, r3
 77c:	eafffff9 	b	768 <__call_exitprocs+0x15c>
 780:	000008fc 	.word	0x000008fc
 784:	00000000 	.word	0x00000000

00000788 <register_fini>:
 788:	e92d4008 	push	{r3, lr}
 78c:	e59f3010 	ldr	r3, [pc, #16]	; 7a4 <register_fini+0x1c>
 790:	e3530000 	cmp	r3, #0
 794:	159f000c 	ldrne	r0, [pc, #12]	; 7a8 <register_fini+0x20>
 798:	1bffff49 	blne	4c4 <atexit>
 79c:	e8bd4008 	pop	{r3, lr}
 7a0:	e12fff1e 	bx	lr
 7a4:	00000924 	.word	0x00000924
 7a8:	000007ac 	.word	0x000007ac

000007ac <__libc_fini_array>:
 7ac:	e92d4038 	push	{r3, r4, r5, lr}
 7b0:	e59f5030 	ldr	r5, [pc, #48]	; 7e8 <__libc_fini_array+0x3c>
 7b4:	e59f4030 	ldr	r4, [pc, #48]	; 7ec <__libc_fini_array+0x40>
 7b8:	e0654004 	rsb	r4, r5, r4
 7bc:	e1b04144 	asrs	r4, r4, #2
 7c0:	10855104 	addne	r5, r5, r4, lsl #2
 7c4:	0a000004 	beq	7dc <__libc_fini_array+0x30>
 7c8:	e5353004 	ldr	r3, [r5, #-4]!
 7cc:	e1a0e00f 	mov	lr, pc
 7d0:	e12fff13 	bx	r3
 7d4:	e2544001 	subs	r4, r4, #1
 7d8:	1afffffa 	bne	7c8 <__libc_fini_array+0x1c>
 7dc:	eb000050 	bl	924 <__libc_fini>
 7e0:	e8bd4038 	pop	{r3, r4, r5, lr}
 7e4:	e12fff1e 	bx	lr
 7e8:	0000093c 	.word	0x0000093c
 7ec:	00000940 	.word	0x00000940

000007f0 <__cs3_premain>:
 7f0:	e92d4008 	push	{r3, lr}
 7f4:	eb00001d 	bl	870 <__libc_init_array>
 7f8:	e59f3030 	ldr	r3, [pc, #48]	; 830 <__cs3_premain+0x40>
 7fc:	e3530000 	cmp	r3, #0
 800:	15930000 	ldrne	r0, [r3]
 804:	01a00003 	moveq	r0, r3
 808:	e59f3024 	ldr	r3, [pc, #36]	; 834 <__cs3_premain+0x44>
 80c:	e3530000 	cmp	r3, #0
 810:	15931000 	ldrne	r1, [r3]
 814:	01a01003 	moveq	r1, r3
 818:	e3a02000 	mov	r2, #0
 81c:	ebfffecc 	bl	354 <main>
 820:	e59f3010 	ldr	r3, [pc, #16]	; 838 <__cs3_premain+0x48>
 824:	e3530000 	cmp	r3, #0
 828:	1bffff2d 	blne	4e4 <exit>
 82c:	eafffffe 	b	82c <__cs3_premain+0x3c>
	...
 838:	000004e4 	.word	0x000004e4

0000083c <_exit>:
 83c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 840:	e3a00018 	mov	r0, #24
 844:	e59f1004 	ldr	r1, [pc, #4]	; 850 <_exit+0x14>
 848:	ef123456 	svc	0x00123456
 84c:	eafffffe 	b	84c <_exit+0x10>
 850:	00020026 	.word	0x00020026

00000854 <__cs3_isr_interrupt>:
 854:	eafffffe 	b	854 <__cs3_isr_interrupt>

00000858 <__cs3_isr_undef>:
 858:	eafffffe 	b	858 <__cs3_isr_undef>

0000085c <__cs3_isr_swi>:
 85c:	eafffffe 	b	85c <__cs3_isr_swi>

00000860 <__cs3_isr_pabort>:
 860:	eafffffe 	b	860 <__cs3_isr_pabort>

00000864 <__cs3_isr_dabort>:
 864:	eafffffe 	b	864 <__cs3_isr_dabort>

00000868 <__cs3_isr_irq>:
 868:	eafffffe 	b	868 <__cs3_isr_irq>

0000086c <__cs3_isr_fiq>:
 86c:	eafffffe 	b	86c <__cs3_isr_fiq>

00000870 <__libc_init_array>:
 870:	e92d4070 	push	{r4, r5, r6, lr}
 874:	e59f506c 	ldr	r5, [pc, #108]	; 8e8 <__libc_init_array+0x78>
 878:	e59f606c 	ldr	r6, [pc, #108]	; 8ec <__libc_init_array+0x7c>
 87c:	e0656006 	rsb	r6, r5, r6
 880:	e1b06146 	asrs	r6, r6, #2
 884:	12455004 	subne	r5, r5, #4
 888:	13a04000 	movne	r4, #0
 88c:	0a000005 	beq	8a8 <__libc_init_array+0x38>
 890:	e5b53004 	ldr	r3, [r5, #4]!
 894:	e2844001 	add	r4, r4, #1
 898:	e1a0e00f 	mov	lr, pc
 89c:	e12fff13 	bx	r3
 8a0:	e1560004 	cmp	r6, r4
 8a4:	1afffff9 	bne	890 <__libc_init_array+0x20>
 8a8:	e59f5040 	ldr	r5, [pc, #64]	; 8f0 <__libc_init_array+0x80>
 8ac:	e59f6040 	ldr	r6, [pc, #64]	; 8f4 <__libc_init_array+0x84>
 8b0:	e0656006 	rsb	r6, r5, r6
 8b4:	eb000012 	bl	904 <_init>
 8b8:	e1b06146 	asrs	r6, r6, #2
 8bc:	12455004 	subne	r5, r5, #4
 8c0:	13a04000 	movne	r4, #0
 8c4:	0a000005 	beq	8e0 <__libc_init_array+0x70>
 8c8:	e5b53004 	ldr	r3, [r5, #4]!
 8cc:	e2844001 	add	r4, r4, #1
 8d0:	e1a0e00f 	mov	lr, pc
 8d4:	e12fff13 	bx	r3
 8d8:	e1560004 	cmp	r6, r4
 8dc:	1afffff9 	bne	8c8 <__libc_init_array+0x58>
 8e0:	e8bd4070 	pop	{r4, r5, r6, lr}
 8e4:	e12fff1e 	bx	lr
 8e8:	0000091c 	.word	0x0000091c
 8ec:	0000091c 	.word	0x0000091c
 8f0:	0000091c 	.word	0x0000091c
 8f4:	00000924 	.word	0x00000924

Disassembly of section .rodata:

000008fc <_global_impure_ptr>:
 8fc:	00000968 00000043                       h...C...

00000904 <_init>:
 904:	e1a0c00d 	mov	r12, sp
 908:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 90c:	e24cb004 	sub	r11, r12, #4
 910:	e24bd028 	sub	sp, r11, #40	; 0x28
 914:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 918:	e12fff1e 	bx	lr

0000091c <__init_array_start>:
 91c:	00000788 	.word	0x00000788

00000920 <__frame_dummy_init_array_entry>:
 920:	00000208                                ....

00000924 <__libc_fini>:
 924:	e1a0c00d 	mov	r12, sp
 928:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 92c:	e24cb004 	sub	r11, r12, #4
 930:	e24bd028 	sub	sp, r11, #40	; 0x28
 934:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 938:	e12fff1e 	bx	lr

0000093c <__fini_array_start>:
 93c:	000001c4 	.word	0x000001c4

00000940 <__cs3_regions>:
	...
 94c:	00000d98 	.word	0x00000d98
 950:	00000020 	.word	0x00000020

00000954 <__cs3_regions_end>:
 954:	00000000 	.word	0x00000000
